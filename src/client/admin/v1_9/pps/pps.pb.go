// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: client/admin/v1_9/pps/pps.proto

package pps

import (
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	pfs "github.com/pachyderm/pachyderm/src/client/admin/v1_9/pfs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JobState int32

const (
	JobState_JOB_STARTING JobState = 0
	JobState_JOB_RUNNING  JobState = 1
	JobState_JOB_FAILURE  JobState = 2
	JobState_JOB_SUCCESS  JobState = 3
	JobState_JOB_KILLED   JobState = 4
	JobState_JOB_MERGING  JobState = 5
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STARTING",
		1: "JOB_RUNNING",
		2: "JOB_FAILURE",
		3: "JOB_SUCCESS",
		4: "JOB_KILLED",
		5: "JOB_MERGING",
	}
	JobState_value = map[string]int32{
		"JOB_STARTING": 0,
		"JOB_RUNNING":  1,
		"JOB_FAILURE":  2,
		"JOB_SUCCESS":  3,
		"JOB_KILLED":   4,
		"JOB_MERGING":  5,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_client_admin_v1_9_pps_pps_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_client_admin_v1_9_pps_pps_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{0}
}

type DatumState int32

const (
	DatumState_FAILED    DatumState = 0
	DatumState_SUCCESS   DatumState = 1
	DatumState_SKIPPED   DatumState = 2
	DatumState_STARTING  DatumState = 3
	DatumState_RECOVERED DatumState = 4
)

// Enum value maps for DatumState.
var (
	DatumState_name = map[int32]string{
		0: "FAILED",
		1: "SUCCESS",
		2: "SKIPPED",
		3: "STARTING",
		4: "RECOVERED",
	}
	DatumState_value = map[string]int32{
		"FAILED":    0,
		"SUCCESS":   1,
		"SKIPPED":   2,
		"STARTING":  3,
		"RECOVERED": 4,
	}
)

func (x DatumState) Enum() *DatumState {
	p := new(DatumState)
	*p = x
	return p
}

func (x DatumState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatumState) Descriptor() protoreflect.EnumDescriptor {
	return file_client_admin_v1_9_pps_pps_proto_enumTypes[1].Descriptor()
}

func (DatumState) Type() protoreflect.EnumType {
	return &file_client_admin_v1_9_pps_pps_proto_enumTypes[1]
}

func (x DatumState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatumState.Descriptor instead.
func (DatumState) EnumDescriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{1}
}

type WorkerState int32

const (
	WorkerState_POD_RUNNING WorkerState = 0
	WorkerState_POD_SUCCESS WorkerState = 1
	WorkerState_POD_FAILED  WorkerState = 2
)

// Enum value maps for WorkerState.
var (
	WorkerState_name = map[int32]string{
		0: "POD_RUNNING",
		1: "POD_SUCCESS",
		2: "POD_FAILED",
	}
	WorkerState_value = map[string]int32{
		"POD_RUNNING": 0,
		"POD_SUCCESS": 1,
		"POD_FAILED":  2,
	}
)

func (x WorkerState) Enum() *WorkerState {
	p := new(WorkerState)
	*p = x
	return p
}

func (x WorkerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerState) Descriptor() protoreflect.EnumDescriptor {
	return file_client_admin_v1_9_pps_pps_proto_enumTypes[2].Descriptor()
}

func (WorkerState) Type() protoreflect.EnumType {
	return &file_client_admin_v1_9_pps_pps_proto_enumTypes[2]
}

func (x WorkerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerState.Descriptor instead.
func (WorkerState) EnumDescriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{2}
}

type PipelineState int32

const (
	// There is an EtcdPipelineInfo + spec commit, but no RC
	// This happens when a pipeline has been created but not yet picked up by a
	// PPS server.
	PipelineState_PIPELINE_STARTING PipelineState = 0
	// A pipeline has a spec commit and a service + RC
	// This is the normal state of a pipeline.
	PipelineState_PIPELINE_RUNNING PipelineState = 1
	// Equivalent to STARTING (there is an EtcdPipelineInfo + commit, but no RC)
	// After some error caused runPipeline to exit, but before the pipeline is
	// re-run. This is when the exponential backoff is in effect.
	PipelineState_PIPELINE_RESTARTING PipelineState = 2
	// We have retried too many times and we have given up on this pipeline (or
	// the pipeline image doesn't exist)
	PipelineState_PIPELINE_FAILURE PipelineState = 3
	// The pipeline has been explicitly paused by the user (the pipeline spec's
	// Stopped field should be true if the pipeline is in this state)
	PipelineState_PIPELINE_PAUSED PipelineState = 4
	// The pipeline is fully functional, but there are no commits to process.
	PipelineState_PIPELINE_STANDBY PipelineState = 5
)

// Enum value maps for PipelineState.
var (
	PipelineState_name = map[int32]string{
		0: "PIPELINE_STARTING",
		1: "PIPELINE_RUNNING",
		2: "PIPELINE_RESTARTING",
		3: "PIPELINE_FAILURE",
		4: "PIPELINE_PAUSED",
		5: "PIPELINE_STANDBY",
	}
	PipelineState_value = map[string]int32{
		"PIPELINE_STARTING":   0,
		"PIPELINE_RUNNING":    1,
		"PIPELINE_RESTARTING": 2,
		"PIPELINE_FAILURE":    3,
		"PIPELINE_PAUSED":     4,
		"PIPELINE_STANDBY":    5,
	}
)

func (x PipelineState) Enum() *PipelineState {
	p := new(PipelineState)
	*p = x
	return p
}

func (x PipelineState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineState) Descriptor() protoreflect.EnumDescriptor {
	return file_client_admin_v1_9_pps_pps_proto_enumTypes[3].Descriptor()
}

func (PipelineState) Type() protoreflect.EnumType {
	return &file_client_admin_v1_9_pps_pps_proto_enumTypes[3]
}

func (x PipelineState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineState.Descriptor instead.
func (PipelineState) EnumDescriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{3}
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name must be the name of the secret in kubernetes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Key of the secret to load into env_var, this field only has meaning if EnvVar != "".
	Key       string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	EnvVar    string `protobuf:"bytes,3,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{0}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Secret) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *Secret) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

type Transform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image            string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Cmd              []string          `protobuf:"bytes,2,rep,name=cmd,proto3" json:"cmd,omitempty"`
	ErrCmd           []string          `protobuf:"bytes,13,rep,name=err_cmd,json=errCmd,proto3" json:"err_cmd,omitempty"`
	Env              map[string]string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Secrets          []*Secret         `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty"`
	ImagePullSecrets []string          `protobuf:"bytes,9,rep,name=image_pull_secrets,json=imagePullSecrets,proto3" json:"image_pull_secrets,omitempty"`
	Stdin            []string          `protobuf:"bytes,5,rep,name=stdin,proto3" json:"stdin,omitempty"`
	ErrStdin         []string          `protobuf:"bytes,14,rep,name=err_stdin,json=errStdin,proto3" json:"err_stdin,omitempty"`
	AcceptReturnCode []int64           `protobuf:"varint,6,rep,packed,name=accept_return_code,json=acceptReturnCode,proto3" json:"accept_return_code,omitempty"`
	Debug            bool              `protobuf:"varint,7,opt,name=debug,proto3" json:"debug,omitempty"`
	User             string            `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	WorkingDir       string            `protobuf:"bytes,11,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	Dockerfile       string            `protobuf:"bytes,12,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
}

func (x *Transform) Reset() {
	*x = Transform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transform) ProtoMessage() {}

func (x *Transform) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transform.ProtoReflect.Descriptor instead.
func (*Transform) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{1}
}

func (x *Transform) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Transform) GetCmd() []string {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Transform) GetErrCmd() []string {
	if x != nil {
		return x.ErrCmd
	}
	return nil
}

func (x *Transform) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Transform) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Transform) GetImagePullSecrets() []string {
	if x != nil {
		return x.ImagePullSecrets
	}
	return nil
}

func (x *Transform) GetStdin() []string {
	if x != nil {
		return x.Stdin
	}
	return nil
}

func (x *Transform) GetErrStdin() []string {
	if x != nil {
		return x.ErrStdin
	}
	return nil
}

func (x *Transform) GetAcceptReturnCode() []int64 {
	if x != nil {
		return x.AcceptReturnCode
	}
	return nil
}

func (x *Transform) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Transform) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Transform) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Transform) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

type TFJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tf_job  is a serialized Kubeflow TFJob spec. Pachyderm sends this directly
	// to a kubernetes cluster on which kubeflow has been installed, instead of
	// creating a pipeline ReplicationController as it normally would.
	TfJob string `protobuf:"bytes,1,opt,name=tf_job,json=tfJob,proto3" json:"tf_job,omitempty"`
}

func (x *TFJob) Reset() {
	*x = TFJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFJob) ProtoMessage() {}

func (x *TFJob) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFJob.ProtoReflect.Descriptor instead.
func (*TFJob) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{2}
}

func (x *TFJob) GetTfJob() string {
	if x != nil {
		return x.TfJob
	}
	return ""
}

type Egress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *Egress) Reset() {
	*x = Egress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Egress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Egress) ProtoMessage() {}

func (x *Egress) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Egress.ProtoReflect.Descriptor instead.
func (*Egress) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{3}
}

func (x *Egress) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{4}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalPort int32             `protobuf:"varint,1,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort int32             `protobuf:"varint,2,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	Ip           string            `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Type         string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Annotations  map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{5}
}

func (x *Service) GetInternalPort() int32 {
	if x != nil {
		return x.InternalPort
	}
	return 0
}

func (x *Service) GetExternalPort() int32 {
	if x != nil {
		return x.ExternalPort
	}
	return 0
}

func (x *Service) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Service) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Service) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Spout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overwrite bool     `protobuf:"varint,1,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Service   *Service `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Marker    string   `protobuf:"bytes,3,opt,name=marker,proto3" json:"marker,omitempty"`
}

func (x *Spout) Reset() {
	*x = Spout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spout) ProtoMessage() {}

func (x *Spout) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spout.ProtoReflect.Descriptor instead.
func (*Spout) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{6}
}

func (x *Spout) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *Spout) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Spout) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

type PFSInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repo   string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Branch string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Glob   string `protobuf:"bytes,5,opt,name=glob,proto3" json:"glob,omitempty"`
	JoinOn string `protobuf:"bytes,8,opt,name=join_on,json=joinOn,proto3" json:"join_on,omitempty"`
	Lazy   bool   `protobuf:"varint,6,opt,name=lazy,proto3" json:"lazy,omitempty"`
	// EmptyFiles, if true, will cause files from this PFS input to be
	// presented as empty files. This is useful in shuffle pipelines where you
	// want to read the names of files and reorganize them using symlinks.
	EmptyFiles bool `protobuf:"varint,7,opt,name=empty_files,json=emptyFiles,proto3" json:"empty_files,omitempty"`
}

func (x *PFSInput) Reset() {
	*x = PFSInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFSInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFSInput) ProtoMessage() {}

func (x *PFSInput) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFSInput.ProtoReflect.Descriptor instead.
func (*PFSInput) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{7}
}

func (x *PFSInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PFSInput) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *PFSInput) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PFSInput) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PFSInput) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

func (x *PFSInput) GetJoinOn() string {
	if x != nil {
		return x.JoinOn
	}
	return ""
}

func (x *PFSInput) GetLazy() bool {
	if x != nil {
		return x.Lazy
	}
	return false
}

func (x *PFSInput) GetEmptyFiles() bool {
	if x != nil {
		return x.EmptyFiles
	}
	return false
}

type CronInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repo   string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Commit string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Spec   string `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Overwrite, if true, will expose a single datum that gets overwritten each
	// tick. If false, it will create a new datum for each tick.
	Overwrite bool                 `protobuf:"varint,6,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Start     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *CronInput) Reset() {
	*x = CronInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronInput) ProtoMessage() {}

func (x *CronInput) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronInput.ProtoReflect.Descriptor instead.
func (*CronInput) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{8}
}

func (x *CronInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronInput) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CronInput) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *CronInput) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *CronInput) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *CronInput) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

type GitInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Branch string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitInput) Reset() {
	*x = GitInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitInput) ProtoMessage() {}

func (x *GitInput) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitInput.ProtoReflect.Descriptor instead.
func (*GitInput) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{9}
}

func (x *GitInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitInput) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitInput) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitInput) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pfs   *PFSInput  `protobuf:"bytes,6,opt,name=pfs,proto3" json:"pfs,omitempty"`
	Join  []*Input   `protobuf:"bytes,7,rep,name=join,proto3" json:"join,omitempty"`
	Cross []*Input   `protobuf:"bytes,2,rep,name=cross,proto3" json:"cross,omitempty"`
	Union []*Input   `protobuf:"bytes,3,rep,name=union,proto3" json:"union,omitempty"`
	Cron  *CronInput `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`
	Git   *GitInput  `protobuf:"bytes,5,opt,name=git,proto3" json:"git,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{10}
}

func (x *Input) GetPfs() *PFSInput {
	if x != nil {
		return x.Pfs
	}
	return nil
}

func (x *Input) GetJoin() []*Input {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *Input) GetCross() []*Input {
	if x != nil {
		return x.Cross
	}
	return nil
}

func (x *Input) GetUnion() []*Input {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *Input) GetCron() *CronInput {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *Input) GetGit() *GitInput {
	if x != nil {
		return x.Git
	}
	return nil
}

type JobInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Commit *pfs.Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Glob   string      `protobuf:"bytes,2,opt,name=glob,proto3" json:"glob,omitempty"`
	Lazy   bool        `protobuf:"varint,3,opt,name=lazy,proto3" json:"lazy,omitempty"`
}

func (x *JobInput) Reset() {
	*x = JobInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInput) ProtoMessage() {}

func (x *JobInput) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInput.ProtoReflect.Descriptor instead.
func (*JobInput) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{11}
}

func (x *JobInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobInput) GetCommit() *pfs.Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *JobInput) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

func (x *JobInput) GetLazy() bool {
	if x != nil {
		return x.Lazy
	}
	return false
}

type ParallelismSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starts the pipeline/job with a 'constant' workers, unless 'constant' is
	// zero. If 'constant' is zero (which is the zero value of ParallelismSpec),
	// then Pachyderm will choose the number of workers that is started,
	// (currently it chooses the number of workers in the cluster)
	Constant uint64 `protobuf:"varint,2,opt,name=constant,proto3" json:"constant,omitempty"`
	// Starts the pipeline/job with number of workers equal to 'coefficient' * N,
	// where N is the number of nodes in the kubernetes cluster.
	//
	// For example, if each Kubernetes node has four CPUs, you might set
	// 'coefficient' to four, so that there are four Pachyderm workers per
	// Kubernetes node, and each Pachyderm worker gets one CPU. If you want to
	// reserve half the nodes in your cluster for other tasks, you might set
	// 'coefficient' to 0.5.
	Coefficient float64 `protobuf:"fixed64,3,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
}

func (x *ParallelismSpec) Reset() {
	*x = ParallelismSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelismSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelismSpec) ProtoMessage() {}

func (x *ParallelismSpec) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelismSpec.ProtoReflect.Descriptor instead.
func (*ParallelismSpec) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{12}
}

func (x *ParallelismSpec) GetConstant() uint64 {
	if x != nil {
		return x.Constant
	}
	return 0
}

func (x *ParallelismSpec) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

// HashTreeSpec sets the number of shards into which pps splits a pipeline's
// output commits (sharded commits are implemented in Pachyderm 1.8+ only)
type HashtreeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constant uint64 `protobuf:"varint,1,opt,name=constant,proto3" json:"constant,omitempty"`
}

func (x *HashtreeSpec) Reset() {
	*x = HashtreeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashtreeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashtreeSpec) ProtoMessage() {}

func (x *HashtreeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashtreeSpec.ProtoReflect.Descriptor instead.
func (*HashtreeSpec) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{13}
}

func (x *HashtreeSpec) GetConstant() uint64 {
	if x != nil {
		return x.Constant
	}
	return 0
}

type InputFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This file's absolute path within its pfs repo.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// This file's hash
	Hash []byte `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *InputFile) Reset() {
	*x = InputFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFile) ProtoMessage() {}

func (x *InputFile) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFile.ProtoReflect.Descriptor instead.
func (*InputFile) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{14}
}

func (x *InputFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InputFile) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the hash computed from all the files
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job *Job   `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{15}
}

func (x *Datum) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Datum) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type DatumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum    *Datum          `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
	State    DatumState      `protobuf:"varint,2,opt,name=state,proto3,enum=pps_1_9.DatumState" json:"state,omitempty"`
	Stats    *ProcessStats   `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	PfsState *pfs.File       `protobuf:"bytes,4,opt,name=pfs_state,json=pfsState,proto3" json:"pfs_state,omitempty"`
	Data     []*pfs.FileInfo `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DatumInfo) Reset() {
	*x = DatumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatumInfo) ProtoMessage() {}

func (x *DatumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatumInfo.ProtoReflect.Descriptor instead.
func (*DatumInfo) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{16}
}

func (x *DatumInfo) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *DatumInfo) GetState() DatumState {
	if x != nil {
		return x.State
	}
	return DatumState_FAILED
}

func (x *DatumInfo) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *DatumInfo) GetPfsState() *pfs.File {
	if x != nil {
		return x.PfsState
	}
	return nil
}

func (x *DatumInfo) GetData() []*pfs.FileInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type Aggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                 int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Mean                  float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty"`
	Stddev                float64 `protobuf:"fixed64,3,opt,name=stddev,proto3" json:"stddev,omitempty"`
	FifthPercentile       float64 `protobuf:"fixed64,4,opt,name=fifth_percentile,json=fifthPercentile,proto3" json:"fifth_percentile,omitempty"`
	NinetyFifthPercentile float64 `protobuf:"fixed64,5,opt,name=ninety_fifth_percentile,json=ninetyFifthPercentile,proto3" json:"ninety_fifth_percentile,omitempty"`
}

func (x *Aggregate) Reset() {
	*x = Aggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregate) ProtoMessage() {}

func (x *Aggregate) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregate.ProtoReflect.Descriptor instead.
func (*Aggregate) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{17}
}

func (x *Aggregate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Aggregate) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *Aggregate) GetStddev() float64 {
	if x != nil {
		return x.Stddev
	}
	return 0
}

func (x *Aggregate) GetFifthPercentile() float64 {
	if x != nil {
		return x.FifthPercentile
	}
	return 0
}

func (x *Aggregate) GetNinetyFifthPercentile() float64 {
	if x != nil {
		return x.NinetyFifthPercentile
	}
	return 0
}

type ProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadTime  *duration.Duration `protobuf:"bytes,1,opt,name=download_time,json=downloadTime,proto3" json:"download_time,omitempty"`
	ProcessTime   *duration.Duration `protobuf:"bytes,2,opt,name=process_time,json=processTime,proto3" json:"process_time,omitempty"`
	UploadTime    *duration.Duration `protobuf:"bytes,3,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	DownloadBytes uint64             `protobuf:"varint,4,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	UploadBytes   uint64             `protobuf:"varint,5,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
}

func (x *ProcessStats) Reset() {
	*x = ProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStats) ProtoMessage() {}

func (x *ProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStats.ProtoReflect.Descriptor instead.
func (*ProcessStats) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{18}
}

func (x *ProcessStats) GetDownloadTime() *duration.Duration {
	if x != nil {
		return x.DownloadTime
	}
	return nil
}

func (x *ProcessStats) GetProcessTime() *duration.Duration {
	if x != nil {
		return x.ProcessTime
	}
	return nil
}

func (x *ProcessStats) GetUploadTime() *duration.Duration {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *ProcessStats) GetDownloadBytes() uint64 {
	if x != nil {
		return x.DownloadBytes
	}
	return 0
}

func (x *ProcessStats) GetUploadBytes() uint64 {
	if x != nil {
		return x.UploadBytes
	}
	return 0
}

type AggregateProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadTime  *Aggregate `protobuf:"bytes,1,opt,name=download_time,json=downloadTime,proto3" json:"download_time,omitempty"`
	ProcessTime   *Aggregate `protobuf:"bytes,2,opt,name=process_time,json=processTime,proto3" json:"process_time,omitempty"`
	UploadTime    *Aggregate `protobuf:"bytes,3,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	DownloadBytes *Aggregate `protobuf:"bytes,4,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	UploadBytes   *Aggregate `protobuf:"bytes,5,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
}

func (x *AggregateProcessStats) Reset() {
	*x = AggregateProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateProcessStats) ProtoMessage() {}

func (x *AggregateProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateProcessStats.ProtoReflect.Descriptor instead.
func (*AggregateProcessStats) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{19}
}

func (x *AggregateProcessStats) GetDownloadTime() *Aggregate {
	if x != nil {
		return x.DownloadTime
	}
	return nil
}

func (x *AggregateProcessStats) GetProcessTime() *Aggregate {
	if x != nil {
		return x.ProcessTime
	}
	return nil
}

func (x *AggregateProcessStats) GetUploadTime() *Aggregate {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *AggregateProcessStats) GetDownloadBytes() *Aggregate {
	if x != nil {
		return x.DownloadBytes
	}
	return nil
}

func (x *AggregateProcessStats) GetUploadBytes() *Aggregate {
	if x != nil {
		return x.UploadBytes
	}
	return nil
}

type WorkerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId string       `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	JobId    string       `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Data     []*InputFile `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	// Started is the time processing on the current datum began.
	Started   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
	Stats     *ProcessStats        `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	QueueSize int64                `protobuf:"varint,6,opt,name=queue_size,json=queueSize,proto3" json:"queue_size,omitempty"`
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{20}
}

func (x *WorkerStatus) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *WorkerStatus) GetData() []*InputFile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WorkerStatus) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *WorkerStatus) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *WorkerStatus) GetQueueSize() int64 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

// ResourceSpec describes the amount of resources that pipeline pods should
// request from kubernetes, for scheduling.
type ResourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of CPUs each worker needs (partial values are allowed, and
	// encouraged)
	Cpu float32 `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// The amount of memory each worker needs (in bytes, with allowed
	// SI suffixes (M, K, G, Mi, Ki, Gi, etc).
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// The spec for GPU resources.
	Gpu *GPUSpec `protobuf:"bytes,5,opt,name=gpu,proto3" json:"gpu,omitempty"`
	// The amount of ephemeral storage each worker needs (in bytes, with allowed
	// SI suffixes (M, K, G, Mi, Ki, Gi, etc).
	Disk string `protobuf:"bytes,4,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *ResourceSpec) Reset() {
	*x = ResourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpec) ProtoMessage() {}

func (x *ResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpec.ProtoReflect.Descriptor instead.
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{21}
}

func (x *ResourceSpec) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceSpec) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceSpec) GetGpu() *GPUSpec {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *ResourceSpec) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

type GPUSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of GPU (nvidia.com/gpu or amd.com/gpu for example).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The number of GPUs to request.
	Number int64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *GPUSpec) Reset() {
	*x = GPUSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSpec) ProtoMessage() {}

func (x *GPUSpec) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSpec.ProtoReflect.Descriptor instead.
func (*GPUSpec) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{22}
}

func (x *GPUSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GPUSpec) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

// EtcdJobInfo is the portion of the JobInfo that gets stored in etcd during
// job execution. It contains fields which change over the lifetime of the job
// but aren't used in the execution of the job.
type EtcdJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job          *Job        `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Pipeline     *Pipeline   `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,3,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	// Job restart count (e.g. due to datum failure)
	Restart uint64 `protobuf:"varint,4,opt,name=restart,proto3" json:"restart,omitempty"`
	// Counts of how many times we processed or skipped a datum
	DataProcessed int64 `protobuf:"varint,5,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	DataSkipped   int64 `protobuf:"varint,6,opt,name=data_skipped,json=dataSkipped,proto3" json:"data_skipped,omitempty"`
	DataTotal     int64 `protobuf:"varint,7,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	DataFailed    int64 `protobuf:"varint,8,opt,name=data_failed,json=dataFailed,proto3" json:"data_failed,omitempty"`
	DataRecovered int64 `protobuf:"varint,15,opt,name=data_recovered,json=dataRecovered,proto3" json:"data_recovered,omitempty"`
	// Download/process/upload time and download/upload bytes
	Stats       *ProcessStats        `protobuf:"bytes,9,opt,name=stats,proto3" json:"stats,omitempty"`
	StatsCommit *pfs.Commit          `protobuf:"bytes,10,opt,name=stats_commit,json=statsCommit,proto3" json:"stats_commit,omitempty"`
	State       JobState             `protobuf:"varint,11,opt,name=state,proto3,enum=pps_1_9.JobState" json:"state,omitempty"`
	Reason      string               `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`
	Started     *timestamp.Timestamp `protobuf:"bytes,13,opt,name=started,proto3" json:"started,omitempty"`
	Finished    *timestamp.Timestamp `protobuf:"bytes,14,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *EtcdJobInfo) Reset() {
	*x = EtcdJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdJobInfo) ProtoMessage() {}

func (x *EtcdJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdJobInfo.ProtoReflect.Descriptor instead.
func (*EtcdJobInfo) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{23}
}

func (x *EtcdJobInfo) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *EtcdJobInfo) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *EtcdJobInfo) GetOutputCommit() *pfs.Commit {
	if x != nil {
		return x.OutputCommit
	}
	return nil
}

func (x *EtcdJobInfo) GetRestart() uint64 {
	if x != nil {
		return x.Restart
	}
	return 0
}

func (x *EtcdJobInfo) GetDataProcessed() int64 {
	if x != nil {
		return x.DataProcessed
	}
	return 0
}

func (x *EtcdJobInfo) GetDataSkipped() int64 {
	if x != nil {
		return x.DataSkipped
	}
	return 0
}

func (x *EtcdJobInfo) GetDataTotal() int64 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *EtcdJobInfo) GetDataFailed() int64 {
	if x != nil {
		return x.DataFailed
	}
	return 0
}

func (x *EtcdJobInfo) GetDataRecovered() int64 {
	if x != nil {
		return x.DataRecovered
	}
	return 0
}

func (x *EtcdJobInfo) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *EtcdJobInfo) GetStatsCommit() *pfs.Commit {
	if x != nil {
		return x.StatsCommit
	}
	return nil
}

func (x *EtcdJobInfo) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STARTING
}

func (x *EtcdJobInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EtcdJobInfo) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *EtcdJobInfo) GetFinished() *timestamp.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job              *Job                 `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Transform        *Transform           `protobuf:"bytes,2,opt,name=transform,proto3" json:"transform,omitempty"` // requires ListJobRequest.Full
	Pipeline         *Pipeline            `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	PipelineVersion  uint64               `protobuf:"varint,13,opt,name=pipeline_version,json=pipelineVersion,proto3" json:"pipeline_version,omitempty"` // requires ListJobRequest.Full
	SpecCommit       *pfs.Commit          `protobuf:"bytes,47,opt,name=spec_commit,json=specCommit,proto3" json:"spec_commit,omitempty"`
	ParallelismSpec  *ParallelismSpec     `protobuf:"bytes,12,opt,name=parallelism_spec,json=parallelismSpec,proto3" json:"parallelism_spec,omitempty"` // requires ListJobRequest.Full
	Egress           *Egress              `protobuf:"bytes,15,opt,name=egress,proto3" json:"egress,omitempty"`                                          // requires ListJobRequest.Full
	ParentJob        *Job                 `protobuf:"bytes,6,opt,name=parent_job,json=parentJob,proto3" json:"parent_job,omitempty"`
	Started          *timestamp.Timestamp `protobuf:"bytes,7,opt,name=started,proto3" json:"started,omitempty"`
	Finished         *timestamp.Timestamp `protobuf:"bytes,8,opt,name=finished,proto3" json:"finished,omitempty"`
	OutputCommit     *pfs.Commit          `protobuf:"bytes,9,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	State            JobState             `protobuf:"varint,10,opt,name=state,proto3,enum=pps_1_9.JobState" json:"state,omitempty"`
	Reason           string               `protobuf:"bytes,35,opt,name=reason,proto3" json:"reason,omitempty"`   // reason explains why the job is in the current state
	Service          *Service             `protobuf:"bytes,14,opt,name=service,proto3" json:"service,omitempty"` // requires ListJobRequest.Full
	Spout            *Spout               `protobuf:"bytes,45,opt,name=spout,proto3" json:"spout,omitempty"`     // requires ListJobRequest.Full
	OutputRepo       *pfs.Repo            `protobuf:"bytes,18,opt,name=output_repo,json=outputRepo,proto3" json:"output_repo,omitempty"`
	OutputBranch     string               `protobuf:"bytes,17,opt,name=output_branch,json=outputBranch,proto3" json:"output_branch,omitempty"` // requires ListJobRequest.Full
	Restart          uint64               `protobuf:"varint,20,opt,name=restart,proto3" json:"restart,omitempty"`
	DataProcessed    int64                `protobuf:"varint,22,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	DataSkipped      int64                `protobuf:"varint,30,opt,name=data_skipped,json=dataSkipped,proto3" json:"data_skipped,omitempty"`
	DataFailed       int64                `protobuf:"varint,40,opt,name=data_failed,json=dataFailed,proto3" json:"data_failed,omitempty"`
	DataRecovered    int64                `protobuf:"varint,46,opt,name=data_recovered,json=dataRecovered,proto3" json:"data_recovered,omitempty"`
	DataTotal        int64                `protobuf:"varint,23,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	Stats            *ProcessStats        `protobuf:"bytes,31,opt,name=stats,proto3" json:"stats,omitempty"`
	WorkerStatus     []*WorkerStatus      `protobuf:"bytes,24,rep,name=worker_status,json=workerStatus,proto3" json:"worker_status,omitempty"`
	ResourceRequests *ResourceSpec        `protobuf:"bytes,25,opt,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"` // requires ListJobRequest.Full
	ResourceLimits   *ResourceSpec        `protobuf:"bytes,36,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`       // requires ListJobRequest.Full
	Input            *Input               `protobuf:"bytes,26,opt,name=input,proto3" json:"input,omitempty"`                                               // requires ListJobRequest.Full
	NewBranch        *pfs.BranchInfo      `protobuf:"bytes,27,opt,name=new_branch,json=newBranch,proto3" json:"new_branch,omitempty"`
	StatsCommit      *pfs.Commit          `protobuf:"bytes,29,opt,name=stats_commit,json=statsCommit,proto3" json:"stats_commit,omitempty"`
	EnableStats      bool                 `protobuf:"varint,32,opt,name=enable_stats,json=enableStats,proto3" json:"enable_stats,omitempty"`         // requires ListJobRequest.Full
	Salt             string               `protobuf:"bytes,33,opt,name=salt,proto3" json:"salt,omitempty"`                                           // requires ListJobRequest.Full
	ChunkSpec        *ChunkSpec           `protobuf:"bytes,37,opt,name=chunk_spec,json=chunkSpec,proto3" json:"chunk_spec,omitempty"`                // requires ListJobRequest.Full
	DatumTimeout     *duration.Duration   `protobuf:"bytes,38,opt,name=datum_timeout,json=datumTimeout,proto3" json:"datum_timeout,omitempty"`       // requires ListJobRequest.Full
	JobTimeout       *duration.Duration   `protobuf:"bytes,39,opt,name=job_timeout,json=jobTimeout,proto3" json:"job_timeout,omitempty"`             // requires ListJobRequest.Full
	DatumTries       int64                `protobuf:"varint,41,opt,name=datum_tries,json=datumTries,proto3" json:"datum_tries,omitempty"`            // requires ListJobRequest.Full
	SchedulingSpec   *SchedulingSpec      `protobuf:"bytes,42,opt,name=scheduling_spec,json=schedulingSpec,proto3" json:"scheduling_spec,omitempty"` // requires ListJobRequest.Full
	PodSpec          string               `protobuf:"bytes,43,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`                      // requires ListJobRequest.Full
	PodPatch         string               `protobuf:"bytes,44,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"`                   // requires ListJobRequest.Full
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{24}
}

func (x *JobInfo) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobInfo) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *JobInfo) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *JobInfo) GetPipelineVersion() uint64 {
	if x != nil {
		return x.PipelineVersion
	}
	return 0
}

func (x *JobInfo) GetSpecCommit() *pfs.Commit {
	if x != nil {
		return x.SpecCommit
	}
	return nil
}

func (x *JobInfo) GetParallelismSpec() *ParallelismSpec {
	if x != nil {
		return x.ParallelismSpec
	}
	return nil
}

func (x *JobInfo) GetEgress() *Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *JobInfo) GetParentJob() *Job {
	if x != nil {
		return x.ParentJob
	}
	return nil
}

func (x *JobInfo) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *JobInfo) GetFinished() *timestamp.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *JobInfo) GetOutputCommit() *pfs.Commit {
	if x != nil {
		return x.OutputCommit
	}
	return nil
}

func (x *JobInfo) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STARTING
}

func (x *JobInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *JobInfo) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *JobInfo) GetSpout() *Spout {
	if x != nil {
		return x.Spout
	}
	return nil
}

func (x *JobInfo) GetOutputRepo() *pfs.Repo {
	if x != nil {
		return x.OutputRepo
	}
	return nil
}

func (x *JobInfo) GetOutputBranch() string {
	if x != nil {
		return x.OutputBranch
	}
	return ""
}

func (x *JobInfo) GetRestart() uint64 {
	if x != nil {
		return x.Restart
	}
	return 0
}

func (x *JobInfo) GetDataProcessed() int64 {
	if x != nil {
		return x.DataProcessed
	}
	return 0
}

func (x *JobInfo) GetDataSkipped() int64 {
	if x != nil {
		return x.DataSkipped
	}
	return 0
}

func (x *JobInfo) GetDataFailed() int64 {
	if x != nil {
		return x.DataFailed
	}
	return 0
}

func (x *JobInfo) GetDataRecovered() int64 {
	if x != nil {
		return x.DataRecovered
	}
	return 0
}

func (x *JobInfo) GetDataTotal() int64 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *JobInfo) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *JobInfo) GetWorkerStatus() []*WorkerStatus {
	if x != nil {
		return x.WorkerStatus
	}
	return nil
}

func (x *JobInfo) GetResourceRequests() *ResourceSpec {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *JobInfo) GetResourceLimits() *ResourceSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *JobInfo) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *JobInfo) GetNewBranch() *pfs.BranchInfo {
	if x != nil {
		return x.NewBranch
	}
	return nil
}

func (x *JobInfo) GetStatsCommit() *pfs.Commit {
	if x != nil {
		return x.StatsCommit
	}
	return nil
}

func (x *JobInfo) GetEnableStats() bool {
	if x != nil {
		return x.EnableStats
	}
	return false
}

func (x *JobInfo) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *JobInfo) GetChunkSpec() *ChunkSpec {
	if x != nil {
		return x.ChunkSpec
	}
	return nil
}

func (x *JobInfo) GetDatumTimeout() *duration.Duration {
	if x != nil {
		return x.DatumTimeout
	}
	return nil
}

func (x *JobInfo) GetJobTimeout() *duration.Duration {
	if x != nil {
		return x.JobTimeout
	}
	return nil
}

func (x *JobInfo) GetDatumTries() int64 {
	if x != nil {
		return x.DatumTries
	}
	return 0
}

func (x *JobInfo) GetSchedulingSpec() *SchedulingSpec {
	if x != nil {
		return x.SchedulingSpec
	}
	return nil
}

func (x *JobInfo) GetPodSpec() string {
	if x != nil {
		return x.PodSpec
	}
	return ""
}

func (x *JobInfo) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State WorkerState `protobuf:"varint,2,opt,name=state,proto3,enum=pps_1_9.WorkerState" json:"state,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{25}
}

func (x *Worker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Worker) GetState() WorkerState {
	if x != nil {
		return x.State
	}
	return WorkerState_POD_RUNNING
}

type JobInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo,proto3" json:"job_info,omitempty"`
}

func (x *JobInfos) Reset() {
	*x = JobInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfos) ProtoMessage() {}

func (x *JobInfos) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfos.ProtoReflect.Descriptor instead.
func (*JobInfos) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{26}
}

func (x *JobInfos) GetJobInfo() []*JobInfo {
	if x != nil {
		return x.JobInfo
	}
	return nil
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{27}
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// EtcdPipelineInfo is proto that Pachd stores in etcd for each pipeline. It
// tracks the state of the pipeline, and points to its metadata in PFS (and,
// by pointing to a PFS commit, de facto tracks the pipeline's version)
type EtcdPipelineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        PipelineState   `protobuf:"varint,1,opt,name=state,proto3,enum=pps_1_9.PipelineState" json:"state,omitempty"`
	Reason       string          `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	SpecCommit   *pfs.Commit     `protobuf:"bytes,2,opt,name=spec_commit,json=specCommit,proto3" json:"spec_commit,omitempty"`
	JobCounts    map[int32]int32 `protobuf:"bytes,3,rep,name=job_counts,json=jobCounts,proto3" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AuthToken    string          `protobuf:"bytes,5,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	LastJobState JobState        `protobuf:"varint,6,opt,name=last_job_state,json=lastJobState,proto3,enum=pps_1_9.JobState" json:"last_job_state,omitempty"`
	Parallelism  uint64          `protobuf:"varint,7,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
}

func (x *EtcdPipelineInfo) Reset() {
	*x = EtcdPipelineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdPipelineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdPipelineInfo) ProtoMessage() {}

func (x *EtcdPipelineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdPipelineInfo.ProtoReflect.Descriptor instead.
func (*EtcdPipelineInfo) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{28}
}

func (x *EtcdPipelineInfo) GetState() PipelineState {
	if x != nil {
		return x.State
	}
	return PipelineState_PIPELINE_STARTING
}

func (x *EtcdPipelineInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EtcdPipelineInfo) GetSpecCommit() *pfs.Commit {
	if x != nil {
		return x.SpecCommit
	}
	return nil
}

func (x *EtcdPipelineInfo) GetJobCounts() map[int32]int32 {
	if x != nil {
		return x.JobCounts
	}
	return nil
}

func (x *EtcdPipelineInfo) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *EtcdPipelineInfo) GetLastJobState() JobState {
	if x != nil {
		return x.LastJobState
	}
	return JobState_JOB_STARTING
}

func (x *EtcdPipelineInfo) GetParallelism() uint64 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

type PipelineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,17,opt,name=id,proto3" json:"id,omitempty"`
	Pipeline  *Pipeline  `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Version   uint64     `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	Transform *Transform `protobuf:"bytes,2,opt,name=transform,proto3" json:"transform,omitempty"`
	// tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs
	// when running in a kubernetes cluster on which kubeflow has been installed.
	// Exactly one of 'tf_job' and 'transform' should be set
	TfJob           *TFJob               `protobuf:"bytes,46,opt,name=tf_job,json=tfJob,proto3" json:"tf_job,omitempty"`
	ParallelismSpec *ParallelismSpec     `protobuf:"bytes,10,opt,name=parallelism_spec,json=parallelismSpec,proto3" json:"parallelism_spec,omitempty"`
	HashtreeSpec    *HashtreeSpec        `protobuf:"bytes,42,opt,name=hashtree_spec,json=hashtreeSpec,proto3" json:"hashtree_spec,omitempty"`
	Egress          *Egress              `protobuf:"bytes,15,opt,name=egress,proto3" json:"egress,omitempty"`
	CreatedAt       *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// state indicates the current state of the pipeline. This is not stored in
	// PFS along with the rest of this data structure--PPS.InspectPipeline fills
	// it in
	State PipelineState `protobuf:"varint,7,opt,name=state,proto3,enum=pps_1_9.PipelineState" json:"state,omitempty"`
	// same for stopped field
	Stopped     bool   `protobuf:"varint,38,opt,name=stopped,proto3" json:"stopped,omitempty"`
	RecentError string `protobuf:"bytes,8,opt,name=recent_error,json=recentError,proto3" json:"recent_error,omitempty"`
	// job_counts and last_job_state indicates the number of jobs within this
	// pipeline in a given state and the state of the most recently created job,
	// respectively. This is not stored in PFS along with the rest of this data
	// structure--PPS.InspectPipeline fills it in from the EtcdPipelineInfo.
	JobCounts        map[int32]int32 `protobuf:"bytes,9,rep,name=job_counts,json=jobCounts,proto3" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LastJobState     JobState        `protobuf:"varint,43,opt,name=last_job_state,json=lastJobState,proto3,enum=pps_1_9.JobState" json:"last_job_state,omitempty"`
	OutputBranch     string          `protobuf:"bytes,16,opt,name=output_branch,json=outputBranch,proto3" json:"output_branch,omitempty"`
	ResourceRequests *ResourceSpec   `protobuf:"bytes,19,opt,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"`
	ResourceLimits   *ResourceSpec   `protobuf:"bytes,31,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	Input            *Input          `protobuf:"bytes,20,opt,name=input,proto3" json:"input,omitempty"`
	Description      string          `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	CacheSize        string          `protobuf:"bytes,23,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	EnableStats      bool            `protobuf:"varint,24,opt,name=enable_stats,json=enableStats,proto3" json:"enable_stats,omitempty"`
	Salt             string          `protobuf:"bytes,25,opt,name=salt,proto3" json:"salt,omitempty"`
	// reason includes any error messages associated with a failed pipeline
	Reason         string             `protobuf:"bytes,28,opt,name=reason,proto3" json:"reason,omitempty"`
	MaxQueueSize   int64              `protobuf:"varint,29,opt,name=max_queue_size,json=maxQueueSize,proto3" json:"max_queue_size,omitempty"`
	Service        *Service           `protobuf:"bytes,30,opt,name=service,proto3" json:"service,omitempty"`
	Spout          *Spout             `protobuf:"bytes,45,opt,name=spout,proto3" json:"spout,omitempty"`
	ChunkSpec      *ChunkSpec         `protobuf:"bytes,32,opt,name=chunk_spec,json=chunkSpec,proto3" json:"chunk_spec,omitempty"`
	DatumTimeout   *duration.Duration `protobuf:"bytes,33,opt,name=datum_timeout,json=datumTimeout,proto3" json:"datum_timeout,omitempty"`
	JobTimeout     *duration.Duration `protobuf:"bytes,34,opt,name=job_timeout,json=jobTimeout,proto3" json:"job_timeout,omitempty"`
	GithookUrl     string             `protobuf:"bytes,35,opt,name=githook_url,json=githookUrl,proto3" json:"githook_url,omitempty"`
	SpecCommit     *pfs.Commit        `protobuf:"bytes,36,opt,name=spec_commit,json=specCommit,proto3" json:"spec_commit,omitempty"`
	Standby        bool               `protobuf:"varint,37,opt,name=standby,proto3" json:"standby,omitempty"`
	DatumTries     int64              `protobuf:"varint,39,opt,name=datum_tries,json=datumTries,proto3" json:"datum_tries,omitempty"`
	SchedulingSpec *SchedulingSpec    `protobuf:"bytes,40,opt,name=scheduling_spec,json=schedulingSpec,proto3" json:"scheduling_spec,omitempty"`
	PodSpec        string             `protobuf:"bytes,41,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`
	PodPatch       string             `protobuf:"bytes,44,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"`
}

func (x *PipelineInfo) Reset() {
	*x = PipelineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInfo) ProtoMessage() {}

func (x *PipelineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInfo.ProtoReflect.Descriptor instead.
func (*PipelineInfo) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{29}
}

func (x *PipelineInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineInfo) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *PipelineInfo) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PipelineInfo) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *PipelineInfo) GetTfJob() *TFJob {
	if x != nil {
		return x.TfJob
	}
	return nil
}

func (x *PipelineInfo) GetParallelismSpec() *ParallelismSpec {
	if x != nil {
		return x.ParallelismSpec
	}
	return nil
}

func (x *PipelineInfo) GetHashtreeSpec() *HashtreeSpec {
	if x != nil {
		return x.HashtreeSpec
	}
	return nil
}

func (x *PipelineInfo) GetEgress() *Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *PipelineInfo) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PipelineInfo) GetState() PipelineState {
	if x != nil {
		return x.State
	}
	return PipelineState_PIPELINE_STARTING
}

func (x *PipelineInfo) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *PipelineInfo) GetRecentError() string {
	if x != nil {
		return x.RecentError
	}
	return ""
}

func (x *PipelineInfo) GetJobCounts() map[int32]int32 {
	if x != nil {
		return x.JobCounts
	}
	return nil
}

func (x *PipelineInfo) GetLastJobState() JobState {
	if x != nil {
		return x.LastJobState
	}
	return JobState_JOB_STARTING
}

func (x *PipelineInfo) GetOutputBranch() string {
	if x != nil {
		return x.OutputBranch
	}
	return ""
}

func (x *PipelineInfo) GetResourceRequests() *ResourceSpec {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *PipelineInfo) GetResourceLimits() *ResourceSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *PipelineInfo) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *PipelineInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineInfo) GetCacheSize() string {
	if x != nil {
		return x.CacheSize
	}
	return ""
}

func (x *PipelineInfo) GetEnableStats() bool {
	if x != nil {
		return x.EnableStats
	}
	return false
}

func (x *PipelineInfo) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *PipelineInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PipelineInfo) GetMaxQueueSize() int64 {
	if x != nil {
		return x.MaxQueueSize
	}
	return 0
}

func (x *PipelineInfo) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *PipelineInfo) GetSpout() *Spout {
	if x != nil {
		return x.Spout
	}
	return nil
}

func (x *PipelineInfo) GetChunkSpec() *ChunkSpec {
	if x != nil {
		return x.ChunkSpec
	}
	return nil
}

func (x *PipelineInfo) GetDatumTimeout() *duration.Duration {
	if x != nil {
		return x.DatumTimeout
	}
	return nil
}

func (x *PipelineInfo) GetJobTimeout() *duration.Duration {
	if x != nil {
		return x.JobTimeout
	}
	return nil
}

func (x *PipelineInfo) GetGithookUrl() string {
	if x != nil {
		return x.GithookUrl
	}
	return ""
}

func (x *PipelineInfo) GetSpecCommit() *pfs.Commit {
	if x != nil {
		return x.SpecCommit
	}
	return nil
}

func (x *PipelineInfo) GetStandby() bool {
	if x != nil {
		return x.Standby
	}
	return false
}

func (x *PipelineInfo) GetDatumTries() int64 {
	if x != nil {
		return x.DatumTries
	}
	return 0
}

func (x *PipelineInfo) GetSchedulingSpec() *SchedulingSpec {
	if x != nil {
		return x.SchedulingSpec
	}
	return nil
}

func (x *PipelineInfo) GetPodSpec() string {
	if x != nil {
		return x.PodSpec
	}
	return ""
}

func (x *PipelineInfo) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

type PipelineInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo,proto3" json:"pipeline_info,omitempty"`
}

func (x *PipelineInfos) Reset() {
	*x = PipelineInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInfos) ProtoMessage() {}

func (x *PipelineInfos) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInfos.ProtoReflect.Descriptor instead.
func (*PipelineInfos) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{30}
}

func (x *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if x != nil {
		return x.PipelineInfo
	}
	return nil
}

type CreateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline     *Pipeline   `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,25,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	// Fields below should only be set when restoring an extracted job.
	Restart uint64 `protobuf:"varint,26,opt,name=restart,proto3" json:"restart,omitempty"`
	// Counts of how many times we processed or skipped a datum
	DataProcessed int64 `protobuf:"varint,27,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	DataSkipped   int64 `protobuf:"varint,28,opt,name=data_skipped,json=dataSkipped,proto3" json:"data_skipped,omitempty"`
	DataTotal     int64 `protobuf:"varint,29,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	DataFailed    int64 `protobuf:"varint,30,opt,name=data_failed,json=dataFailed,proto3" json:"data_failed,omitempty"`
	DataRecovered int64 `protobuf:"varint,31,opt,name=data_recovered,json=dataRecovered,proto3" json:"data_recovered,omitempty"`
	// Download/process/upload time and download/upload bytes
	Stats       *ProcessStats        `protobuf:"bytes,32,opt,name=stats,proto3" json:"stats,omitempty"`
	StatsCommit *pfs.Commit          `protobuf:"bytes,33,opt,name=stats_commit,json=statsCommit,proto3" json:"stats_commit,omitempty"`
	State       JobState             `protobuf:"varint,34,opt,name=state,proto3,enum=pps_1_9.JobState" json:"state,omitempty"`
	Reason      string               `protobuf:"bytes,35,opt,name=reason,proto3" json:"reason,omitempty"`
	Started     *timestamp.Timestamp `protobuf:"bytes,36,opt,name=started,proto3" json:"started,omitempty"`
	Finished    *timestamp.Timestamp `protobuf:"bytes,37,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *CreateJobRequest) Reset() {
	*x = CreateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRequest) ProtoMessage() {}

func (x *CreateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRequest.ProtoReflect.Descriptor instead.
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{31}
}

func (x *CreateJobRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CreateJobRequest) GetOutputCommit() *pfs.Commit {
	if x != nil {
		return x.OutputCommit
	}
	return nil
}

func (x *CreateJobRequest) GetRestart() uint64 {
	if x != nil {
		return x.Restart
	}
	return 0
}

func (x *CreateJobRequest) GetDataProcessed() int64 {
	if x != nil {
		return x.DataProcessed
	}
	return 0
}

func (x *CreateJobRequest) GetDataSkipped() int64 {
	if x != nil {
		return x.DataSkipped
	}
	return 0
}

func (x *CreateJobRequest) GetDataTotal() int64 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *CreateJobRequest) GetDataFailed() int64 {
	if x != nil {
		return x.DataFailed
	}
	return 0
}

func (x *CreateJobRequest) GetDataRecovered() int64 {
	if x != nil {
		return x.DataRecovered
	}
	return 0
}

func (x *CreateJobRequest) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CreateJobRequest) GetStatsCommit() *pfs.Commit {
	if x != nil {
		return x.StatsCommit
	}
	return nil
}

func (x *CreateJobRequest) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STARTING
}

func (x *CreateJobRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateJobRequest) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *CreateJobRequest) GetFinished() *timestamp.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

type InspectJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Callers should set either Job or OutputCommit, not both.
	Job          *Job        `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,3,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	BlockState   bool        `protobuf:"varint,2,opt,name=block_state,json=blockState,proto3" json:"block_state,omitempty"` // block until state is either JOB_STATE_FAILURE or JOB_STATE_SUCCESS
}

func (x *InspectJobRequest) Reset() {
	*x = InspectJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectJobRequest) ProtoMessage() {}

func (x *InspectJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectJobRequest.ProtoReflect.Descriptor instead.
func (*InspectJobRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{32}
}

func (x *InspectJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *InspectJobRequest) GetOutputCommit() *pfs.Commit {
	if x != nil {
		return x.OutputCommit
	}
	return nil
}

func (x *InspectJobRequest) GetBlockState() bool {
	if x != nil {
		return x.BlockState
	}
	return false
}

type ListJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline     *Pipeline     `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`                             // nil means all pipelines
	InputCommit  []*pfs.Commit `protobuf:"bytes,2,rep,name=input_commit,json=inputCommit,proto3" json:"input_commit,omitempty"`    // nil means all inputs
	OutputCommit *pfs.Commit   `protobuf:"bytes,3,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"` // nil means all outputs
	// History indicates return jobs from historical versions of pipelines
	// semantics are:
	// 0: Return jobs from the current version of the pipeline or pipelines.
	// 1: Return the above and jobs from the next most recent version
	// 2: etc.
	//-1: Return jobs from all historical versions.
	History int64 `protobuf:"varint,4,opt,name=history,proto3" json:"history,omitempty"`
	// Full indicates whether the result should include all pipeline details in
	// each JobInfo, or limited information including name and status, but
	// excluding information in the pipeline spec. Leaving this "false" can make
	// the call significantly faster in clusters with a large number of pipelines
	// and jobs.
	// Note that if 'input_commit' is set, this field is coerced to "true"
	Full bool `protobuf:"varint,5,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *ListJobRequest) Reset() {
	*x = ListJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobRequest) ProtoMessage() {}

func (x *ListJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobRequest.ProtoReflect.Descriptor instead.
func (*ListJobRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{33}
}

func (x *ListJobRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *ListJobRequest) GetInputCommit() []*pfs.Commit {
	if x != nil {
		return x.InputCommit
	}
	return nil
}

func (x *ListJobRequest) GetOutputCommit() *pfs.Commit {
	if x != nil {
		return x.OutputCommit
	}
	return nil
}

func (x *ListJobRequest) GetHistory() int64 {
	if x != nil {
		return x.History
	}
	return 0
}

func (x *ListJobRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type FlushJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits     []*pfs.Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	ToPipelines []*Pipeline   `protobuf:"bytes,2,rep,name=to_pipelines,json=toPipelines,proto3" json:"to_pipelines,omitempty"`
}

func (x *FlushJobRequest) Reset() {
	*x = FlushJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushJobRequest) ProtoMessage() {}

func (x *FlushJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushJobRequest.ProtoReflect.Descriptor instead.
func (*FlushJobRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{34}
}

func (x *FlushJobRequest) GetCommits() []*pfs.Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *FlushJobRequest) GetToPipelines() []*Pipeline {
	if x != nil {
		return x.ToPipelines
	}
	return nil
}

type DeleteJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *DeleteJobRequest) Reset() {
	*x = DeleteJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRequest) ProtoMessage() {}

func (x *DeleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type StopJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *StopJobRequest) Reset() {
	*x = StopJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRequest) ProtoMessage() {}

func (x *StopJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRequest.ProtoReflect.Descriptor instead.
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{36}
}

func (x *StopJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateJobStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job    *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	State  JobState `protobuf:"varint,2,opt,name=state,proto3,enum=pps_1_9.JobState" json:"state,omitempty"`
	Reason string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UpdateJobStateRequest) Reset() {
	*x = UpdateJobStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobStateRequest) ProtoMessage() {}

func (x *UpdateJobStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobStateRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateJobStateRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *UpdateJobStateRequest) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STARTING
}

func (x *UpdateJobStateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline from which we want to get logs (required if the job in 'job'
	// was created as part of a pipeline. To get logs from a non-orphan job
	// without the pipeline that created it, you need to use ElasticSearch).
	Pipeline *Pipeline `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The job from which we want to get logs.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// Names of input files from which we want processing logs. This may contain
	// multiple files, to query pipelines that contain multiple inputs. Each
	// filter may be an absolute path of a file within a pps repo, or it may be
	// a hash for that file (to search for files at specific versions)
	DataFilters []string `protobuf:"bytes,3,rep,name=data_filters,json=dataFilters,proto3" json:"data_filters,omitempty"`
	Datum       *Datum   `protobuf:"bytes,6,opt,name=datum,proto3" json:"datum,omitempty"`
	// If true get logs from the master process
	Master bool `protobuf:"varint,5,opt,name=master,proto3" json:"master,omitempty"`
	// Continue to follow new logs as they become available.
	Follow bool `protobuf:"varint,7,opt,name=follow,proto3" json:"follow,omitempty"`
	// If nonzero, the number of lines from the end of the logs to return.  Note:
	// tail applies per container, so you will get tail * <number of pods> total
	// lines back.
	Tail int64 `protobuf:"varint,8,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{38}
}

func (x *GetLogsRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *GetLogsRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GetLogsRequest) GetDataFilters() []string {
	if x != nil {
		return x.DataFilters
	}
	return nil
}

func (x *GetLogsRequest) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *GetLogsRequest) GetMaster() bool {
	if x != nil {
		return x.Master
	}
	return false
}

func (x *GetLogsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *GetLogsRequest) GetTail() int64 {
	if x != nil {
		return x.Tail
	}
	return 0
}

// LogMessage is a log line from a PPS worker, annotated with metadata
// indicating when and why the line was logged.
type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job and pipeline for which a PFS file is being processed (if the job
	// is an orphan job, pipeline name and ID will be unset)
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	JobId        string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerId     string `protobuf:"bytes,7,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	DatumId      string `protobuf:"bytes,9,opt,name=datum_id,json=datumId,proto3" json:"datum_id,omitempty"`
	Master       bool   `protobuf:"varint,10,opt,name=master,proto3" json:"master,omitempty"`
	// The PFS files being processed (one per pipeline/job input)
	Data []*InputFile `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	// User is true if log message comes from the users code.
	User bool `protobuf:"varint,8,opt,name=user,proto3" json:"user,omitempty"`
	// The message logged, and the time at which it was logged
	Ts      *timestamp.Timestamp `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
	Message string               `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{39}
}

func (x *LogMessage) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *LogMessage) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *LogMessage) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *LogMessage) GetDatumId() string {
	if x != nil {
		return x.DatumId
	}
	return ""
}

func (x *LogMessage) GetMaster() bool {
	if x != nil {
		return x.Master
	}
	return false
}

func (x *LogMessage) GetData() []*InputFile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogMessage) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

func (x *LogMessage) GetTs() *timestamp.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RestartDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job         *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	DataFilters []string `protobuf:"bytes,2,rep,name=data_filters,json=dataFilters,proto3" json:"data_filters,omitempty"`
}

func (x *RestartDatumRequest) Reset() {
	*x = RestartDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDatumRequest) ProtoMessage() {}

func (x *RestartDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDatumRequest.ProtoReflect.Descriptor instead.
func (*RestartDatumRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{40}
}

func (x *RestartDatumRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *RestartDatumRequest) GetDataFilters() []string {
	if x != nil {
		return x.DataFilters
	}
	return nil
}

type InspectDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum *Datum `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *InspectDatumRequest) Reset() {
	*x = InspectDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectDatumRequest) ProtoMessage() {}

func (x *InspectDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectDatumRequest.ProtoReflect.Descriptor instead.
func (*InspectDatumRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{41}
}

func (x *InspectDatumRequest) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

type ListDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job      *Job  `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page     int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListDatumRequest) Reset() {
	*x = ListDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatumRequest) ProtoMessage() {}

func (x *ListDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatumRequest.ProtoReflect.Descriptor instead.
func (*ListDatumRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{42}
}

func (x *ListDatumRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *ListDatumRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDatumRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListDatumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatumInfos []*DatumInfo `protobuf:"bytes,1,rep,name=datum_infos,json=datumInfos,proto3" json:"datum_infos,omitempty"`
	TotalPages int64        `protobuf:"varint,2,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Page       int64        `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListDatumResponse) Reset() {
	*x = ListDatumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatumResponse) ProtoMessage() {}

func (x *ListDatumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatumResponse.ProtoReflect.Descriptor instead.
func (*ListDatumResponse) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{43}
}

func (x *ListDatumResponse) GetDatumInfos() []*DatumInfo {
	if x != nil {
		return x.DatumInfos
	}
	return nil
}

func (x *ListDatumResponse) GetTotalPages() int64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ListDatumResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

// ListDatumStreamResponse is identical to ListDatumResponse, except that only
// one DatumInfo is present (as these responses are streamed)
type ListDatumStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatumInfo *DatumInfo `protobuf:"bytes,1,opt,name=datum_info,json=datumInfo,proto3" json:"datum_info,omitempty"`
	// total_pages is only set in the first response (and set to 0 in all other
	// responses)
	TotalPages int64 `protobuf:"varint,2,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// page is only set in the first response (and set to 0 in all other
	// responses)
	Page int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListDatumStreamResponse) Reset() {
	*x = ListDatumStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatumStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatumStreamResponse) ProtoMessage() {}

func (x *ListDatumStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatumStreamResponse.ProtoReflect.Descriptor instead.
func (*ListDatumStreamResponse) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{44}
}

func (x *ListDatumStreamResponse) GetDatumInfo() *DatumInfo {
	if x != nil {
		return x.DatumInfo
	}
	return nil
}

func (x *ListDatumStreamResponse) GetTotalPages() int64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ListDatumStreamResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

// ChunkSpec specifies how a pipeline should chunk its datums.
type ChunkSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number, if nonzero, specifies that each chunk should contain `number`
	// datums. Chunks may contain fewer if the total number of datums don't
	// divide evenly.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// size_bytes, if nonzero, specifies a target size for each chunk of datums.
	// Chunks may be larger or smaller than size_bytes, but will usually be
	// pretty close to size_bytes in size.
	SizeBytes int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (x *ChunkSpec) Reset() {
	*x = ChunkSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkSpec) ProtoMessage() {}

func (x *ChunkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkSpec.ProtoReflect.Descriptor instead.
func (*ChunkSpec) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{45}
}

func (x *ChunkSpec) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ChunkSpec) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

type SchedulingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeSelector      map[string]string `protobuf:"bytes,1,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PriorityClassName string            `protobuf:"bytes,2,opt,name=priority_class_name,json=priorityClassName,proto3" json:"priority_class_name,omitempty"`
}

func (x *SchedulingSpec) Reset() {
	*x = SchedulingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingSpec) ProtoMessage() {}

func (x *SchedulingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingSpec.ProtoReflect.Descriptor instead.
func (*SchedulingSpec) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{46}
}

func (x *SchedulingSpec) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *SchedulingSpec) GetPriorityClassName() string {
	if x != nil {
		return x.PriorityClassName
	}
	return ""
}

type CreatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs
	// when running in a kubernetes cluster on which kubeflow has been installed.
	// Exactly one of 'tf_job' and 'transform' should be set
	TfJob            *TFJob           `protobuf:"bytes,35,opt,name=tf_job,json=tfJob,proto3" json:"tf_job,omitempty"`
	Transform        *Transform       `protobuf:"bytes,2,opt,name=transform,proto3" json:"transform,omitempty"`
	ParallelismSpec  *ParallelismSpec `protobuf:"bytes,7,opt,name=parallelism_spec,json=parallelismSpec,proto3" json:"parallelism_spec,omitempty"`
	HashtreeSpec     *HashtreeSpec    `protobuf:"bytes,31,opt,name=hashtree_spec,json=hashtreeSpec,proto3" json:"hashtree_spec,omitempty"`
	Egress           *Egress          `protobuf:"bytes,9,opt,name=egress,proto3" json:"egress,omitempty"`
	Update           bool             `protobuf:"varint,5,opt,name=update,proto3" json:"update,omitempty"`
	OutputBranch     string           `protobuf:"bytes,10,opt,name=output_branch,json=outputBranch,proto3" json:"output_branch,omitempty"`
	ResourceRequests *ResourceSpec    `protobuf:"bytes,12,opt,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"`
	ResourceLimits   *ResourceSpec    `protobuf:"bytes,22,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	Input            *Input           `protobuf:"bytes,13,opt,name=input,proto3" json:"input,omitempty"`
	Description      string           `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	CacheSize        string           `protobuf:"bytes,16,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	EnableStats      bool             `protobuf:"varint,17,opt,name=enable_stats,json=enableStats,proto3" json:"enable_stats,omitempty"`
	// Reprocess forces the pipeline to reprocess all datums.
	// It only has meaning if Update is true
	Reprocess      bool               `protobuf:"varint,18,opt,name=reprocess,proto3" json:"reprocess,omitempty"`
	MaxQueueSize   int64              `protobuf:"varint,20,opt,name=max_queue_size,json=maxQueueSize,proto3" json:"max_queue_size,omitempty"`
	Service        *Service           `protobuf:"bytes,21,opt,name=service,proto3" json:"service,omitempty"`
	Spout          *Spout             `protobuf:"bytes,33,opt,name=spout,proto3" json:"spout,omitempty"`
	ChunkSpec      *ChunkSpec         `protobuf:"bytes,23,opt,name=chunk_spec,json=chunkSpec,proto3" json:"chunk_spec,omitempty"`
	DatumTimeout   *duration.Duration `protobuf:"bytes,24,opt,name=datum_timeout,json=datumTimeout,proto3" json:"datum_timeout,omitempty"`
	JobTimeout     *duration.Duration `protobuf:"bytes,25,opt,name=job_timeout,json=jobTimeout,proto3" json:"job_timeout,omitempty"`
	Salt           string             `protobuf:"bytes,26,opt,name=salt,proto3" json:"salt,omitempty"`
	Standby        bool               `protobuf:"varint,27,opt,name=standby,proto3" json:"standby,omitempty"`
	DatumTries     int64              `protobuf:"varint,28,opt,name=datum_tries,json=datumTries,proto3" json:"datum_tries,omitempty"`
	SchedulingSpec *SchedulingSpec    `protobuf:"bytes,29,opt,name=scheduling_spec,json=schedulingSpec,proto3" json:"scheduling_spec,omitempty"`
	PodSpec        string             `protobuf:"bytes,30,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`    // deprecated, use pod_patch below
	PodPatch       string             `protobuf:"bytes,32,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"` // a json patch will be applied to the pipeline's pod_spec before it's created;
	SpecCommit     *pfs.Commit        `protobuf:"bytes,34,opt,name=spec_commit,json=specCommit,proto3" json:"spec_commit,omitempty"`
}

func (x *CreatePipelineRequest) Reset() {
	*x = CreatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineRequest) ProtoMessage() {}

func (x *CreatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{47}
}

func (x *CreatePipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CreatePipelineRequest) GetTfJob() *TFJob {
	if x != nil {
		return x.TfJob
	}
	return nil
}

func (x *CreatePipelineRequest) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *CreatePipelineRequest) GetParallelismSpec() *ParallelismSpec {
	if x != nil {
		return x.ParallelismSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetHashtreeSpec() *HashtreeSpec {
	if x != nil {
		return x.HashtreeSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetEgress() *Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *CreatePipelineRequest) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *CreatePipelineRequest) GetOutputBranch() string {
	if x != nil {
		return x.OutputBranch
	}
	return ""
}

func (x *CreatePipelineRequest) GetResourceRequests() *ResourceSpec {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *CreatePipelineRequest) GetResourceLimits() *ResourceSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *CreatePipelineRequest) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreatePipelineRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePipelineRequest) GetCacheSize() string {
	if x != nil {
		return x.CacheSize
	}
	return ""
}

func (x *CreatePipelineRequest) GetEnableStats() bool {
	if x != nil {
		return x.EnableStats
	}
	return false
}

func (x *CreatePipelineRequest) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

func (x *CreatePipelineRequest) GetMaxQueueSize() int64 {
	if x != nil {
		return x.MaxQueueSize
	}
	return 0
}

func (x *CreatePipelineRequest) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *CreatePipelineRequest) GetSpout() *Spout {
	if x != nil {
		return x.Spout
	}
	return nil
}

func (x *CreatePipelineRequest) GetChunkSpec() *ChunkSpec {
	if x != nil {
		return x.ChunkSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetDatumTimeout() *duration.Duration {
	if x != nil {
		return x.DatumTimeout
	}
	return nil
}

func (x *CreatePipelineRequest) GetJobTimeout() *duration.Duration {
	if x != nil {
		return x.JobTimeout
	}
	return nil
}

func (x *CreatePipelineRequest) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *CreatePipelineRequest) GetStandby() bool {
	if x != nil {
		return x.Standby
	}
	return false
}

func (x *CreatePipelineRequest) GetDatumTries() int64 {
	if x != nil {
		return x.DatumTries
	}
	return 0
}

func (x *CreatePipelineRequest) GetSchedulingSpec() *SchedulingSpec {
	if x != nil {
		return x.SchedulingSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetPodSpec() string {
	if x != nil {
		return x.PodSpec
	}
	return ""
}

func (x *CreatePipelineRequest) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

func (x *CreatePipelineRequest) GetSpecCommit() *pfs.Commit {
	if x != nil {
		return x.SpecCommit
	}
	return nil
}

type InspectPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *InspectPipelineRequest) Reset() {
	*x = InspectPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPipelineRequest) ProtoMessage() {}

func (x *InspectPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPipelineRequest.ProtoReflect.Descriptor instead.
func (*InspectPipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{48}
}

func (x *InspectPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type ListPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-nil, only return info about a single pipeline, this is redundant
	// with InspectPipeline unless history is non-zero.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// History indicates how many historical versions you want returned. Its
	// semantics are:
	// 0: Return the current version of the pipeline or pipelines.
	// 1: Return the above and the next most recent version
	// 2: etc.
	//-1: Return all historical versions.
	History int64 `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
}

func (x *ListPipelineRequest) Reset() {
	*x = ListPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineRequest) ProtoMessage() {}

func (x *ListPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{49}
}

func (x *ListPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *ListPipelineRequest) GetHistory() int64 {
	if x != nil {
		return x.History
	}
	return 0
}

type DeletePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	All      bool      `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	Force    bool      `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeletePipelineRequest) Reset() {
	*x = DeletePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePipelineRequest) ProtoMessage() {}

func (x *DeletePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePipelineRequest.ProtoReflect.Descriptor instead.
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{50}
}

func (x *DeletePipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *DeletePipelineRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DeletePipelineRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type StartPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *StartPipelineRequest) Reset() {
	*x = StartPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPipelineRequest) ProtoMessage() {}

func (x *StartPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPipelineRequest.ProtoReflect.Descriptor instead.
func (*StartPipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{51}
}

func (x *StartPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type StopPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *StopPipelineRequest) Reset() {
	*x = StopPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPipelineRequest) ProtoMessage() {}

func (x *StopPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPipelineRequest.ProtoReflect.Descriptor instead.
func (*StopPipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{52}
}

func (x *StopPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type RunPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline   *Pipeline               `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Provenance []*pfs.CommitProvenance `protobuf:"bytes,2,rep,name=provenance,proto3" json:"provenance,omitempty"`
	JobId      string                  `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *RunPipelineRequest) Reset() {
	*x = RunPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineRequest) ProtoMessage() {}

func (x *RunPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineRequest.ProtoReflect.Descriptor instead.
func (*RunPipelineRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{53}
}

func (x *RunPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *RunPipelineRequest) GetProvenance() []*pfs.CommitProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *RunPipelineRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type RunCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *RunCronRequest) Reset() {
	*x = RunCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronRequest) ProtoMessage() {}

func (x *RunCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronRequest.ProtoReflect.Descriptor instead.
func (*RunCronRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{54}
}

func (x *RunCronRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type GarbageCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory is how much memory to use in computing which objects are alive. A
	// larger number will result in more precise garbage collection (at the
	// cost of more memory usage).
	MemoryBytes int64 `protobuf:"varint,1,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
}

func (x *GarbageCollectRequest) Reset() {
	*x = GarbageCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GarbageCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarbageCollectRequest) ProtoMessage() {}

func (x *GarbageCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarbageCollectRequest.ProtoReflect.Descriptor instead.
func (*GarbageCollectRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{55}
}

func (x *GarbageCollectRequest) GetMemoryBytes() int64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

type GarbageCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GarbageCollectResponse) Reset() {
	*x = GarbageCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GarbageCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarbageCollectResponse) ProtoMessage() {}

func (x *GarbageCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarbageCollectResponse.ProtoReflect.Descriptor instead.
func (*GarbageCollectResponse) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{56}
}

type ActivateAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAuthRequest) Reset() {
	*x = ActivateAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAuthRequest) ProtoMessage() {}

func (x *ActivateAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAuthRequest.ProtoReflect.Descriptor instead.
func (*ActivateAuthRequest) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{57}
}

type ActivateAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAuthResponse) Reset() {
	*x = ActivateAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAuthResponse) ProtoMessage() {}

func (x *ActivateAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_9_pps_pps_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAuthResponse.ProtoReflect.Descriptor instead.
func (*ActivateAuthResponse) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_9_pps_pps_proto_rawDescGZIP(), []int{58}
}

var File_client_admin_v1_9_pps_pps_proto protoreflect.FileDescriptor

var file_client_admin_v1_9_pps_pps_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x5f, 0x39, 0x2f, 0x70, 0x70, 0x73, 0x2f, 0x70, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x5f,
	0x39, 0x2f, 0x70, 0x66, 0x73, 0x2f, 0x70, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x66, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x22, 0xd8, 0x03, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x64, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x69,
	0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x53, 0x74, 0x64, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x29, 0x0a, 0x05, 0x54, 0x46, 0x4a, 0x6f, 0x62, 0x12, 0x20, 0x0a, 0x06, 0x74,
	0x66, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xde, 0x1f,
	0x05, 0x54, 0x46, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x74, 0x66, 0x4a, 0x6f, 0x62, 0x22, 0x1a, 0x0a,
	0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x1d, 0x0a, 0x03, 0x4a, 0x6f, 0x62,
	0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde,
	0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02,
	0x49, 0x50, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x69, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x50,
	0x46, 0x53, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x6c, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x7a, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x7a, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x22, 0x69, 0x0a, 0x08, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xde, 0x1f, 0x03, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xe9,
	0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x66, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x50, 0x46, 0x53, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x03, 0x70, 0x66, 0x73, 0x12, 0x22, 0x0a,
	0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x47, 0x69, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x08, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x22, 0x55, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x2a, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x33,
	0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x3f, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x22, 0xdc, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x09, 0x70, 0x66, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x08, 0x70, 0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x66, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x66, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66,
	0x69, 0x66, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x66, 0x74, 0x68, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x46, 0x69, 0x66, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x15,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a,
	0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xde, 0x1f, 0x05, 0x4a, 0x6f,
	0x62, 0x49, 0x44, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67,
	0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x35, 0x0a, 0x07,
	0x47, 0x50, 0x55, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xed, 0x04, 0x0a, 0x0b, 0x45, 0x74, 0x63, 0x64, 0x4a, 0x6f, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x22, 0xed, 0x0d, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12,
	0x30, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x70, 0x6f,
	0x75, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x53, 0x70, 0x6f, 0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x4a, 0x04, 0x08,
	0x22, 0x10, 0x23, 0x22, 0x48, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a,
	0x08, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1e, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x10, 0x45, 0x74, 0x63, 0x64, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x45, 0x74, 0x63, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x69, 0x73, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x1a, 0x3c, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x0d, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x66, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x54, 0x46, 0x4a, 0x6f, 0x62, 0x42, 0x09, 0xe2, 0xde, 0x1f, 0x05, 0x54, 0x46,
	0x4a, 0x6f, 0x62, 0x52, 0x05, 0x74, 0x66, 0x4a, 0x6f, 0x62, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x3a, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x6a, 0x6f,
	0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x42, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x70, 0x6f,
	0x75, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x53, 0x70, 0x6f, 0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2f,
	0x0a, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x47, 0x69, 0x74, 0x68, 0x6f, 0x6f, 0x6b,
	0x55, 0x52, 0x4c, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12,
	0x30, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x3c, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x4a, 0x04, 0x08, 0x1b,
	0x10, 0x1c, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0x4b, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd0, 0x05, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c,
	0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x15,
	0x10, 0x16, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04,
	0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14,
	0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x17,
	0x10, 0x18, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x34,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22,
	0x72, 0x0a, 0x0f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a,
	0x0c, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x30, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x78, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x61,
	0x69, 0x6c, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xc0, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xde,
	0x1f, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xde, 0x1f,
	0x07, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x49, 0x44, 0x52, 0x07, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x22, 0x63, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x09, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd1,
	0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfd, 0x09, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74,
	0x66, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x54, 0x46, 0x4a, 0x6f, 0x62, 0x42, 0x09, 0xe2, 0xde, 0x1f,
	0x05, 0x54, 0x46, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x74, 0x66, 0x4a, 0x6f, 0x62, 0x12, 0x30, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x43, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x27, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x70,
	0x6f, 0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a,
	0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x13,
	0x10, 0x14, 0x22, 0x47, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x7a, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x45, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x44,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xde, 0x1f, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x3f, 0x0a,
	0x0e, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x3a,
	0x0a, 0x15, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x70, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x42, 0x5f, 0x4b, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x52, 0x47,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0x4f, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x3f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x44, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x49, 0x50,
	0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49,
	0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x05,
	0x32, 0x85, 0x0d, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x36, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1a,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x12, 0x19, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62,
	0x12, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x12, 0x19, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x19, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31,
	0x5f, 0x39, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f,
	0x39, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x07, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x39, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x39, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d,
	0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x5f, 0x39,
	0x2f, 0x70, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_admin_v1_9_pps_pps_proto_rawDescOnce sync.Once
	file_client_admin_v1_9_pps_pps_proto_rawDescData = file_client_admin_v1_9_pps_pps_proto_rawDesc
)

func file_client_admin_v1_9_pps_pps_proto_rawDescGZIP() []byte {
	file_client_admin_v1_9_pps_pps_proto_rawDescOnce.Do(func() {
		file_client_admin_v1_9_pps_pps_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_admin_v1_9_pps_pps_proto_rawDescData)
	})
	return file_client_admin_v1_9_pps_pps_proto_rawDescData
}

var file_client_admin_v1_9_pps_pps_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_client_admin_v1_9_pps_pps_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_client_admin_v1_9_pps_pps_proto_goTypes = []interface{}{
	(JobState)(0),                   // 0: pps_1_9.JobState
	(DatumState)(0),                 // 1: pps_1_9.DatumState
	(WorkerState)(0),                // 2: pps_1_9.WorkerState
	(PipelineState)(0),              // 3: pps_1_9.PipelineState
	(*Secret)(nil),                  // 4: pps_1_9.Secret
	(*Transform)(nil),               // 5: pps_1_9.Transform
	(*TFJob)(nil),                   // 6: pps_1_9.TFJob
	(*Egress)(nil),                  // 7: pps_1_9.Egress
	(*Job)(nil),                     // 8: pps_1_9.Job
	(*Service)(nil),                 // 9: pps_1_9.Service
	(*Spout)(nil),                   // 10: pps_1_9.Spout
	(*PFSInput)(nil),                // 11: pps_1_9.PFSInput
	(*CronInput)(nil),               // 12: pps_1_9.CronInput
	(*GitInput)(nil),                // 13: pps_1_9.GitInput
	(*Input)(nil),                   // 14: pps_1_9.Input
	(*JobInput)(nil),                // 15: pps_1_9.JobInput
	(*ParallelismSpec)(nil),         // 16: pps_1_9.ParallelismSpec
	(*HashtreeSpec)(nil),            // 17: pps_1_9.HashtreeSpec
	(*InputFile)(nil),               // 18: pps_1_9.InputFile
	(*Datum)(nil),                   // 19: pps_1_9.Datum
	(*DatumInfo)(nil),               // 20: pps_1_9.DatumInfo
	(*Aggregate)(nil),               // 21: pps_1_9.Aggregate
	(*ProcessStats)(nil),            // 22: pps_1_9.ProcessStats
	(*AggregateProcessStats)(nil),   // 23: pps_1_9.AggregateProcessStats
	(*WorkerStatus)(nil),            // 24: pps_1_9.WorkerStatus
	(*ResourceSpec)(nil),            // 25: pps_1_9.ResourceSpec
	(*GPUSpec)(nil),                 // 26: pps_1_9.GPUSpec
	(*EtcdJobInfo)(nil),             // 27: pps_1_9.EtcdJobInfo
	(*JobInfo)(nil),                 // 28: pps_1_9.JobInfo
	(*Worker)(nil),                  // 29: pps_1_9.Worker
	(*JobInfos)(nil),                // 30: pps_1_9.JobInfos
	(*Pipeline)(nil),                // 31: pps_1_9.Pipeline
	(*EtcdPipelineInfo)(nil),        // 32: pps_1_9.EtcdPipelineInfo
	(*PipelineInfo)(nil),            // 33: pps_1_9.PipelineInfo
	(*PipelineInfos)(nil),           // 34: pps_1_9.PipelineInfos
	(*CreateJobRequest)(nil),        // 35: pps_1_9.CreateJobRequest
	(*InspectJobRequest)(nil),       // 36: pps_1_9.InspectJobRequest
	(*ListJobRequest)(nil),          // 37: pps_1_9.ListJobRequest
	(*FlushJobRequest)(nil),         // 38: pps_1_9.FlushJobRequest
	(*DeleteJobRequest)(nil),        // 39: pps_1_9.DeleteJobRequest
	(*StopJobRequest)(nil),          // 40: pps_1_9.StopJobRequest
	(*UpdateJobStateRequest)(nil),   // 41: pps_1_9.UpdateJobStateRequest
	(*GetLogsRequest)(nil),          // 42: pps_1_9.GetLogsRequest
	(*LogMessage)(nil),              // 43: pps_1_9.LogMessage
	(*RestartDatumRequest)(nil),     // 44: pps_1_9.RestartDatumRequest
	(*InspectDatumRequest)(nil),     // 45: pps_1_9.InspectDatumRequest
	(*ListDatumRequest)(nil),        // 46: pps_1_9.ListDatumRequest
	(*ListDatumResponse)(nil),       // 47: pps_1_9.ListDatumResponse
	(*ListDatumStreamResponse)(nil), // 48: pps_1_9.ListDatumStreamResponse
	(*ChunkSpec)(nil),               // 49: pps_1_9.ChunkSpec
	(*SchedulingSpec)(nil),          // 50: pps_1_9.SchedulingSpec
	(*CreatePipelineRequest)(nil),   // 51: pps_1_9.CreatePipelineRequest
	(*InspectPipelineRequest)(nil),  // 52: pps_1_9.InspectPipelineRequest
	(*ListPipelineRequest)(nil),     // 53: pps_1_9.ListPipelineRequest
	(*DeletePipelineRequest)(nil),   // 54: pps_1_9.DeletePipelineRequest
	(*StartPipelineRequest)(nil),    // 55: pps_1_9.StartPipelineRequest
	(*StopPipelineRequest)(nil),     // 56: pps_1_9.StopPipelineRequest
	(*RunPipelineRequest)(nil),      // 57: pps_1_9.RunPipelineRequest
	(*RunCronRequest)(nil),          // 58: pps_1_9.RunCronRequest
	(*GarbageCollectRequest)(nil),   // 59: pps_1_9.GarbageCollectRequest
	(*GarbageCollectResponse)(nil),  // 60: pps_1_9.GarbageCollectResponse
	(*ActivateAuthRequest)(nil),     // 61: pps_1_9.ActivateAuthRequest
	(*ActivateAuthResponse)(nil),    // 62: pps_1_9.ActivateAuthResponse
	nil,                             // 63: pps_1_9.Transform.EnvEntry
	nil,                             // 64: pps_1_9.Service.AnnotationsEntry
	nil,                             // 65: pps_1_9.EtcdPipelineInfo.JobCountsEntry
	nil,                             // 66: pps_1_9.PipelineInfo.JobCountsEntry
	nil,                             // 67: pps_1_9.SchedulingSpec.NodeSelectorEntry
	(*timestamp.Timestamp)(nil),     // 68: google.protobuf.Timestamp
	(*pfs.Commit)(nil),              // 69: pfs_1_9.Commit
	(*pfs.File)(nil),                // 70: pfs_1_9.File
	(*pfs.FileInfo)(nil),            // 71: pfs_1_9.FileInfo
	(*duration.Duration)(nil),       // 72: google.protobuf.Duration
	(*pfs.Repo)(nil),                // 73: pfs_1_9.Repo
	(*pfs.BranchInfo)(nil),          // 74: pfs_1_9.BranchInfo
	(*pfs.CommitProvenance)(nil),    // 75: pfs_1_9.CommitProvenance
	(*empty.Empty)(nil),             // 76: google.protobuf.Empty
}
var file_client_admin_v1_9_pps_pps_proto_depIdxs = []int32{
	63,  // 0: pps_1_9.Transform.env:type_name -> pps_1_9.Transform.EnvEntry
	4,   // 1: pps_1_9.Transform.secrets:type_name -> pps_1_9.Secret
	64,  // 2: pps_1_9.Service.annotations:type_name -> pps_1_9.Service.AnnotationsEntry
	9,   // 3: pps_1_9.Spout.service:type_name -> pps_1_9.Service
	68,  // 4: pps_1_9.CronInput.start:type_name -> google.protobuf.Timestamp
	11,  // 5: pps_1_9.Input.pfs:type_name -> pps_1_9.PFSInput
	14,  // 6: pps_1_9.Input.join:type_name -> pps_1_9.Input
	14,  // 7: pps_1_9.Input.cross:type_name -> pps_1_9.Input
	14,  // 8: pps_1_9.Input.union:type_name -> pps_1_9.Input
	12,  // 9: pps_1_9.Input.cron:type_name -> pps_1_9.CronInput
	13,  // 10: pps_1_9.Input.git:type_name -> pps_1_9.GitInput
	69,  // 11: pps_1_9.JobInput.commit:type_name -> pfs_1_9.Commit
	8,   // 12: pps_1_9.Datum.job:type_name -> pps_1_9.Job
	19,  // 13: pps_1_9.DatumInfo.datum:type_name -> pps_1_9.Datum
	1,   // 14: pps_1_9.DatumInfo.state:type_name -> pps_1_9.DatumState
	22,  // 15: pps_1_9.DatumInfo.stats:type_name -> pps_1_9.ProcessStats
	70,  // 16: pps_1_9.DatumInfo.pfs_state:type_name -> pfs_1_9.File
	71,  // 17: pps_1_9.DatumInfo.data:type_name -> pfs_1_9.FileInfo
	72,  // 18: pps_1_9.ProcessStats.download_time:type_name -> google.protobuf.Duration
	72,  // 19: pps_1_9.ProcessStats.process_time:type_name -> google.protobuf.Duration
	72,  // 20: pps_1_9.ProcessStats.upload_time:type_name -> google.protobuf.Duration
	21,  // 21: pps_1_9.AggregateProcessStats.download_time:type_name -> pps_1_9.Aggregate
	21,  // 22: pps_1_9.AggregateProcessStats.process_time:type_name -> pps_1_9.Aggregate
	21,  // 23: pps_1_9.AggregateProcessStats.upload_time:type_name -> pps_1_9.Aggregate
	21,  // 24: pps_1_9.AggregateProcessStats.download_bytes:type_name -> pps_1_9.Aggregate
	21,  // 25: pps_1_9.AggregateProcessStats.upload_bytes:type_name -> pps_1_9.Aggregate
	18,  // 26: pps_1_9.WorkerStatus.data:type_name -> pps_1_9.InputFile
	68,  // 27: pps_1_9.WorkerStatus.started:type_name -> google.protobuf.Timestamp
	22,  // 28: pps_1_9.WorkerStatus.stats:type_name -> pps_1_9.ProcessStats
	26,  // 29: pps_1_9.ResourceSpec.gpu:type_name -> pps_1_9.GPUSpec
	8,   // 30: pps_1_9.EtcdJobInfo.job:type_name -> pps_1_9.Job
	31,  // 31: pps_1_9.EtcdJobInfo.pipeline:type_name -> pps_1_9.Pipeline
	69,  // 32: pps_1_9.EtcdJobInfo.output_commit:type_name -> pfs_1_9.Commit
	22,  // 33: pps_1_9.EtcdJobInfo.stats:type_name -> pps_1_9.ProcessStats
	69,  // 34: pps_1_9.EtcdJobInfo.stats_commit:type_name -> pfs_1_9.Commit
	0,   // 35: pps_1_9.EtcdJobInfo.state:type_name -> pps_1_9.JobState
	68,  // 36: pps_1_9.EtcdJobInfo.started:type_name -> google.protobuf.Timestamp
	68,  // 37: pps_1_9.EtcdJobInfo.finished:type_name -> google.protobuf.Timestamp
	8,   // 38: pps_1_9.JobInfo.job:type_name -> pps_1_9.Job
	5,   // 39: pps_1_9.JobInfo.transform:type_name -> pps_1_9.Transform
	31,  // 40: pps_1_9.JobInfo.pipeline:type_name -> pps_1_9.Pipeline
	69,  // 41: pps_1_9.JobInfo.spec_commit:type_name -> pfs_1_9.Commit
	16,  // 42: pps_1_9.JobInfo.parallelism_spec:type_name -> pps_1_9.ParallelismSpec
	7,   // 43: pps_1_9.JobInfo.egress:type_name -> pps_1_9.Egress
	8,   // 44: pps_1_9.JobInfo.parent_job:type_name -> pps_1_9.Job
	68,  // 45: pps_1_9.JobInfo.started:type_name -> google.protobuf.Timestamp
	68,  // 46: pps_1_9.JobInfo.finished:type_name -> google.protobuf.Timestamp
	69,  // 47: pps_1_9.JobInfo.output_commit:type_name -> pfs_1_9.Commit
	0,   // 48: pps_1_9.JobInfo.state:type_name -> pps_1_9.JobState
	9,   // 49: pps_1_9.JobInfo.service:type_name -> pps_1_9.Service
	10,  // 50: pps_1_9.JobInfo.spout:type_name -> pps_1_9.Spout
	73,  // 51: pps_1_9.JobInfo.output_repo:type_name -> pfs_1_9.Repo
	22,  // 52: pps_1_9.JobInfo.stats:type_name -> pps_1_9.ProcessStats
	24,  // 53: pps_1_9.JobInfo.worker_status:type_name -> pps_1_9.WorkerStatus
	25,  // 54: pps_1_9.JobInfo.resource_requests:type_name -> pps_1_9.ResourceSpec
	25,  // 55: pps_1_9.JobInfo.resource_limits:type_name -> pps_1_9.ResourceSpec
	14,  // 56: pps_1_9.JobInfo.input:type_name -> pps_1_9.Input
	74,  // 57: pps_1_9.JobInfo.new_branch:type_name -> pfs_1_9.BranchInfo
	69,  // 58: pps_1_9.JobInfo.stats_commit:type_name -> pfs_1_9.Commit
	49,  // 59: pps_1_9.JobInfo.chunk_spec:type_name -> pps_1_9.ChunkSpec
	72,  // 60: pps_1_9.JobInfo.datum_timeout:type_name -> google.protobuf.Duration
	72,  // 61: pps_1_9.JobInfo.job_timeout:type_name -> google.protobuf.Duration
	50,  // 62: pps_1_9.JobInfo.scheduling_spec:type_name -> pps_1_9.SchedulingSpec
	2,   // 63: pps_1_9.Worker.state:type_name -> pps_1_9.WorkerState
	28,  // 64: pps_1_9.JobInfos.job_info:type_name -> pps_1_9.JobInfo
	3,   // 65: pps_1_9.EtcdPipelineInfo.state:type_name -> pps_1_9.PipelineState
	69,  // 66: pps_1_9.EtcdPipelineInfo.spec_commit:type_name -> pfs_1_9.Commit
	65,  // 67: pps_1_9.EtcdPipelineInfo.job_counts:type_name -> pps_1_9.EtcdPipelineInfo.JobCountsEntry
	0,   // 68: pps_1_9.EtcdPipelineInfo.last_job_state:type_name -> pps_1_9.JobState
	31,  // 69: pps_1_9.PipelineInfo.pipeline:type_name -> pps_1_9.Pipeline
	5,   // 70: pps_1_9.PipelineInfo.transform:type_name -> pps_1_9.Transform
	6,   // 71: pps_1_9.PipelineInfo.tf_job:type_name -> pps_1_9.TFJob
	16,  // 72: pps_1_9.PipelineInfo.parallelism_spec:type_name -> pps_1_9.ParallelismSpec
	17,  // 73: pps_1_9.PipelineInfo.hashtree_spec:type_name -> pps_1_9.HashtreeSpec
	7,   // 74: pps_1_9.PipelineInfo.egress:type_name -> pps_1_9.Egress
	68,  // 75: pps_1_9.PipelineInfo.created_at:type_name -> google.protobuf.Timestamp
	3,   // 76: pps_1_9.PipelineInfo.state:type_name -> pps_1_9.PipelineState
	66,  // 77: pps_1_9.PipelineInfo.job_counts:type_name -> pps_1_9.PipelineInfo.JobCountsEntry
	0,   // 78: pps_1_9.PipelineInfo.last_job_state:type_name -> pps_1_9.JobState
	25,  // 79: pps_1_9.PipelineInfo.resource_requests:type_name -> pps_1_9.ResourceSpec
	25,  // 80: pps_1_9.PipelineInfo.resource_limits:type_name -> pps_1_9.ResourceSpec
	14,  // 81: pps_1_9.PipelineInfo.input:type_name -> pps_1_9.Input
	9,   // 82: pps_1_9.PipelineInfo.service:type_name -> pps_1_9.Service
	10,  // 83: pps_1_9.PipelineInfo.spout:type_name -> pps_1_9.Spout
	49,  // 84: pps_1_9.PipelineInfo.chunk_spec:type_name -> pps_1_9.ChunkSpec
	72,  // 85: pps_1_9.PipelineInfo.datum_timeout:type_name -> google.protobuf.Duration
	72,  // 86: pps_1_9.PipelineInfo.job_timeout:type_name -> google.protobuf.Duration
	69,  // 87: pps_1_9.PipelineInfo.spec_commit:type_name -> pfs_1_9.Commit
	50,  // 88: pps_1_9.PipelineInfo.scheduling_spec:type_name -> pps_1_9.SchedulingSpec
	33,  // 89: pps_1_9.PipelineInfos.pipeline_info:type_name -> pps_1_9.PipelineInfo
	31,  // 90: pps_1_9.CreateJobRequest.pipeline:type_name -> pps_1_9.Pipeline
	69,  // 91: pps_1_9.CreateJobRequest.output_commit:type_name -> pfs_1_9.Commit
	22,  // 92: pps_1_9.CreateJobRequest.stats:type_name -> pps_1_9.ProcessStats
	69,  // 93: pps_1_9.CreateJobRequest.stats_commit:type_name -> pfs_1_9.Commit
	0,   // 94: pps_1_9.CreateJobRequest.state:type_name -> pps_1_9.JobState
	68,  // 95: pps_1_9.CreateJobRequest.started:type_name -> google.protobuf.Timestamp
	68,  // 96: pps_1_9.CreateJobRequest.finished:type_name -> google.protobuf.Timestamp
	8,   // 97: pps_1_9.InspectJobRequest.job:type_name -> pps_1_9.Job
	69,  // 98: pps_1_9.InspectJobRequest.output_commit:type_name -> pfs_1_9.Commit
	31,  // 99: pps_1_9.ListJobRequest.pipeline:type_name -> pps_1_9.Pipeline
	69,  // 100: pps_1_9.ListJobRequest.input_commit:type_name -> pfs_1_9.Commit
	69,  // 101: pps_1_9.ListJobRequest.output_commit:type_name -> pfs_1_9.Commit
	69,  // 102: pps_1_9.FlushJobRequest.commits:type_name -> pfs_1_9.Commit
	31,  // 103: pps_1_9.FlushJobRequest.to_pipelines:type_name -> pps_1_9.Pipeline
	8,   // 104: pps_1_9.DeleteJobRequest.job:type_name -> pps_1_9.Job
	8,   // 105: pps_1_9.StopJobRequest.job:type_name -> pps_1_9.Job
	8,   // 106: pps_1_9.UpdateJobStateRequest.job:type_name -> pps_1_9.Job
	0,   // 107: pps_1_9.UpdateJobStateRequest.state:type_name -> pps_1_9.JobState
	31,  // 108: pps_1_9.GetLogsRequest.pipeline:type_name -> pps_1_9.Pipeline
	8,   // 109: pps_1_9.GetLogsRequest.job:type_name -> pps_1_9.Job
	19,  // 110: pps_1_9.GetLogsRequest.datum:type_name -> pps_1_9.Datum
	18,  // 111: pps_1_9.LogMessage.data:type_name -> pps_1_9.InputFile
	68,  // 112: pps_1_9.LogMessage.ts:type_name -> google.protobuf.Timestamp
	8,   // 113: pps_1_9.RestartDatumRequest.job:type_name -> pps_1_9.Job
	19,  // 114: pps_1_9.InspectDatumRequest.datum:type_name -> pps_1_9.Datum
	8,   // 115: pps_1_9.ListDatumRequest.job:type_name -> pps_1_9.Job
	20,  // 116: pps_1_9.ListDatumResponse.datum_infos:type_name -> pps_1_9.DatumInfo
	20,  // 117: pps_1_9.ListDatumStreamResponse.datum_info:type_name -> pps_1_9.DatumInfo
	67,  // 118: pps_1_9.SchedulingSpec.node_selector:type_name -> pps_1_9.SchedulingSpec.NodeSelectorEntry
	31,  // 119: pps_1_9.CreatePipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	6,   // 120: pps_1_9.CreatePipelineRequest.tf_job:type_name -> pps_1_9.TFJob
	5,   // 121: pps_1_9.CreatePipelineRequest.transform:type_name -> pps_1_9.Transform
	16,  // 122: pps_1_9.CreatePipelineRequest.parallelism_spec:type_name -> pps_1_9.ParallelismSpec
	17,  // 123: pps_1_9.CreatePipelineRequest.hashtree_spec:type_name -> pps_1_9.HashtreeSpec
	7,   // 124: pps_1_9.CreatePipelineRequest.egress:type_name -> pps_1_9.Egress
	25,  // 125: pps_1_9.CreatePipelineRequest.resource_requests:type_name -> pps_1_9.ResourceSpec
	25,  // 126: pps_1_9.CreatePipelineRequest.resource_limits:type_name -> pps_1_9.ResourceSpec
	14,  // 127: pps_1_9.CreatePipelineRequest.input:type_name -> pps_1_9.Input
	9,   // 128: pps_1_9.CreatePipelineRequest.service:type_name -> pps_1_9.Service
	10,  // 129: pps_1_9.CreatePipelineRequest.spout:type_name -> pps_1_9.Spout
	49,  // 130: pps_1_9.CreatePipelineRequest.chunk_spec:type_name -> pps_1_9.ChunkSpec
	72,  // 131: pps_1_9.CreatePipelineRequest.datum_timeout:type_name -> google.protobuf.Duration
	72,  // 132: pps_1_9.CreatePipelineRequest.job_timeout:type_name -> google.protobuf.Duration
	50,  // 133: pps_1_9.CreatePipelineRequest.scheduling_spec:type_name -> pps_1_9.SchedulingSpec
	69,  // 134: pps_1_9.CreatePipelineRequest.spec_commit:type_name -> pfs_1_9.Commit
	31,  // 135: pps_1_9.InspectPipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	31,  // 136: pps_1_9.ListPipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	31,  // 137: pps_1_9.DeletePipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	31,  // 138: pps_1_9.StartPipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	31,  // 139: pps_1_9.StopPipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	31,  // 140: pps_1_9.RunPipelineRequest.pipeline:type_name -> pps_1_9.Pipeline
	75,  // 141: pps_1_9.RunPipelineRequest.provenance:type_name -> pfs_1_9.CommitProvenance
	31,  // 142: pps_1_9.RunCronRequest.pipeline:type_name -> pps_1_9.Pipeline
	35,  // 143: pps_1_9.API.CreateJob:input_type -> pps_1_9.CreateJobRequest
	36,  // 144: pps_1_9.API.InspectJob:input_type -> pps_1_9.InspectJobRequest
	37,  // 145: pps_1_9.API.ListJob:input_type -> pps_1_9.ListJobRequest
	37,  // 146: pps_1_9.API.ListJobStream:input_type -> pps_1_9.ListJobRequest
	38,  // 147: pps_1_9.API.FlushJob:input_type -> pps_1_9.FlushJobRequest
	39,  // 148: pps_1_9.API.DeleteJob:input_type -> pps_1_9.DeleteJobRequest
	40,  // 149: pps_1_9.API.StopJob:input_type -> pps_1_9.StopJobRequest
	45,  // 150: pps_1_9.API.InspectDatum:input_type -> pps_1_9.InspectDatumRequest
	46,  // 151: pps_1_9.API.ListDatum:input_type -> pps_1_9.ListDatumRequest
	46,  // 152: pps_1_9.API.ListDatumStream:input_type -> pps_1_9.ListDatumRequest
	44,  // 153: pps_1_9.API.RestartDatum:input_type -> pps_1_9.RestartDatumRequest
	51,  // 154: pps_1_9.API.CreatePipeline:input_type -> pps_1_9.CreatePipelineRequest
	52,  // 155: pps_1_9.API.InspectPipeline:input_type -> pps_1_9.InspectPipelineRequest
	53,  // 156: pps_1_9.API.ListPipeline:input_type -> pps_1_9.ListPipelineRequest
	54,  // 157: pps_1_9.API.DeletePipeline:input_type -> pps_1_9.DeletePipelineRequest
	55,  // 158: pps_1_9.API.StartPipeline:input_type -> pps_1_9.StartPipelineRequest
	56,  // 159: pps_1_9.API.StopPipeline:input_type -> pps_1_9.StopPipelineRequest
	57,  // 160: pps_1_9.API.RunPipeline:input_type -> pps_1_9.RunPipelineRequest
	58,  // 161: pps_1_9.API.RunCron:input_type -> pps_1_9.RunCronRequest
	76,  // 162: pps_1_9.API.DeleteAll:input_type -> google.protobuf.Empty
	42,  // 163: pps_1_9.API.GetLogs:input_type -> pps_1_9.GetLogsRequest
	59,  // 164: pps_1_9.API.GarbageCollect:input_type -> pps_1_9.GarbageCollectRequest
	61,  // 165: pps_1_9.API.ActivateAuth:input_type -> pps_1_9.ActivateAuthRequest
	41,  // 166: pps_1_9.API.UpdateJobState:input_type -> pps_1_9.UpdateJobStateRequest
	8,   // 167: pps_1_9.API.CreateJob:output_type -> pps_1_9.Job
	28,  // 168: pps_1_9.API.InspectJob:output_type -> pps_1_9.JobInfo
	30,  // 169: pps_1_9.API.ListJob:output_type -> pps_1_9.JobInfos
	28,  // 170: pps_1_9.API.ListJobStream:output_type -> pps_1_9.JobInfo
	28,  // 171: pps_1_9.API.FlushJob:output_type -> pps_1_9.JobInfo
	76,  // 172: pps_1_9.API.DeleteJob:output_type -> google.protobuf.Empty
	76,  // 173: pps_1_9.API.StopJob:output_type -> google.protobuf.Empty
	20,  // 174: pps_1_9.API.InspectDatum:output_type -> pps_1_9.DatumInfo
	47,  // 175: pps_1_9.API.ListDatum:output_type -> pps_1_9.ListDatumResponse
	48,  // 176: pps_1_9.API.ListDatumStream:output_type -> pps_1_9.ListDatumStreamResponse
	76,  // 177: pps_1_9.API.RestartDatum:output_type -> google.protobuf.Empty
	76,  // 178: pps_1_9.API.CreatePipeline:output_type -> google.protobuf.Empty
	33,  // 179: pps_1_9.API.InspectPipeline:output_type -> pps_1_9.PipelineInfo
	34,  // 180: pps_1_9.API.ListPipeline:output_type -> pps_1_9.PipelineInfos
	76,  // 181: pps_1_9.API.DeletePipeline:output_type -> google.protobuf.Empty
	76,  // 182: pps_1_9.API.StartPipeline:output_type -> google.protobuf.Empty
	76,  // 183: pps_1_9.API.StopPipeline:output_type -> google.protobuf.Empty
	76,  // 184: pps_1_9.API.RunPipeline:output_type -> google.protobuf.Empty
	76,  // 185: pps_1_9.API.RunCron:output_type -> google.protobuf.Empty
	76,  // 186: pps_1_9.API.DeleteAll:output_type -> google.protobuf.Empty
	43,  // 187: pps_1_9.API.GetLogs:output_type -> pps_1_9.LogMessage
	60,  // 188: pps_1_9.API.GarbageCollect:output_type -> pps_1_9.GarbageCollectResponse
	62,  // 189: pps_1_9.API.ActivateAuth:output_type -> pps_1_9.ActivateAuthResponse
	76,  // 190: pps_1_9.API.UpdateJobState:output_type -> google.protobuf.Empty
	167, // [167:191] is the sub-list for method output_type
	143, // [143:167] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_client_admin_v1_9_pps_pps_proto_init() }
func file_client_admin_v1_9_pps_pps_proto_init() {
	if File_client_admin_v1_9_pps_pps_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_admin_v1_9_pps_pps_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Egress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PFSInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelismSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashtreeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdPipelineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatumStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GarbageCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GarbageCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_9_pps_pps_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_admin_v1_9_pps_pps_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_admin_v1_9_pps_pps_proto_goTypes,
		DependencyIndexes: file_client_admin_v1_9_pps_pps_proto_depIdxs,
		EnumInfos:         file_client_admin_v1_9_pps_pps_proto_enumTypes,
		MessageInfos:      file_client_admin_v1_9_pps_pps_proto_msgTypes,
	}.Build()
	File_client_admin_v1_9_pps_pps_proto = out.File
	file_client_admin_v1_9_pps_pps_proto_rawDesc = nil
	file_client_admin_v1_9_pps_pps_proto_goTypes = nil
	file_client_admin_v1_9_pps_pps_proto_depIdxs = nil
}
