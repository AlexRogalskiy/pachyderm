// Data structures for serializing hash trees, which Pachyderm uses to track
// the files present in each commit and determine when to start jobs.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: client/admin/v1_7/hashtree/hashtree.proto

package hashtree

import (
	proto "github.com/golang/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/src/client/admin/v1_7/pfs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FileNodeProto is a node corresponding to a file (which is also a leaf node).
type FileNodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object references an object in the object store which contains the content
	// of the data.
	Objects []*pfs.Object `protobuf:"bytes,4,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *FileNodeProto) Reset() {
	*x = FileNodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileNodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNodeProto) ProtoMessage() {}

func (x *FileNodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNodeProto.ProtoReflect.Descriptor instead.
func (*FileNodeProto) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_7_hashtree_hashtree_proto_rawDescGZIP(), []int{0}
}

func (x *FileNodeProto) GetObjects() []*pfs.Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

// DirectoryNodeProto is a node corresponding to a directory.
type DirectoryNodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Children of this directory. Note that paths are relative, so if "/foo/bar"
	// has a child "baz", that means that there is a file at "/foo/bar/baz".
	//
	// 'Children' is ordered alphabetically, to quickly check if a new file is
	// overwriting an existing one.
	Children []string    `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Header   *pfs.Object `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Footer   *pfs.Object `protobuf:"bytes,5,opt,name=footer,proto3" json:"footer,omitempty"`
}

func (x *DirectoryNodeProto) Reset() {
	*x = DirectoryNodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryNodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryNodeProto) ProtoMessage() {}

func (x *DirectoryNodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryNodeProto.ProtoReflect.Descriptor instead.
func (*DirectoryNodeProto) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_7_hashtree_hashtree_proto_rawDescGZIP(), []int{1}
}

func (x *DirectoryNodeProto) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DirectoryNodeProto) GetHeader() *pfs.Object {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DirectoryNodeProto) GetFooter() *pfs.Object {
	if x != nil {
		return x.Footer
	}
	return nil
}

// NodeProto is a node in the file tree (either a file or a directory)
type NodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name (not path) of the file/directory (e.g. /lib).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Hash is a hash of the node's name and contents (which includes the
	// BlockRefs of a file and the Children of a directory). This can be used to
	// detect if the name or contents have changed between versions.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// subtree_size is the of the subtree under node; i.e. if this is a directory,
	// subtree_size includes all children.
	SubtreeSize int64 `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	// Exactly one of the following fields must be set. The type of this node will
	// be determined by which field is set.
	FileNode *FileNodeProto      `protobuf:"bytes,4,opt,name=file_node,json=fileNode,proto3" json:"file_node,omitempty"`
	DirNode  *DirectoryNodeProto `protobuf:"bytes,5,opt,name=dir_node,json=dirNode,proto3" json:"dir_node,omitempty"`
}

func (x *NodeProto) Reset() {
	*x = NodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeProto) ProtoMessage() {}

func (x *NodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeProto.ProtoReflect.Descriptor instead.
func (*NodeProto) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_7_hashtree_hashtree_proto_rawDescGZIP(), []int{2}
}

func (x *NodeProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeProto) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *NodeProto) GetSubtreeSize() int64 {
	if x != nil {
		return x.SubtreeSize
	}
	return 0
}

func (x *NodeProto) GetFileNode() *FileNodeProto {
	if x != nil {
		return x.FileNode
	}
	return nil
}

func (x *NodeProto) GetDirNode() *DirectoryNodeProto {
	if x != nil {
		return x.DirNode
	}
	return nil
}

// HashTreeProto is a tree corresponding to the complete file contents of a
// pachyderm repo at a given commit (based on a Merkle Tree). We store one
// HashTree for every PFS commit.
type HashTreeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version is an arbitrary version number, set by the corresponding library
	// in hashtree.go.  This ensures that if the hash function used to create
	// these trees is changed, we won't run into errors when deserializing old
	// trees. The current version is 1.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Fs maps each node's path to the NodeProto with that node's details.
	// See "Potential Optimizations" at the end for a compression scheme that
	// could be useful if this map gets too large.
	//
	// Note that the key must end in "/" if an only if the value has .dir_node set
	// (i.e. iff the path points to a directory).
	Fs map[string]*NodeProto `protobuf:"bytes,2,rep,name=fs,proto3" json:"fs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HashTreeProto) Reset() {
	*x = HashTreeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashTreeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashTreeProto) ProtoMessage() {}

func (x *HashTreeProto) ProtoReflect() protoreflect.Message {
	mi := &file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashTreeProto.ProtoReflect.Descriptor instead.
func (*HashTreeProto) Descriptor() ([]byte, []int) {
	return file_client_admin_v1_7_hashtree_hashtree_proto_rawDescGZIP(), []int{3}
}

func (x *HashTreeProto) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HashTreeProto) GetFs() map[string]*NodeProto {
	if x != nil {
		return x.Fs
	}
	return nil
}

var File_client_admin_v1_7_hashtree_hashtree_proto protoreflect.FileDescriptor

var file_client_admin_v1_7_hashtree_hashtree_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x5f, 0x37, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x31, 0x5f, 0x37, 0x1a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x5f, 0x37, 0x2f, 0x70, 0x66, 0x73,
	0x2f, 0x70, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0d, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x66, 0x73, 0x5f, 0x31, 0x5f, 0x37, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f,
	0x31, 0x5f, 0x37, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x31, 0x5f, 0x37, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x31, 0x5f, 0x37, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x69, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x31, 0x5f, 0x37, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0d,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x02, 0x66, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x31,
	0x5f, 0x37, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x66, 0x73, 0x1a, 0x4e, 0x0a, 0x07,
	0x46, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x31, 0x5f, 0x37, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x3f, 0x5a, 0x3d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79,
	0x64, 0x65, 0x72, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x76, 0x31, 0x5f, 0x37, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x74, 0x72, 0x65, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_admin_v1_7_hashtree_hashtree_proto_rawDescOnce sync.Once
	file_client_admin_v1_7_hashtree_hashtree_proto_rawDescData = file_client_admin_v1_7_hashtree_hashtree_proto_rawDesc
)

func file_client_admin_v1_7_hashtree_hashtree_proto_rawDescGZIP() []byte {
	file_client_admin_v1_7_hashtree_hashtree_proto_rawDescOnce.Do(func() {
		file_client_admin_v1_7_hashtree_hashtree_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_admin_v1_7_hashtree_hashtree_proto_rawDescData)
	})
	return file_client_admin_v1_7_hashtree_hashtree_proto_rawDescData
}

var file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_client_admin_v1_7_hashtree_hashtree_proto_goTypes = []interface{}{
	(*FileNodeProto)(nil),      // 0: hashtree_1_7.FileNodeProto
	(*DirectoryNodeProto)(nil), // 1: hashtree_1_7.DirectoryNodeProto
	(*NodeProto)(nil),          // 2: hashtree_1_7.NodeProto
	(*HashTreeProto)(nil),      // 3: hashtree_1_7.HashTreeProto
	nil,                        // 4: hashtree_1_7.HashTreeProto.FsEntry
	(*pfs.Object)(nil),         // 5: pfs_1_7.Object
}
var file_client_admin_v1_7_hashtree_hashtree_proto_depIdxs = []int32{
	5, // 0: hashtree_1_7.FileNodeProto.objects:type_name -> pfs_1_7.Object
	5, // 1: hashtree_1_7.DirectoryNodeProto.header:type_name -> pfs_1_7.Object
	5, // 2: hashtree_1_7.DirectoryNodeProto.footer:type_name -> pfs_1_7.Object
	0, // 3: hashtree_1_7.NodeProto.file_node:type_name -> hashtree_1_7.FileNodeProto
	1, // 4: hashtree_1_7.NodeProto.dir_node:type_name -> hashtree_1_7.DirectoryNodeProto
	4, // 5: hashtree_1_7.HashTreeProto.fs:type_name -> hashtree_1_7.HashTreeProto.FsEntry
	2, // 6: hashtree_1_7.HashTreeProto.FsEntry.value:type_name -> hashtree_1_7.NodeProto
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_client_admin_v1_7_hashtree_hashtree_proto_init() }
func file_client_admin_v1_7_hashtree_hashtree_proto_init() {
	if File_client_admin_v1_7_hashtree_hashtree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileNodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryNodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashTreeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_admin_v1_7_hashtree_hashtree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_admin_v1_7_hashtree_hashtree_proto_goTypes,
		DependencyIndexes: file_client_admin_v1_7_hashtree_hashtree_proto_depIdxs,
		MessageInfos:      file_client_admin_v1_7_hashtree_hashtree_proto_msgTypes,
	}.Build()
	File_client_admin_v1_7_hashtree_hashtree_proto = out.File
	file_client_admin_v1_7_hashtree_hashtree_proto_rawDesc = nil
	file_client_admin_v1_7_hashtree_hashtree_proto_goTypes = nil
	file_client_admin_v1_7_hashtree_hashtree_proto_depIdxs = nil
}
