// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/admin/admin.proto

/*
	Package admin is a generated protocol buffer package.

	It is generated from these files:
		client/admin/admin.proto

	It has these top-level messages:
		Op
		ExtractRequest
		RestoreRequest
*/
package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"
import pps "github.com/pachyderm/pachyderm/src/client/pps"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Op struct {
	Object       *pfs.PutObjectRequest      `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	Repo         *pfs.CreateRepoRequest     `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	StartCommit  *pfs.StartCommitRequest    `protobuf:"bytes,3,opt,name=start_commit,json=startCommit" json:"start_commit,omitempty"`
	FinishCommit *pfs.FinishCommitRequest   `protobuf:"bytes,4,opt,name=finish_commit,json=finishCommit" json:"finish_commit,omitempty"`
	File         *pfs.PutFileRequest        `protobuf:"bytes,5,opt,name=file" json:"file,omitempty"`
	Pipeline     *pps.CreatePipelineRequest `protobuf:"bytes,6,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *Op) Reset()                    { *m = Op{} }
func (m *Op) String() string            { return proto.CompactTextString(m) }
func (*Op) ProtoMessage()               {}
func (*Op) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{0} }

func (m *Op) GetObject() *pfs.PutObjectRequest {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Op) GetRepo() *pfs.CreateRepoRequest {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *Op) GetStartCommit() *pfs.StartCommitRequest {
	if m != nil {
		return m.StartCommit
	}
	return nil
}

func (m *Op) GetFinishCommit() *pfs.FinishCommitRequest {
	if m != nil {
		return m.FinishCommit
	}
	return nil
}

func (m *Op) GetFile() *pfs.PutFileRequest {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Op) GetPipeline() *pps.CreatePipelineRequest {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type ExtractRequest struct {
}

func (m *ExtractRequest) Reset()                    { *m = ExtractRequest{} }
func (m *ExtractRequest) String() string            { return proto.CompactTextString(m) }
func (*ExtractRequest) ProtoMessage()               {}
func (*ExtractRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{1} }

type RestoreRequest struct {
	Op *Op `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
}

func (m *RestoreRequest) Reset()                    { *m = RestoreRequest{} }
func (m *RestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreRequest) ProtoMessage()               {}
func (*RestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{2} }

func (m *RestoreRequest) GetOp() *Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func init() {
	proto.RegisterType((*Op)(nil), "admin.Op")
	proto.RegisterType((*ExtractRequest)(nil), "admin.ExtractRequest")
	proto.RegisterType((*RestoreRequest)(nil), "admin.RestoreRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (API_ExtractClient, error)
	Restore(ctx context.Context, opts ...grpc.CallOption) (API_RestoreClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (API_ExtractClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/admin.API/Extract", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIExtractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ExtractClient interface {
	Recv() (*Op, error)
	grpc.ClientStream
}

type aPIExtractClient struct {
	grpc.ClientStream
}

func (x *aPIExtractClient) Recv() (*Op, error) {
	m := new(Op)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Restore(ctx context.Context, opts ...grpc.CallOption) (API_RestoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/admin.API/Restore", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIRestoreClient{stream}
	return x, nil
}

type API_RestoreClient interface {
	Send(*RestoreRequest) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type aPIRestoreClient struct {
	grpc.ClientStream
}

func (x *aPIRestoreClient) Send(m *RestoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIRestoreClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for API service

type APIServer interface {
	Extract(*ExtractRequest, API_ExtractServer) error
	Restore(API_RestoreServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Extract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExtractRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Extract(m, &aPIExtractServer{stream})
}

type API_ExtractServer interface {
	Send(*Op) error
	grpc.ServerStream
}

type aPIExtractServer struct {
	grpc.ServerStream
}

func (x *aPIExtractServer) Send(m *Op) error {
	return x.ServerStream.SendMsg(m)
}

func _API_Restore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Restore(&aPIRestoreServer{stream})
}

type API_RestoreServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*RestoreRequest, error)
	grpc.ServerStream
}

type aPIRestoreServer struct {
	grpc.ServerStream
}

func (x *aPIRestoreServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIRestoreServer) Recv() (*RestoreRequest, error) {
	m := new(RestoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Extract",
			Handler:       _API_Extract_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Restore",
			Handler:       _API_Restore_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client/admin/admin.proto",
}

func (m *Op) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Repo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Repo.Size()))
		n2, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.StartCommit != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.StartCommit.Size()))
		n3, err := m.StartCommit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FinishCommit != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.FinishCommit.Size()))
		n4, err := m.FinishCommit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.File != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.File.Size()))
		n5, err := m.File.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Pipeline != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Pipeline.Size()))
		n6, err := m.Pipeline.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ExtractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RestoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Op.Size()))
		n7, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Op) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.StartCommit != nil {
		l = m.StartCommit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.FinishCommit != nil {
		l = m.FinishCommit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *ExtractRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RestoreRequest) Size() (n int) {
	var l int
	_ = l
	if m.Op != nil {
		l = m.Op.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Op) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &pfs.PutObjectRequest{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &pfs.CreateRepoRequest{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartCommit == nil {
				m.StartCommit = &pfs.StartCommitRequest{}
			}
			if err := m.StartCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishCommit == nil {
				m.FinishCommit = &pfs.FinishCommitRequest{}
			}
			if err := m.FinishCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &pfs.PutFileRequest{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pipeline == nil {
				m.Pipeline = &pps.CreatePipelineRequest{}
			}
			if err := m.Pipeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Op == nil {
				m.Op = &Op{}
			}
			if err := m.Op.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("client/admin/admin.proto", fileDescriptorAdmin) }

var fileDescriptorAdmin = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x5f, 0x4e, 0xab, 0x40,
	0x14, 0x87, 0x0b, 0xfd, 0x77, 0xef, 0xb4, 0xb7, 0x69, 0xe6, 0xde, 0xf6, 0x22, 0x26, 0xc4, 0xf0,
	0x62, 0xa3, 0x11, 0x4c, 0x4d, 0x7c, 0x30, 0xfa, 0xa0, 0x4d, 0x9b, 0xf8, 0xd4, 0x06, 0x17, 0x60,
	0x68, 0x3d, 0xd4, 0x31, 0xc0, 0x8c, 0x30, 0x4d, 0x74, 0x27, 0xee, 0xc5, 0x0d, 0xf8, 0xe8, 0x12,
	0x4c, 0xdd, 0x88, 0xe1, 0xc0, 0x50, 0xeb, 0xc3, 0x90, 0xf0, 0x3b, 0xdf, 0x37, 0xc3, 0x1c, 0x0e,
	0x31, 0x16, 0x21, 0x83, 0x58, 0xba, 0xfe, 0x5d, 0xc4, 0xe2, 0xfc, 0xe9, 0x88, 0x84, 0x4b, 0x4e,
	0xeb, 0xf8, 0x62, 0xee, 0x2e, 0x39, 0x5f, 0x86, 0xe0, 0x62, 0x38, 0x5f, 0x05, 0x2e, 0x44, 0x42,
	0x3e, 0xe7, 0x8c, 0xf9, 0xaf, 0xb0, 0x45, 0x90, 0x66, 0xeb, 0x67, 0x2a, 0xd2, 0x6c, 0xe5, 0xa9,
	0xfd, 0xaa, 0x13, 0x7d, 0x2a, 0xe8, 0x11, 0x69, 0xf0, 0xf9, 0x03, 0x2c, 0xa4, 0xa1, 0xed, 0x69,
	0x83, 0xd6, 0xb0, 0xe7, 0x64, 0xe2, 0x6c, 0x25, 0xa7, 0x98, 0x7a, 0xf0, 0xb8, 0x82, 0x54, 0x7a,
	0x05, 0x44, 0x0f, 0x48, 0x2d, 0x01, 0xc1, 0x0d, 0x1d, 0xe1, 0x3e, 0xc2, 0xa3, 0x04, 0x7c, 0x09,
	0x1e, 0x08, 0xae, 0x68, 0x64, 0xe8, 0x19, 0x69, 0xa7, 0xd2, 0x4f, 0xe4, 0xed, 0x82, 0x47, 0x11,
	0x93, 0x46, 0x15, 0x9d, 0xff, 0xe8, 0xdc, 0x64, 0x85, 0x11, 0xe6, 0x4a, 0x6a, 0xa5, 0x9b, 0x8c,
	0x5e, 0x90, 0x3f, 0x01, 0x8b, 0x59, 0x7a, 0xaf, 0xe4, 0x1a, 0xca, 0x06, 0xca, 0x13, 0xac, 0x6c,
	0xdb, 0xed, 0xe0, 0x5b, 0x48, 0xf7, 0x49, 0x2d, 0x60, 0x21, 0x18, 0x75, 0xb4, 0xfe, 0xaa, 0x3b,
	0x4d, 0x58, 0x08, 0xe5, 0x37, 0x66, 0x00, 0x3d, 0x25, 0xbf, 0x04, 0x13, 0x10, 0xb2, 0x18, 0x8c,
	0x06, 0xc2, 0xa6, 0x93, 0xf5, 0x28, 0xbf, 0xd3, 0xac, 0x28, 0x29, 0xa7, 0x64, 0xed, 0x2e, 0xe9,
	0x8c, 0x9f, 0x64, 0xe2, 0x97, 0x1d, 0xb2, 0x0f, 0x49, 0xc7, 0x83, 0x54, 0xf2, 0x44, 0xd1, 0x74,
	0x87, 0xe8, 0x5c, 0x14, 0x6d, 0xfd, 0xed, 0xe4, 0xff, 0x72, 0x2a, 0x3c, 0x9d, 0x8b, 0xa1, 0x24,
	0xd5, 0xcb, 0xd9, 0x35, 0x75, 0x49, 0xb3, 0xd8, 0x85, 0xf6, 0x0a, 0x60, 0x7b, 0x57, 0x73, 0xe3,
	0xd9, 0x95, 0x63, 0x8d, 0x9e, 0x93, 0x66, 0x71, 0x48, 0x29, 0x6c, 0x1f, 0x6a, 0xf6, 0x9d, 0x7c,
	0x40, 0x1c, 0x35, 0x20, 0xce, 0x38, 0x1b, 0x10, 0xbb, 0x32, 0xd0, 0xae, 0xba, 0x6f, 0x6b, 0x4b,
	0x7b, 0x5f, 0x5b, 0xda, 0xc7, 0xda, 0xd2, 0x5e, 0x3e, 0xad, 0xca, 0xbc, 0x81, 0xd4, 0xc9, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0xad, 0xef, 0x62, 0x77, 0x02, 0x00, 0x00,
}
