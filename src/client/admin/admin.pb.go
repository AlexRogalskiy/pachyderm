// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/admin/admin.proto

package admin

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/src/client/admin/v1_7/pfs"
	pps "github.com/pachyderm/pachyderm/src/client/admin/v1_7/pps"
	pfs1 "github.com/pachyderm/pachyderm/src/client/admin/v1_8/pfs"
	pps1 "github.com/pachyderm/pachyderm/src/client/admin/v1_8/pps"
	pfs2 "github.com/pachyderm/pachyderm/src/client/pfs"
	pps2 "github.com/pachyderm/pachyderm/src/client/pps"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Op1_7 struct {
	// Types that are valid to be assigned to Op1_7:
	//	*Op1_7_Object
	//	*Op1_7_Tag
	//	*Op1_7_Repo
	//	*Op1_7_Commit
	//	*Op1_7_Branch
	//	*Op1_7_Pipeline
	Op1_7                isOp1_7_Op1_7 `protobuf_oneof:"op1_7"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Op1_7) Reset()         { *m = Op1_7{} }
func (m *Op1_7) String() string { return proto.CompactTextString(m) }
func (*Op1_7) ProtoMessage()    {}
func (*Op1_7) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{0}
}
func (m *Op1_7) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Op1_7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Op1_7.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Op1_7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Op1_7.Merge(m, src)
}
func (m *Op1_7) XXX_Size() int {
	return m.Size()
}
func (m *Op1_7) XXX_DiscardUnknown() {
	xxx_messageInfo_Op1_7.DiscardUnknown(m)
}

var xxx_messageInfo_Op1_7 proto.InternalMessageInfo

type isOp1_7_Op1_7 interface {
	isOp1_7_Op1_7()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Op1_7_Object struct {
	Object *pfs.PutObjectRequest `protobuf:"bytes,2,opt,name=object,proto3,oneof"`
}
type Op1_7_Tag struct {
	Tag *pfs.TagObjectRequest `protobuf:"bytes,3,opt,name=tag,proto3,oneof"`
}
type Op1_7_Repo struct {
	Repo *pfs.CreateRepoRequest `protobuf:"bytes,4,opt,name=repo,proto3,oneof"`
}
type Op1_7_Commit struct {
	Commit *pfs.BuildCommitRequest `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}
type Op1_7_Branch struct {
	Branch *pfs.CreateBranchRequest `protobuf:"bytes,6,opt,name=branch,proto3,oneof"`
}
type Op1_7_Pipeline struct {
	Pipeline *pps.CreatePipelineRequest `protobuf:"bytes,7,opt,name=pipeline,proto3,oneof"`
}

func (*Op1_7_Object) isOp1_7_Op1_7()   {}
func (*Op1_7_Tag) isOp1_7_Op1_7()      {}
func (*Op1_7_Repo) isOp1_7_Op1_7()     {}
func (*Op1_7_Commit) isOp1_7_Op1_7()   {}
func (*Op1_7_Branch) isOp1_7_Op1_7()   {}
func (*Op1_7_Pipeline) isOp1_7_Op1_7() {}

func (m *Op1_7) GetOp1_7() isOp1_7_Op1_7 {
	if m != nil {
		return m.Op1_7
	}
	return nil
}

func (m *Op1_7) GetObject() *pfs.PutObjectRequest {
	if x, ok := m.GetOp1_7().(*Op1_7_Object); ok {
		return x.Object
	}
	return nil
}

func (m *Op1_7) GetTag() *pfs.TagObjectRequest {
	if x, ok := m.GetOp1_7().(*Op1_7_Tag); ok {
		return x.Tag
	}
	return nil
}

func (m *Op1_7) GetRepo() *pfs.CreateRepoRequest {
	if x, ok := m.GetOp1_7().(*Op1_7_Repo); ok {
		return x.Repo
	}
	return nil
}

func (m *Op1_7) GetCommit() *pfs.BuildCommitRequest {
	if x, ok := m.GetOp1_7().(*Op1_7_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Op1_7) GetBranch() *pfs.CreateBranchRequest {
	if x, ok := m.GetOp1_7().(*Op1_7_Branch); ok {
		return x.Branch
	}
	return nil
}

func (m *Op1_7) GetPipeline() *pps.CreatePipelineRequest {
	if x, ok := m.GetOp1_7().(*Op1_7_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Op1_7) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Op1_7_OneofMarshaler, _Op1_7_OneofUnmarshaler, _Op1_7_OneofSizer, []interface{}{
		(*Op1_7_Object)(nil),
		(*Op1_7_Tag)(nil),
		(*Op1_7_Repo)(nil),
		(*Op1_7_Commit)(nil),
		(*Op1_7_Branch)(nil),
		(*Op1_7_Pipeline)(nil),
	}
}

func _Op1_7_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Op1_7)
	// op1_7
	switch x := m.Op1_7.(type) {
	case *Op1_7_Object:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Object); err != nil {
			return err
		}
	case *Op1_7_Tag:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tag); err != nil {
			return err
		}
	case *Op1_7_Repo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repo); err != nil {
			return err
		}
	case *Op1_7_Commit:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Op1_7_Branch:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Branch); err != nil {
			return err
		}
	case *Op1_7_Pipeline:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipeline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Op1_7.Op1_7 has unexpected type %T", x)
	}
	return nil
}

func _Op1_7_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Op1_7)
	switch tag {
	case 2: // op1_7.object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.PutObjectRequest)
		err := b.DecodeMessage(msg)
		m.Op1_7 = &Op1_7_Object{msg}
		return true, err
	case 3: // op1_7.tag
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.TagObjectRequest)
		err := b.DecodeMessage(msg)
		m.Op1_7 = &Op1_7_Tag{msg}
		return true, err
	case 4: // op1_7.repo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.CreateRepoRequest)
		err := b.DecodeMessage(msg)
		m.Op1_7 = &Op1_7_Repo{msg}
		return true, err
	case 5: // op1_7.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.BuildCommitRequest)
		err := b.DecodeMessage(msg)
		m.Op1_7 = &Op1_7_Commit{msg}
		return true, err
	case 6: // op1_7.branch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.CreateBranchRequest)
		err := b.DecodeMessage(msg)
		m.Op1_7 = &Op1_7_Branch{msg}
		return true, err
	case 7: // op1_7.pipeline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pps.CreatePipelineRequest)
		err := b.DecodeMessage(msg)
		m.Op1_7 = &Op1_7_Pipeline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Op1_7_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Op1_7)
	// op1_7
	switch x := m.Op1_7.(type) {
	case *Op1_7_Object:
		s := proto.Size(x.Object)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_7_Tag:
		s := proto.Size(x.Tag)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_7_Repo:
		s := proto.Size(x.Repo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_7_Commit:
		s := proto.Size(x.Commit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_7_Branch:
		s := proto.Size(x.Branch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_7_Pipeline:
		s := proto.Size(x.Pipeline)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Op1_8 struct {
	// Types that are valid to be assigned to Op1_8:
	//	*Op1_8_Object
	//	*Op1_8_Tag
	//	*Op1_8_Repo
	//	*Op1_8_Commit
	//	*Op1_8_Branch
	//	*Op1_8_Pipeline
	Op1_8                isOp1_8_Op1_8 `protobuf_oneof:"op1_8"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Op1_8) Reset()         { *m = Op1_8{} }
func (m *Op1_8) String() string { return proto.CompactTextString(m) }
func (*Op1_8) ProtoMessage()    {}
func (*Op1_8) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{1}
}
func (m *Op1_8) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Op1_8) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Op1_8.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Op1_8) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Op1_8.Merge(m, src)
}
func (m *Op1_8) XXX_Size() int {
	return m.Size()
}
func (m *Op1_8) XXX_DiscardUnknown() {
	xxx_messageInfo_Op1_8.DiscardUnknown(m)
}

var xxx_messageInfo_Op1_8 proto.InternalMessageInfo

type isOp1_8_Op1_8 interface {
	isOp1_8_Op1_8()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Op1_8_Object struct {
	Object *pfs1.PutObjectRequest `protobuf:"bytes,2,opt,name=object,proto3,oneof"`
}
type Op1_8_Tag struct {
	Tag *pfs1.TagObjectRequest `protobuf:"bytes,3,opt,name=tag,proto3,oneof"`
}
type Op1_8_Repo struct {
	Repo *pfs1.CreateRepoRequest `protobuf:"bytes,4,opt,name=repo,proto3,oneof"`
}
type Op1_8_Commit struct {
	Commit *pfs1.BuildCommitRequest `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}
type Op1_8_Branch struct {
	Branch *pfs1.CreateBranchRequest `protobuf:"bytes,6,opt,name=branch,proto3,oneof"`
}
type Op1_8_Pipeline struct {
	Pipeline *pps1.CreatePipelineRequest `protobuf:"bytes,7,opt,name=pipeline,proto3,oneof"`
}

func (*Op1_8_Object) isOp1_8_Op1_8()   {}
func (*Op1_8_Tag) isOp1_8_Op1_8()      {}
func (*Op1_8_Repo) isOp1_8_Op1_8()     {}
func (*Op1_8_Commit) isOp1_8_Op1_8()   {}
func (*Op1_8_Branch) isOp1_8_Op1_8()   {}
func (*Op1_8_Pipeline) isOp1_8_Op1_8() {}

func (m *Op1_8) GetOp1_8() isOp1_8_Op1_8 {
	if m != nil {
		return m.Op1_8
	}
	return nil
}

func (m *Op1_8) GetObject() *pfs1.PutObjectRequest {
	if x, ok := m.GetOp1_8().(*Op1_8_Object); ok {
		return x.Object
	}
	return nil
}

func (m *Op1_8) GetTag() *pfs1.TagObjectRequest {
	if x, ok := m.GetOp1_8().(*Op1_8_Tag); ok {
		return x.Tag
	}
	return nil
}

func (m *Op1_8) GetRepo() *pfs1.CreateRepoRequest {
	if x, ok := m.GetOp1_8().(*Op1_8_Repo); ok {
		return x.Repo
	}
	return nil
}

func (m *Op1_8) GetCommit() *pfs1.BuildCommitRequest {
	if x, ok := m.GetOp1_8().(*Op1_8_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Op1_8) GetBranch() *pfs1.CreateBranchRequest {
	if x, ok := m.GetOp1_8().(*Op1_8_Branch); ok {
		return x.Branch
	}
	return nil
}

func (m *Op1_8) GetPipeline() *pps1.CreatePipelineRequest {
	if x, ok := m.GetOp1_8().(*Op1_8_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Op1_8) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Op1_8_OneofMarshaler, _Op1_8_OneofUnmarshaler, _Op1_8_OneofSizer, []interface{}{
		(*Op1_8_Object)(nil),
		(*Op1_8_Tag)(nil),
		(*Op1_8_Repo)(nil),
		(*Op1_8_Commit)(nil),
		(*Op1_8_Branch)(nil),
		(*Op1_8_Pipeline)(nil),
	}
}

func _Op1_8_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Op1_8)
	// op1_8
	switch x := m.Op1_8.(type) {
	case *Op1_8_Object:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Object); err != nil {
			return err
		}
	case *Op1_8_Tag:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tag); err != nil {
			return err
		}
	case *Op1_8_Repo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repo); err != nil {
			return err
		}
	case *Op1_8_Commit:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Op1_8_Branch:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Branch); err != nil {
			return err
		}
	case *Op1_8_Pipeline:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipeline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Op1_8.Op1_8 has unexpected type %T", x)
	}
	return nil
}

func _Op1_8_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Op1_8)
	switch tag {
	case 2: // op1_8.object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs1.PutObjectRequest)
		err := b.DecodeMessage(msg)
		m.Op1_8 = &Op1_8_Object{msg}
		return true, err
	case 3: // op1_8.tag
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs1.TagObjectRequest)
		err := b.DecodeMessage(msg)
		m.Op1_8 = &Op1_8_Tag{msg}
		return true, err
	case 4: // op1_8.repo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs1.CreateRepoRequest)
		err := b.DecodeMessage(msg)
		m.Op1_8 = &Op1_8_Repo{msg}
		return true, err
	case 5: // op1_8.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs1.BuildCommitRequest)
		err := b.DecodeMessage(msg)
		m.Op1_8 = &Op1_8_Commit{msg}
		return true, err
	case 6: // op1_8.branch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs1.CreateBranchRequest)
		err := b.DecodeMessage(msg)
		m.Op1_8 = &Op1_8_Branch{msg}
		return true, err
	case 7: // op1_8.pipeline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pps1.CreatePipelineRequest)
		err := b.DecodeMessage(msg)
		m.Op1_8 = &Op1_8_Pipeline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Op1_8_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Op1_8)
	// op1_8
	switch x := m.Op1_8.(type) {
	case *Op1_8_Object:
		s := proto.Size(x.Object)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_8_Tag:
		s := proto.Size(x.Tag)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_8_Repo:
		s := proto.Size(x.Repo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_8_Commit:
		s := proto.Size(x.Commit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_8_Branch:
		s := proto.Size(x.Branch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_8_Pipeline:
		s := proto.Size(x.Pipeline)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Op1_9 struct {
	// Types that are valid to be assigned to Op1_9:
	//	*Op1_9_Object
	//	*Op1_9_Tag
	//	*Op1_9_Repo
	//	*Op1_9_Commit
	//	*Op1_9_Branch
	//	*Op1_9_Pipeline
	Op1_9                isOp1_9_Op1_9 `protobuf_oneof:"op1_9"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Op1_9) Reset()         { *m = Op1_9{} }
func (m *Op1_9) String() string { return proto.CompactTextString(m) }
func (*Op1_9) ProtoMessage()    {}
func (*Op1_9) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{2}
}
func (m *Op1_9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Op1_9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Op1_9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Op1_9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Op1_9.Merge(m, src)
}
func (m *Op1_9) XXX_Size() int {
	return m.Size()
}
func (m *Op1_9) XXX_DiscardUnknown() {
	xxx_messageInfo_Op1_9.DiscardUnknown(m)
}

var xxx_messageInfo_Op1_9 proto.InternalMessageInfo

type isOp1_9_Op1_9 interface {
	isOp1_9_Op1_9()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Op1_9_Object struct {
	Object *pfs2.PutObjectRequest `protobuf:"bytes,2,opt,name=object,proto3,oneof"`
}
type Op1_9_Tag struct {
	Tag *pfs2.TagObjectRequest `protobuf:"bytes,3,opt,name=tag,proto3,oneof"`
}
type Op1_9_Repo struct {
	Repo *pfs2.CreateRepoRequest `protobuf:"bytes,4,opt,name=repo,proto3,oneof"`
}
type Op1_9_Commit struct {
	Commit *pfs2.BuildCommitRequest `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}
type Op1_9_Branch struct {
	Branch *pfs2.CreateBranchRequest `protobuf:"bytes,6,opt,name=branch,proto3,oneof"`
}
type Op1_9_Pipeline struct {
	Pipeline *pps2.CreatePipelineRequest `protobuf:"bytes,7,opt,name=pipeline,proto3,oneof"`
}

func (*Op1_9_Object) isOp1_9_Op1_9()   {}
func (*Op1_9_Tag) isOp1_9_Op1_9()      {}
func (*Op1_9_Repo) isOp1_9_Op1_9()     {}
func (*Op1_9_Commit) isOp1_9_Op1_9()   {}
func (*Op1_9_Branch) isOp1_9_Op1_9()   {}
func (*Op1_9_Pipeline) isOp1_9_Op1_9() {}

func (m *Op1_9) GetOp1_9() isOp1_9_Op1_9 {
	if m != nil {
		return m.Op1_9
	}
	return nil
}

func (m *Op1_9) GetObject() *pfs2.PutObjectRequest {
	if x, ok := m.GetOp1_9().(*Op1_9_Object); ok {
		return x.Object
	}
	return nil
}

func (m *Op1_9) GetTag() *pfs2.TagObjectRequest {
	if x, ok := m.GetOp1_9().(*Op1_9_Tag); ok {
		return x.Tag
	}
	return nil
}

func (m *Op1_9) GetRepo() *pfs2.CreateRepoRequest {
	if x, ok := m.GetOp1_9().(*Op1_9_Repo); ok {
		return x.Repo
	}
	return nil
}

func (m *Op1_9) GetCommit() *pfs2.BuildCommitRequest {
	if x, ok := m.GetOp1_9().(*Op1_9_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Op1_9) GetBranch() *pfs2.CreateBranchRequest {
	if x, ok := m.GetOp1_9().(*Op1_9_Branch); ok {
		return x.Branch
	}
	return nil
}

func (m *Op1_9) GetPipeline() *pps2.CreatePipelineRequest {
	if x, ok := m.GetOp1_9().(*Op1_9_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Op1_9) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Op1_9_OneofMarshaler, _Op1_9_OneofUnmarshaler, _Op1_9_OneofSizer, []interface{}{
		(*Op1_9_Object)(nil),
		(*Op1_9_Tag)(nil),
		(*Op1_9_Repo)(nil),
		(*Op1_9_Commit)(nil),
		(*Op1_9_Branch)(nil),
		(*Op1_9_Pipeline)(nil),
	}
}

func _Op1_9_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Op1_9)
	// op1_9
	switch x := m.Op1_9.(type) {
	case *Op1_9_Object:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Object); err != nil {
			return err
		}
	case *Op1_9_Tag:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tag); err != nil {
			return err
		}
	case *Op1_9_Repo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repo); err != nil {
			return err
		}
	case *Op1_9_Commit:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Op1_9_Branch:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Branch); err != nil {
			return err
		}
	case *Op1_9_Pipeline:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipeline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Op1_9.Op1_9 has unexpected type %T", x)
	}
	return nil
}

func _Op1_9_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Op1_9)
	switch tag {
	case 2: // op1_9.object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs2.PutObjectRequest)
		err := b.DecodeMessage(msg)
		m.Op1_9 = &Op1_9_Object{msg}
		return true, err
	case 3: // op1_9.tag
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs2.TagObjectRequest)
		err := b.DecodeMessage(msg)
		m.Op1_9 = &Op1_9_Tag{msg}
		return true, err
	case 4: // op1_9.repo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs2.CreateRepoRequest)
		err := b.DecodeMessage(msg)
		m.Op1_9 = &Op1_9_Repo{msg}
		return true, err
	case 5: // op1_9.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs2.BuildCommitRequest)
		err := b.DecodeMessage(msg)
		m.Op1_9 = &Op1_9_Commit{msg}
		return true, err
	case 6: // op1_9.branch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs2.CreateBranchRequest)
		err := b.DecodeMessage(msg)
		m.Op1_9 = &Op1_9_Branch{msg}
		return true, err
	case 7: // op1_9.pipeline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pps2.CreatePipelineRequest)
		err := b.DecodeMessage(msg)
		m.Op1_9 = &Op1_9_Pipeline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Op1_9_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Op1_9)
	// op1_9
	switch x := m.Op1_9.(type) {
	case *Op1_9_Object:
		s := proto.Size(x.Object)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_9_Tag:
		s := proto.Size(x.Tag)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_9_Repo:
		s := proto.Size(x.Repo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_9_Commit:
		s := proto.Size(x.Commit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_9_Branch:
		s := proto.Size(x.Branch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op1_9_Pipeline:
		s := proto.Size(x.Pipeline)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Op struct {
	// Types that are valid to be assigned to Op:
	//	*Op_Op1_7
	//	*Op_Op1_8
	//	*Op_Op1_9
	Op                   isOp_Op  `protobuf_oneof:"op"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Op) Reset()         { *m = Op{} }
func (m *Op) String() string { return proto.CompactTextString(m) }
func (*Op) ProtoMessage()    {}
func (*Op) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{3}
}
func (m *Op) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Op) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Op.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Op) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Op.Merge(m, src)
}
func (m *Op) XXX_Size() int {
	return m.Size()
}
func (m *Op) XXX_DiscardUnknown() {
	xxx_messageInfo_Op.DiscardUnknown(m)
}

var xxx_messageInfo_Op proto.InternalMessageInfo

type isOp_Op interface {
	isOp_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Op_Op1_7 struct {
	Op1_7 *Op1_7 `protobuf:"bytes,1,opt,name=op1_7,json=op17,proto3,oneof"`
}
type Op_Op1_8 struct {
	Op1_8 *Op1_8 `protobuf:"bytes,2,opt,name=op1_8,json=op18,proto3,oneof"`
}
type Op_Op1_9 struct {
	Op1_9 *Op1_9 `protobuf:"bytes,3,opt,name=op1_9,json=op19,proto3,oneof"`
}

func (*Op_Op1_7) isOp_Op() {}
func (*Op_Op1_8) isOp_Op() {}
func (*Op_Op1_9) isOp_Op() {}

func (m *Op) GetOp() isOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *Op) GetOp1_7() *Op1_7 {
	if x, ok := m.GetOp().(*Op_Op1_7); ok {
		return x.Op1_7
	}
	return nil
}

func (m *Op) GetOp1_8() *Op1_8 {
	if x, ok := m.GetOp().(*Op_Op1_8); ok {
		return x.Op1_8
	}
	return nil
}

func (m *Op) GetOp1_9() *Op1_9 {
	if x, ok := m.GetOp().(*Op_Op1_9); ok {
		return x.Op1_9
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Op) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Op_OneofMarshaler, _Op_OneofUnmarshaler, _Op_OneofSizer, []interface{}{
		(*Op_Op1_7)(nil),
		(*Op_Op1_8)(nil),
		(*Op_Op1_9)(nil),
	}
}

func _Op_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Op)
	// op
	switch x := m.Op.(type) {
	case *Op_Op1_7:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Op1_7); err != nil {
			return err
		}
	case *Op_Op1_8:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Op1_8); err != nil {
			return err
		}
	case *Op_Op1_9:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Op1_9); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Op.Op has unexpected type %T", x)
	}
	return nil
}

func _Op_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Op)
	switch tag {
	case 1: // op.op1_7
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Op1_7)
		err := b.DecodeMessage(msg)
		m.Op = &Op_Op1_7{msg}
		return true, err
	case 2: // op.op1_8
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Op1_8)
		err := b.DecodeMessage(msg)
		m.Op = &Op_Op1_8{msg}
		return true, err
	case 3: // op.op1_9
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Op1_9)
		err := b.DecodeMessage(msg)
		m.Op = &Op_Op1_9{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Op_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Op)
	// op
	switch x := m.Op.(type) {
	case *Op_Op1_7:
		s := proto.Size(x.Op1_7)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op_Op1_8:
		s := proto.Size(x.Op1_8)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Op_Op1_9:
		s := proto.Size(x.Op1_9)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExtractRequest struct {
	// URL is an object storage URL, if it's not "" data will be extracted to
	// this URL rather than returned.
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	// NoObjects, if true, will cause extract to omit objects (and tags)
	NoObjects bool `protobuf:"varint,2,opt,name=no_objects,json=noObjects,proto3" json:"no_objects,omitempty"`
	// NoRepos, if true, will cause extract to omit repos, commits and branches.
	NoRepos bool `protobuf:"varint,3,opt,name=no_repos,json=noRepos,proto3" json:"no_repos,omitempty"`
	// NoPipelines, if true, will cause extract to omit pipelines.
	NoPipelines          bool     `protobuf:"varint,4,opt,name=no_pipelines,json=noPipelines,proto3" json:"no_pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtractRequest) Reset()         { *m = ExtractRequest{} }
func (m *ExtractRequest) String() string { return proto.CompactTextString(m) }
func (*ExtractRequest) ProtoMessage()    {}
func (*ExtractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{4}
}
func (m *ExtractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractRequest.Merge(m, src)
}
func (m *ExtractRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractRequest proto.InternalMessageInfo

func (m *ExtractRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *ExtractRequest) GetNoObjects() bool {
	if m != nil {
		return m.NoObjects
	}
	return false
}

func (m *ExtractRequest) GetNoRepos() bool {
	if m != nil {
		return m.NoRepos
	}
	return false
}

func (m *ExtractRequest) GetNoPipelines() bool {
	if m != nil {
		return m.NoPipelines
	}
	return false
}

type ExtractPipelineRequest struct {
	Pipeline             *pps2.Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExtractPipelineRequest) Reset()         { *m = ExtractPipelineRequest{} }
func (m *ExtractPipelineRequest) String() string { return proto.CompactTextString(m) }
func (*ExtractPipelineRequest) ProtoMessage()    {}
func (*ExtractPipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{5}
}
func (m *ExtractPipelineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtractPipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtractPipelineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtractPipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractPipelineRequest.Merge(m, src)
}
func (m *ExtractPipelineRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtractPipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractPipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractPipelineRequest proto.InternalMessageInfo

func (m *ExtractPipelineRequest) GetPipeline() *pps2.Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type RestoreRequest struct {
	Op *Op `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// URL is an object storage URL, if it's not "" data will be restored from
	// this URL.
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreRequest) Reset()         { *m = RestoreRequest{} }
func (m *RestoreRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreRequest) ProtoMessage()    {}
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{6}
}
func (m *RestoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreRequest.Merge(m, src)
}
func (m *RestoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreRequest proto.InternalMessageInfo

func (m *RestoreRequest) GetOp() *Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *RestoreRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type ClusterInfo struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6597bb2f2302afbd, []int{7}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*Op1_7)(nil), "admin.Op1_7")
	proto.RegisterType((*Op1_8)(nil), "admin.Op1_8")
	proto.RegisterType((*Op1_9)(nil), "admin.Op1_9")
	proto.RegisterType((*Op)(nil), "admin.Op")
	proto.RegisterType((*ExtractRequest)(nil), "admin.ExtractRequest")
	proto.RegisterType((*ExtractPipelineRequest)(nil), "admin.ExtractPipelineRequest")
	proto.RegisterType((*RestoreRequest)(nil), "admin.RestoreRequest")
	proto.RegisterType((*ClusterInfo)(nil), "admin.ClusterInfo")
}

func init() { proto.RegisterFile("client/admin/admin.proto", fileDescriptor_6597bb2f2302afbd) }

var fileDescriptor_6597bb2f2302afbd = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xdf, 0x6e, 0xd3, 0x3a,
	0x1c, 0xc7, 0x9b, 0x74, 0xfd, 0x33, 0x6f, 0x67, 0xe7, 0xc8, 0xda, 0x7a, 0xb2, 0xec, 0xac, 0x3b,
	0x04, 0x21, 0x6d, 0x12, 0x24, 0xeb, 0x26, 0xa8, 0x2b, 0x6d, 0x48, 0x6b, 0x99, 0x44, 0x25, 0xa4,
	0x4d, 0x11, 0xdc, 0x70, 0x13, 0xa5, 0xa9, 0x9b, 0x05, 0xb5, 0xb1, 0x89, 0x5d, 0xc4, 0xae, 0x78,
	0x0d, 0xde, 0x85, 0x17, 0xe0, 0x12, 0x89, 0x7b, 0x84, 0xca, 0x23, 0xf0, 0x02, 0x28, 0x8e, 0x9b,
	0x25, 0x41, 0x1d, 0xdb, 0x2e, 0x52, 0xb9, 0xf6, 0xf7, 0xfb, 0xfb, 0xf9, 0xfb, 0x71, 0x14, 0x03,
	0xcd, 0x1b, 0x07, 0x38, 0xe4, 0x96, 0x3b, 0x9c, 0x04, 0x61, 0xf2, 0x6b, 0xd2, 0x88, 0x70, 0x02,
	0x2b, 0xe2, 0x8f, 0xbe, 0xe5, 0x13, 0xe2, 0x8f, 0xb1, 0x25, 0x26, 0x07, 0xd3, 0x91, 0x85, 0x27,
	0x94, 0x5f, 0x26, 0x1a, 0x7d, 0xdd, 0x27, 0x3e, 0x11, 0x43, 0x2b, 0x1e, 0xc9, 0xd9, 0x9d, 0x5c,
	0xcd, 0x77, 0x2d, 0xa7, 0x6d, 0xd1, 0x11, 0x8b, 0x9f, 0x6b, 0x04, 0x94, 0xc5, 0xcf, 0x22, 0x01,
	0xfa, 0x53, 0x05, 0x54, 0xa8, 0xb0, 0x2e, 0x05, 0x79, 0x5b, 0x3a, 0x9b, 0xd5, 0x1a, 0x5f, 0x55,
	0x50, 0x39, 0xa3, 0x2d, 0xa7, 0x0d, 0x0f, 0x41, 0x95, 0x0c, 0xde, 0x60, 0x8f, 0x6b, 0xea, 0xff,
	0xca, 0xee, 0xca, 0xc1, 0xa6, 0x49, 0x47, 0xcc, 0x69, 0x39, 0x6d, 0xf3, 0x7c, 0xca, 0xcf, 0xc4,
	0x8a, 0x8d, 0xdf, 0x4e, 0x31, 0xe3, 0xcf, 0x4b, 0xb6, 0x94, 0xc2, 0x47, 0xa0, 0xcc, 0x5d, 0x5f,
	0x2b, 0x17, 0x1c, 0x2f, 0x5d, 0xbf, 0xe8, 0x88, 0x75, 0x70, 0x1f, 0x2c, 0x45, 0x98, 0x12, 0x6d,
	0x49, 0xe8, 0xf5, 0x54, 0xdf, 0x8b, 0xb0, 0xcb, 0xb1, 0x8d, 0x29, 0xb9, 0x32, 0x08, 0x25, 0x7c,
	0x0c, 0xaa, 0x1e, 0x99, 0x4c, 0x02, 0xae, 0x55, 0x84, 0x67, 0x2b, 0xf5, 0x74, 0xa7, 0xc1, 0x78,
	0xd8, 0x13, 0x6b, 0x99, 0x7d, 0x25, 0x62, 0xf8, 0x04, 0x54, 0x07, 0x91, 0x1b, 0x7a, 0x17, 0x5a,
	0x55, 0xd8, 0xfe, 0x2b, 0xb4, 0xea, 0x8a, 0xc5, 0x8c, 0x2f, 0x51, 0xc3, 0x23, 0x50, 0xa7, 0x01,
	0xc5, 0xe3, 0x20, 0xc4, 0x5a, 0x4d, 0x38, 0x9b, 0x26, 0xa5, 0x59, 0xe7, 0xb9, 0x5c, 0xbe, 0xf2,
	0xa6, 0x8e, 0x6e, 0x0d, 0x54, 0x48, 0xcc, 0x32, 0xa5, 0x8a, 0x16, 0x52, 0x45, 0xb7, 0xa6, 0x8a,
	0x6e, 0x49, 0x15, 0xdd, 0x81, 0x2a, 0xba, 0x1b, 0x55, 0x74, 0x67, 0xaa, 0xe8, 0xe6, 0x54, 0x91,
	0xf1, 0x49, 0x52, 0xed, 0x40, 0xab, 0x40, 0x75, 0x23, 0xde, 0xc8, 0x75, 0x44, 0xf7, 0xb2, 0x44,
	0x13, 0xf5, 0x22, 0x9a, 0x0f, 0x73, 0x34, 0x1b, 0x42, 0xbb, 0x98, 0x64, 0xab, 0x40, 0xf2, 0x5f,
	0xa1, 0xbf, 0x96, 0xe2, 0x41, 0x81, 0xa2, 0x96, 0x69, 0xb1, 0x88, 0x20, 0xfa, 0x8d, 0xa0, 0x1e,
	0x13, 0xbc, 0x39, 0xbd, 0x8e, 0x71, 0x09, 0xd4, 0x33, 0x0a, 0xef, 0xcb, 0x57, 0x54, 0x53, 0x44,
	0x95, 0x55, 0x33, 0xf9, 0xec, 0x89, 0x4f, 0x40, 0x1c, 0x8a, 0xd0, 0x56, 0x7b, 0x2e, 0x42, 0x92,
	0x6e, 0x56, 0x84, 0xa4, 0x08, 0xcd, 0x45, 0x1d, 0x09, 0x35, 0x2b, 0xea, 0x48, 0x51, 0xa7, 0xbb,
	0x04, 0x54, 0x42, 0x8d, 0x0f, 0x60, 0xed, 0xf4, 0x3d, 0x8f, 0xdc, 0x94, 0x35, 0xfc, 0x07, 0x94,
	0x5f, 0xd9, 0x2f, 0xc4, 0x26, 0x96, 0xed, 0x78, 0x08, 0xb7, 0x01, 0x08, 0x89, 0x93, 0x1c, 0x17,
	0x13, 0x8d, 0xeb, 0xf6, 0x72, 0x48, 0x92, 0x23, 0x62, 0x70, 0x13, 0xd4, 0x43, 0xe2, 0xc4, 0xc8,
	0x99, 0x68, 0x58, 0xb7, 0x6b, 0x21, 0x89, 0x0f, 0x84, 0xc1, 0x7b, 0x60, 0x35, 0x24, 0xce, 0x3c,
	0x30, 0x13, 0x07, 0x57, 0xb7, 0x57, 0x42, 0x32, 0xc7, 0xc2, 0x8c, 0x1e, 0x68, 0xc8, 0x0d, 0x14,
	0x50, 0xc1, 0xbd, 0x0c, 0xd8, 0x04, 0xc9, 0x5f, 0x02, 0x6c, 0xaa, 0x4b, 0x97, 0x8d, 0x63, 0xb0,
	0x66, 0x63, 0xc6, 0x49, 0x94, 0x9a, 0x37, 0xe3, 0x74, 0xd2, 0xb6, 0x9c, 0xe6, 0xb7, 0x55, 0x42,
	0xe7, 0x01, 0xd5, 0x34, 0xa0, 0xf1, 0x00, 0xac, 0xf4, 0xc6, 0x53, 0xc6, 0x71, 0xd4, 0x0f, 0x47,
	0x04, 0x36, 0x80, 0x1a, 0x0c, 0x13, 0x00, 0xdd, 0xea, 0xec, 0xdb, 0x8e, 0xda, 0x7f, 0x66, 0xab,
	0xc1, 0xf0, 0xe0, 0xa7, 0x02, 0xca, 0x27, 0xe7, 0x7d, 0x68, 0x81, 0x9a, 0xdc, 0x32, 0xdc, 0x90,
	0xa5, 0xf3, 0x0c, 0xf5, 0xab, 0x8e, 0x46, 0x69, 0x5f, 0x81, 0xc7, 0xe0, 0xef, 0x42, 0x46, 0xb8,
	0x9d, 0x37, 0x16, 0xb2, 0xe7, 0x0a, 0xc0, 0x23, 0x50, 0x93, 0xe9, 0xd2, 0x7e, 0xf9, 0xb4, 0x7a,
	0xc3, 0x4c, 0xae, 0x43, 0x73, 0x7e, 0x1d, 0x9a, 0xa7, 0xf1, 0x75, 0x68, 0x94, 0x76, 0x15, 0xf8,
	0x14, 0xac, 0xf5, 0x43, 0x46, 0xb1, 0xc7, 0x65, 0x46, 0xb8, 0x40, 0xad, 0x43, 0x59, 0x3c, 0xc3,
	0xc2, 0x28, 0x75, 0x4f, 0x3e, 0xcf, 0x9a, 0xca, 0x97, 0x59, 0x53, 0xf9, 0x3e, 0x6b, 0x2a, 0x1f,
	0x7f, 0x34, 0x4b, 0xaf, 0x2d, 0x3f, 0xe0, 0x17, 0xd3, 0x81, 0xe9, 0x91, 0x89, 0x45, 0x5d, 0xef,
	0xe2, 0x72, 0x88, 0xa3, 0xec, 0x88, 0x45, 0x9e, 0x95, 0xbd, 0x08, 0x07, 0x55, 0xd1, 0xe8, 0xf0,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x6f, 0x87, 0xa9, 0xd6, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (API_ExtractClient, error)
	ExtractPipeline(ctx context.Context, in *ExtractPipelineRequest, opts ...grpc.CallOption) (*Op, error)
	Restore(ctx context.Context, opts ...grpc.CallOption) (API_RestoreClient, error)
	InspectCluster(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ClusterInfo, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (API_ExtractClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/admin.API/Extract", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIExtractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ExtractClient interface {
	Recv() (*Op, error)
	grpc.ClientStream
}

type aPIExtractClient struct {
	grpc.ClientStream
}

func (x *aPIExtractClient) Recv() (*Op, error) {
	m := new(Op)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ExtractPipeline(ctx context.Context, in *ExtractPipelineRequest, opts ...grpc.CallOption) (*Op, error) {
	out := new(Op)
	err := c.cc.Invoke(ctx, "/admin.API/ExtractPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Restore(ctx context.Context, opts ...grpc.CallOption) (API_RestoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/admin.API/Restore", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIRestoreClient{stream}
	return x, nil
}

type API_RestoreClient interface {
	Send(*RestoreRequest) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type aPIRestoreClient struct {
	grpc.ClientStream
}

func (x *aPIRestoreClient) Send(m *RestoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIRestoreClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) InspectCluster(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/admin.API/InspectCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Extract(*ExtractRequest, API_ExtractServer) error
	ExtractPipeline(context.Context, *ExtractPipelineRequest) (*Op, error)
	Restore(API_RestoreServer) error
	InspectCluster(context.Context, *types.Empty) (*ClusterInfo, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Extract(req *ExtractRequest, srv API_ExtractServer) error {
	return status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (*UnimplementedAPIServer) ExtractPipeline(ctx context.Context, req *ExtractPipelineRequest) (*Op, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractPipeline not implemented")
}
func (*UnimplementedAPIServer) Restore(srv API_RestoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedAPIServer) InspectCluster(ctx context.Context, req *types.Empty) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectCluster not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Extract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExtractRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Extract(m, &aPIExtractServer{stream})
}

type API_ExtractServer interface {
	Send(*Op) error
	grpc.ServerStream
}

type aPIExtractServer struct {
	grpc.ServerStream
}

func (x *aPIExtractServer) Send(m *Op) error {
	return x.ServerStream.SendMsg(m)
}

func _API_ExtractPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ExtractPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.API/ExtractPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ExtractPipeline(ctx, req.(*ExtractPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Restore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Restore(&aPIRestoreServer{stream})
}

type API_RestoreServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*RestoreRequest, error)
	grpc.ServerStream
}

type aPIRestoreServer struct {
	grpc.ServerStream
}

func (x *aPIRestoreServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIRestoreServer) Recv() (*RestoreRequest, error) {
	m := new(RestoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_InspectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.API/InspectCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectCluster(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractPipeline",
			Handler:    _API_ExtractPipeline_Handler,
		},
		{
			MethodName: "InspectCluster",
			Handler:    _API_InspectCluster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Extract",
			Handler:       _API_Extract_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Restore",
			Handler:       _API_Restore_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client/admin/admin.proto",
}

func (m *Op1_7) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op1_7) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Op1_7) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Op1_7 != nil {
		{
			size := m.Op1_7.Size()
			i -= size
			if _, err := m.Op1_7.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Op1_7_Object) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_7_Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Op1_7_Tag) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_7_Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_7_Repo) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_7_Repo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Repo != nil {
		{
			size, err := m.Repo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Op1_7_Commit) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_7_Commit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_7_Branch) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_7_Branch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Branch != nil {
		{
			size, err := m.Branch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Op1_7_Pipeline) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_7_Pipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pipeline != nil {
		{
			size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_8) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op1_8) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Op1_8) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Op1_8 != nil {
		{
			size := m.Op1_8.Size()
			i -= size
			if _, err := m.Op1_8.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Op1_8_Object) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_8_Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Op1_8_Tag) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_8_Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_8_Repo) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_8_Repo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Repo != nil {
		{
			size, err := m.Repo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Op1_8_Commit) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_8_Commit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_8_Branch) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_8_Branch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Branch != nil {
		{
			size, err := m.Branch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Op1_8_Pipeline) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_8_Pipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pipeline != nil {
		{
			size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op1_9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Op1_9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Op1_9 != nil {
		{
			size := m.Op1_9.Size()
			i -= size
			if _, err := m.Op1_9.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Op1_9_Object) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_9_Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Op1_9_Tag) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_9_Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_9_Repo) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_9_Repo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Repo != nil {
		{
			size, err := m.Repo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Op1_9_Commit) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_9_Commit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Op1_9_Branch) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_9_Branch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Branch != nil {
		{
			size, err := m.Branch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Op1_9_Pipeline) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op1_9_Pipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pipeline != nil {
		{
			size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Op) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Op) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Op != nil {
		{
			size := m.Op.Size()
			i -= size
			if _, err := m.Op.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Op_Op1_7) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op_Op1_7) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Op1_7 != nil {
		{
			size, err := m.Op1_7.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Op_Op1_8) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op_Op1_8) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Op1_8 != nil {
		{
			size, err := m.Op1_8.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Op_Op1_9) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Op_Op1_9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Op1_9 != nil {
		{
			size, err := m.Op1_9.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ExtractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoPipelines {
		i--
		if m.NoPipelines {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NoRepos {
		i--
		if m.NoRepos {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoObjects {
		i--
		if m.NoObjects {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtractPipelineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractPipelineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtractPipelineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pipeline != nil {
		{
			size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != nil {
		{
			size, err := m.Op.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Op1_7) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op1_7 != nil {
		n += m.Op1_7.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Op1_7_Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_7_Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_7_Repo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_7_Commit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_7_Branch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_7_Pipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op1_8 != nil {
		n += m.Op1_8.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Op1_8_Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_8_Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_8_Repo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_8_Commit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_8_Branch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_8_Pipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op1_9 != nil {
		n += m.Op1_9.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Op1_9_Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_9_Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_9_Repo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_9_Commit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_9_Branch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op1_9_Pipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Op_Op1_7) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op1_7 != nil {
		l = m.Op1_7.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op_Op1_8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op1_8 != nil {
		l = m.Op1_8.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *Op_Op1_9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op1_9 != nil {
		l = m.Op1_9.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *ExtractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.NoObjects {
		n += 2
	}
	if m.NoRepos {
		n += 2
	}
	if m.NoPipelines {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtractPipelineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RestoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		l = m.Op.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Op1_7) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op1_7: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op1_7: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs.PutObjectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_7 = &Op1_7_Object{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs.TagObjectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_7 = &Op1_7_Tag{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs.CreateRepoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_7 = &Op1_7_Repo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs.BuildCommitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_7 = &Op1_7_Commit{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs.CreateBranchRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_7 = &Op1_7_Branch{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pps.CreatePipelineRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_7 = &Op1_7_Pipeline{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Op1_8) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op1_8: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op1_8: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs1.PutObjectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_8 = &Op1_8_Object{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs1.TagObjectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_8 = &Op1_8_Tag{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs1.CreateRepoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_8 = &Op1_8_Repo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs1.BuildCommitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_8 = &Op1_8_Commit{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs1.CreateBranchRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_8 = &Op1_8_Branch{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pps1.CreatePipelineRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_8 = &Op1_8_Pipeline{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Op1_9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op1_9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op1_9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs2.PutObjectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_9 = &Op1_9_Object{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs2.TagObjectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_9 = &Op1_9_Tag{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs2.CreateRepoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_9 = &Op1_9_Repo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs2.BuildCommitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_9 = &Op1_9_Commit{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pfs2.CreateBranchRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_9 = &Op1_9_Branch{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pps2.CreatePipelineRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op1_9 = &Op1_9_Pipeline{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Op) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op1_7", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Op1_7{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Op_Op1_7{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op1_8", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Op1_8{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Op_Op1_8{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op1_9", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Op1_9{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Op_Op1_9{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoObjects", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoObjects = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRepos", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoRepos = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPipelines", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoPipelines = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtractPipelineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractPipelineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractPipelineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pipeline == nil {
				m.Pipeline = &pps2.Pipeline{}
			}
			if err := m.Pipeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Op == nil {
				m.Op = &Op{}
			}
			if err := m.Op.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAdmin
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin   = fmt.Errorf("proto: integer overflow")
)
