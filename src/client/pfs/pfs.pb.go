// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: client/pfs/pfs.proto

package pfs

import (
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	auth "github.com/pachyderm/pachyderm/src/client/auth"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// These are the different places where a commit may be originated from
type OriginKind int32

const (
	OriginKind_USER OriginKind = 0
	OriginKind_AUTO OriginKind = 1
	OriginKind_FSCK OriginKind = 2
)

// Enum value maps for OriginKind.
var (
	OriginKind_name = map[int32]string{
		0: "USER",
		1: "AUTO",
		2: "FSCK",
	}
	OriginKind_value = map[string]int32{
		"USER": 0,
		"AUTO": 1,
		"FSCK": 2,
	}
)

func (x OriginKind) Enum() *OriginKind {
	p := new(OriginKind)
	*p = x
	return p
}

func (x OriginKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginKind) Descriptor() protoreflect.EnumDescriptor {
	return file_client_pfs_pfs_proto_enumTypes[0].Descriptor()
}

func (OriginKind) Type() protoreflect.EnumType {
	return &file_client_pfs_pfs_proto_enumTypes[0]
}

func (x OriginKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginKind.Descriptor instead.
func (OriginKind) EnumDescriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{0}
}

type FileType int32

const (
	FileType_RESERVED FileType = 0
	FileType_FILE     FileType = 1
	FileType_DIR      FileType = 2
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "RESERVED",
		1: "FILE",
		2: "DIR",
	}
	FileType_value = map[string]int32{
		"RESERVED": 0,
		"FILE":     1,
		"DIR":      2,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_pfs_pfs_proto_enumTypes[1].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_client_pfs_pfs_proto_enumTypes[1]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{1}
}

// CommitState describes the states a commit can be in.
// The states are increasingly specific, i.e. a commit that is FINISHED also counts as STARTED.
type CommitState int32

const (
	CommitState_STARTED  CommitState = 0 // The commit has been started, all commits satisfy this state.
	CommitState_READY    CommitState = 1 // The commit has been started, and all of its provenant commits have been finished.
	CommitState_FINISHED CommitState = 2 // The commit has been finished.
)

// Enum value maps for CommitState.
var (
	CommitState_name = map[int32]string{
		0: "STARTED",
		1: "READY",
		2: "FINISHED",
	}
	CommitState_value = map[string]int32{
		"STARTED":  0,
		"READY":    1,
		"FINISHED": 2,
	}
)

func (x CommitState) Enum() *CommitState {
	p := new(CommitState)
	*p = x
	return p
}

func (x CommitState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitState) Descriptor() protoreflect.EnumDescriptor {
	return file_client_pfs_pfs_proto_enumTypes[2].Descriptor()
}

func (CommitState) Type() protoreflect.EnumType {
	return &file_client_pfs_pfs_proto_enumTypes[2]
}

func (x CommitState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitState.Descriptor instead.
func (CommitState) EnumDescriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{2}
}

type Delimiter int32

const (
	Delimiter_NONE Delimiter = 0
	Delimiter_JSON Delimiter = 1
	Delimiter_LINE Delimiter = 2
	Delimiter_SQL  Delimiter = 3
	Delimiter_CSV  Delimiter = 4
)

// Enum value maps for Delimiter.
var (
	Delimiter_name = map[int32]string{
		0: "NONE",
		1: "JSON",
		2: "LINE",
		3: "SQL",
		4: "CSV",
	}
	Delimiter_value = map[string]int32{
		"NONE": 0,
		"JSON": 1,
		"LINE": 2,
		"SQL":  3,
		"CSV":  4,
	}
)

func (x Delimiter) Enum() *Delimiter {
	p := new(Delimiter)
	*p = x
	return p
}

func (x Delimiter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Delimiter) Descriptor() protoreflect.EnumDescriptor {
	return file_client_pfs_pfs_proto_enumTypes[3].Descriptor()
}

func (Delimiter) Type() protoreflect.EnumType {
	return &file_client_pfs_pfs_proto_enumTypes[3]
}

func (x Delimiter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Delimiter.Descriptor instead.
func (Delimiter) EnumDescriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{3}
}

type Repo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Repo) Reset() {
	*x = Repo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repo) ProtoMessage() {}

func (x *Repo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repo.ProtoReflect.Descriptor instead.
func (*Repo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{0}
}

func (x *Repo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *Repo  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{1}
}

func (x *Branch) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BranchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch           *Branch   `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Head             *Commit   `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	Provenance       []*Branch `protobuf:"bytes,3,rep,name=provenance,proto3" json:"provenance,omitempty"`
	Subvenance       []*Branch `protobuf:"bytes,5,rep,name=subvenance,proto3" json:"subvenance,omitempty"`
	DirectProvenance []*Branch `protobuf:"bytes,6,rep,name=direct_provenance,json=directProvenance,proto3" json:"direct_provenance,omitempty"`
	// Deprecated field left for backward compatibility.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BranchInfo) Reset() {
	*x = BranchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchInfo) ProtoMessage() {}

func (x *BranchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchInfo.ProtoReflect.Descriptor instead.
func (*BranchInfo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{2}
}

func (x *BranchInfo) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *BranchInfo) GetHead() *Commit {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *BranchInfo) GetProvenance() []*Branch {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *BranchInfo) GetSubvenance() []*Branch {
	if x != nil {
		return x.Subvenance
	}
	return nil
}

func (x *BranchInfo) GetDirectProvenance() []*Branch {
	if x != nil {
		return x.DirectProvenance
	}
	return nil
}

func (x *BranchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BranchInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchInfo []*BranchInfo `protobuf:"bytes,1,rep,name=branch_info,json=branchInfo,proto3" json:"branch_info,omitempty"`
}

func (x *BranchInfos) Reset() {
	*x = BranchInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchInfos) ProtoMessage() {}

func (x *BranchInfos) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchInfos.ProtoReflect.Descriptor instead.
func (*BranchInfos) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{3}
}

func (x *BranchInfos) GetBranchInfo() []*BranchInfo {
	if x != nil {
		return x.BranchInfo
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{4}
}

func (x *File) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{5}
}

func (x *Block) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{6}
}

func (x *Object) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{7}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RepoInfo is the main data structure representing a Repo in etcd
type RepoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo        *Repo                `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Created     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	SizeBytes   uint64               `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Description string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Branches    []*Branch            `protobuf:"bytes,7,rep,name=branches,proto3" json:"branches,omitempty"`
	// Set by ListRepo and InspectRepo if Pachyderm's auth system is active, but
	// not stored in etcd. To set a user's auth scope for a repo, use the
	// Pachyderm Auth API (in src/client/auth/auth.proto)
	AuthInfo *RepoAuthInfo `protobuf:"bytes,6,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
}

func (x *RepoInfo) Reset() {
	*x = RepoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoInfo) ProtoMessage() {}

func (x *RepoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoInfo.ProtoReflect.Descriptor instead.
func (*RepoInfo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{8}
}

func (x *RepoInfo) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *RepoInfo) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RepoInfo) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *RepoInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RepoInfo) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *RepoInfo) GetAuthInfo() *RepoAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

// RepoAuthInfo includes the caller's access scope for a repo, and is returned
// by ListRepo and InspectRepo but not persisted in etcd. It's used by the
// Pachyderm dashboard to render repo access appropriately. To set a user's auth
// scope for a repo, use the Pachyderm Auth API (in src/client/auth/auth.proto)
type RepoAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The callers access level to the relevant repo (e.g. may be OWNER even if
	// the user isn't an OWNER of the repo, if they're an admin for the cluster)
	AccessLevel auth.Scope `protobuf:"varint,1,opt,name=access_level,json=accessLevel,proto3,enum=auth.Scope" json:"access_level,omitempty"`
}

func (x *RepoAuthInfo) Reset() {
	*x = RepoAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAuthInfo) ProtoMessage() {}

func (x *RepoAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAuthInfo.ProtoReflect.Descriptor instead.
func (*RepoAuthInfo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{9}
}

func (x *RepoAuthInfo) GetAccessLevel() auth.Scope {
	if x != nil {
		return x.AccessLevel
	}
	return auth.Scope_NONE
}

type CommitOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind OriginKind `protobuf:"varint,1,opt,name=kind,proto3,enum=pfs.OriginKind" json:"kind,omitempty"`
}

func (x *CommitOrigin) Reset() {
	*x = CommitOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrigin) ProtoMessage() {}

func (x *CommitOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrigin.ProtoReflect.Descriptor instead.
func (*CommitOrigin) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{10}
}

func (x *CommitOrigin) GetKind() OriginKind {
	if x != nil {
		return x.Kind
	}
	return OriginKind_USER
}

// Commit is a reference to a commit (e.g. the collection of branches and the
// collection of currently-open commits in etcd are collections of Commit
// protos)
type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *Repo  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{11}
}

func (x *Commit) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *Commit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// CommitRange represents chain of commits with Lower being an ancestor of
// Upper or, in the case of a range of size 1, the same commit.
type CommitRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower *Commit `protobuf:"bytes,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper *Commit `protobuf:"bytes,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *CommitRange) Reset() {
	*x = CommitRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRange) ProtoMessage() {}

func (x *CommitRange) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRange.ProtoReflect.Descriptor instead.
func (*CommitRange) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{12}
}

func (x *CommitRange) GetLower() *Commit {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *CommitRange) GetUpper() *Commit {
	if x != nil {
		return x.Upper
	}
	return nil
}

// CommitProvenance keeps track of where (i.e. which branch) a certain commit
// originated from. A commit's provenance consists of the commits of
// the commits which are in its causal history.
type CommitProvenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Branch *Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *CommitProvenance) Reset() {
	*x = CommitProvenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitProvenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitProvenance) ProtoMessage() {}

func (x *CommitProvenance) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitProvenance.ProtoReflect.Descriptor instead.
func (*CommitProvenance) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{13}
}

func (x *CommitProvenance) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *CommitProvenance) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

// CommitInfo is the main data structure representing a commit in etcd
type CommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit       `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Branch *Branch       `protobuf:"bytes,15,opt,name=branch,proto3" json:"branch,omitempty"`
	Origin *CommitOrigin `protobuf:"bytes,17,opt,name=origin,proto3" json:"origin,omitempty"`
	// description is a user-provided script describing this commit
	Description  string               `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	ParentCommit *Commit              `protobuf:"bytes,2,opt,name=parent_commit,json=parentCommit,proto3" json:"parent_commit,omitempty"`
	ChildCommits []*Commit            `protobuf:"bytes,11,rep,name=child_commits,json=childCommits,proto3" json:"child_commits,omitempty"`
	Started      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	Finished     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=finished,proto3" json:"finished,omitempty"`
	SizeBytes    uint64               `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// the commits and their original branches on which this commit is provenant
	Provenance []*CommitProvenance `protobuf:"bytes,16,rep,name=provenance,proto3" json:"provenance,omitempty"`
	// ReadyProvenance is the number of provenant commits which have been
	// finished, if ReadyProvenance == len(Provenance) then the commit is ready
	// to be processed by pps.
	ReadyProvenance int64          `protobuf:"varint,12,opt,name=ready_provenance,json=readyProvenance,proto3" json:"ready_provenance,omitempty"`
	Subvenance      []*CommitRange `protobuf:"bytes,9,rep,name=subvenance,proto3" json:"subvenance,omitempty"`
	// this is the block that stores the serialized form of a tree that
	// represents the entire file system hierarchy of the repo at this commit
	// If this is nil, then the commit is either open (in which case 'finished'
	// will also be nil) or is the output commit of a failed job (in which case
	// 'finished' will have a value -- the end time of the job)
	Tree                    *Object   `protobuf:"bytes,7,opt,name=tree,proto3" json:"tree,omitempty"`
	Trees                   []*Object `protobuf:"bytes,13,rep,name=trees,proto3" json:"trees,omitempty"`
	Datums                  *Object   `protobuf:"bytes,14,opt,name=datums,proto3" json:"datums,omitempty"`
	SubvenantCommitsSuccess int64     `protobuf:"varint,18,opt,name=subvenant_commits_success,json=subvenantCommitsSuccess,proto3" json:"subvenant_commits_success,omitempty"`
	SubvenantCommitsFailure int64     `protobuf:"varint,19,opt,name=subvenant_commits_failure,json=subvenantCommitsFailure,proto3" json:"subvenant_commits_failure,omitempty"`
	SubvenantCommitsTotal   int64     `protobuf:"varint,20,opt,name=subvenant_commits_total,json=subvenantCommitsTotal,proto3" json:"subvenant_commits_total,omitempty"`
}

func (x *CommitInfo) Reset() {
	*x = CommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfo) ProtoMessage() {}

func (x *CommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfo.ProtoReflect.Descriptor instead.
func (*CommitInfo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{14}
}

func (x *CommitInfo) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *CommitInfo) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *CommitInfo) GetOrigin() *CommitOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CommitInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommitInfo) GetParentCommit() *Commit {
	if x != nil {
		return x.ParentCommit
	}
	return nil
}

func (x *CommitInfo) GetChildCommits() []*Commit {
	if x != nil {
		return x.ChildCommits
	}
	return nil
}

func (x *CommitInfo) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *CommitInfo) GetFinished() *timestamp.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *CommitInfo) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *CommitInfo) GetProvenance() []*CommitProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *CommitInfo) GetReadyProvenance() int64 {
	if x != nil {
		return x.ReadyProvenance
	}
	return 0
}

func (x *CommitInfo) GetSubvenance() []*CommitRange {
	if x != nil {
		return x.Subvenance
	}
	return nil
}

func (x *CommitInfo) GetTree() *Object {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *CommitInfo) GetTrees() []*Object {
	if x != nil {
		return x.Trees
	}
	return nil
}

func (x *CommitInfo) GetDatums() *Object {
	if x != nil {
		return x.Datums
	}
	return nil
}

func (x *CommitInfo) GetSubvenantCommitsSuccess() int64 {
	if x != nil {
		return x.SubvenantCommitsSuccess
	}
	return 0
}

func (x *CommitInfo) GetSubvenantCommitsFailure() int64 {
	if x != nil {
		return x.SubvenantCommitsFailure
	}
	return 0
}

func (x *CommitInfo) GetSubvenantCommitsTotal() int64 {
	if x != nil {
		return x.SubvenantCommitsTotal
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File      *File                `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	FileType  FileType             `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes uint64               `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Committed *timestamp.Timestamp `protobuf:"bytes,10,opt,name=committed,proto3" json:"committed,omitempty"`
	// the base names (i.e. just the filenames, not the full paths) of
	// the children
	Children  []string    `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	Objects   []*Object   `protobuf:"bytes,8,rep,name=objects,proto3" json:"objects,omitempty"`
	BlockRefs []*BlockRef `protobuf:"bytes,9,rep,name=blockRefs,proto3" json:"blockRefs,omitempty"`
	Hash      []byte      `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{15}
}

func (x *FileInfo) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileInfo) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_RESERVED
}

func (x *FileInfo) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FileInfo) GetCommitted() *timestamp.Timestamp {
	if x != nil {
		return x.Committed
	}
	return nil
}

func (x *FileInfo) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *FileInfo) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *FileInfo) GetBlockRefs() []*BlockRef {
	if x != nil {
		return x.BlockRefs
	}
	return nil
}

func (x *FileInfo) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ByteRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower uint64 `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper uint64 `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *ByteRange) Reset() {
	*x = ByteRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteRange) ProtoMessage() {}

func (x *ByteRange) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteRange.ProtoReflect.Descriptor instead.
func (*ByteRange) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{16}
}

func (x *ByteRange) GetLower() uint64 {
	if x != nil {
		return x.Lower
	}
	return 0
}

func (x *ByteRange) GetUpper() uint64 {
	if x != nil {
		return x.Upper
	}
	return 0
}

type BlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block     `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Range *ByteRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *BlockRef) Reset() {
	*x = BlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRef) ProtoMessage() {}

func (x *BlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRef.ProtoReflect.Descriptor instead.
func (*BlockRef) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{17}
}

func (x *BlockRef) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockRef) GetRange() *ByteRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type ObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object   *Object   `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	BlockRef *BlockRef `protobuf:"bytes,2,opt,name=block_ref,json=blockRef,proto3" json:"block_ref,omitempty"`
}

func (x *ObjectInfo) Reset() {
	*x = ObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInfo) ProtoMessage() {}

func (x *ObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInfo.ProtoReflect.Descriptor instead.
func (*ObjectInfo) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{18}
}

func (x *ObjectInfo) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ObjectInfo) GetBlockRef() *BlockRef {
	if x != nil {
		return x.BlockRef
	}
	return nil
}

type Compaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputPrefixes []string `protobuf:"bytes,2,rep,name=input_prefixes,json=inputPrefixes,proto3" json:"input_prefixes,omitempty"`
}

func (x *Compaction) Reset() {
	*x = Compaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compaction) ProtoMessage() {}

func (x *Compaction) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compaction.ProtoReflect.Descriptor instead.
func (*Compaction) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{19}
}

func (x *Compaction) GetInputPrefixes() []string {
	if x != nil {
		return x.InputPrefixes
	}
	return nil
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compaction *Compaction `protobuf:"bytes,1,opt,name=compaction,proto3" json:"compaction,omitempty"`
	Range      *PathRange  `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	OutputPath string      `protobuf:"bytes,3,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{20}
}

func (x *Shard) GetCompaction() *Compaction {
	if x != nil {
		return x.Compaction
	}
	return nil
}

func (x *Shard) GetRange() *PathRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Shard) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

type PathRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower string `protobuf:"bytes,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper string `protobuf:"bytes,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *PathRange) Reset() {
	*x = PathRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathRange) ProtoMessage() {}

func (x *PathRange) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathRange.ProtoReflect.Descriptor instead.
func (*PathRange) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{21}
}

func (x *PathRange) GetLower() string {
	if x != nil {
		return x.Lower
	}
	return ""
}

func (x *PathRange) GetUpper() string {
	if x != nil {
		return x.Upper
	}
	return ""
}

type CreateRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo        *Repo  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Update      bool   `protobuf:"varint,4,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *CreateRepoRequest) Reset() {
	*x = CreateRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepoRequest) ProtoMessage() {}

func (x *CreateRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepoRequest.ProtoReflect.Descriptor instead.
func (*CreateRepoRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{22}
}

func (x *CreateRepoRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *CreateRepoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRepoRequest) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

type InspectRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *Repo `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *InspectRepoRequest) Reset() {
	*x = InspectRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectRepoRequest) ProtoMessage() {}

func (x *InspectRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectRepoRequest.ProtoReflect.Descriptor instead.
func (*InspectRepoRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{23}
}

func (x *InspectRepoRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

type ListRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRepoRequest) Reset() {
	*x = ListRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoRequest) ProtoMessage() {}

func (x *ListRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoRequest.ProtoReflect.Descriptor instead.
func (*ListRepoRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{24}
}

type ListRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info,json=repoInfo,proto3" json:"repo_info,omitempty"`
}

func (x *ListRepoResponse) Reset() {
	*x = ListRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoResponse) ProtoMessage() {}

func (x *ListRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoResponse.ProtoReflect.Descriptor instead.
func (*ListRepoResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{25}
}

func (x *ListRepoResponse) GetRepoInfo() []*RepoInfo {
	if x != nil {
		return x.RepoInfo
	}
	return nil
}

type DeleteRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo  *Repo `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Force bool  `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	All   bool  `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *DeleteRepoRequest) Reset() {
	*x = DeleteRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepoRequest) ProtoMessage() {}

func (x *DeleteRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepoRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteRepoRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *DeleteRepoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeleteRepoRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type StartCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent.ID may be empty in which case the commit that Branch points to will be used as the parent.
	// If branch is empty, or if branch does not exist, the commit will have no parent.
	Parent *Commit `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// description is a user-provided string describing this commit
	Description string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Branch      string              `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Provenance  []*CommitProvenance `protobuf:"bytes,5,rep,name=provenance,proto3" json:"provenance,omitempty"`
}

func (x *StartCommitRequest) Reset() {
	*x = StartCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCommitRequest) ProtoMessage() {}

func (x *StartCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCommitRequest.ProtoReflect.Descriptor instead.
func (*StartCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{27}
}

func (x *StartCommitRequest) GetParent() *Commit {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *StartCommitRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *StartCommitRequest) GetProvenance() []*CommitProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type BuildCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     *Commit             `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Branch     string              `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Origin     *CommitOrigin       `protobuf:"bytes,12,opt,name=origin,proto3" json:"origin,omitempty"`
	Provenance []*CommitProvenance `protobuf:"bytes,6,rep,name=provenance,proto3" json:"provenance,omitempty"`
	Tree       *Object             `protobuf:"bytes,3,opt,name=tree,proto3" json:"tree,omitempty"`
	Trees      []*Object           `protobuf:"bytes,7,rep,name=trees,proto3" json:"trees,omitempty"`
	Datums     *Object             `protobuf:"bytes,8,opt,name=datums,proto3" json:"datums,omitempty"`
	// ID sets the ID of the created commit.
	ID        string `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	SizeBytes uint64 `protobuf:"varint,9,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// 'started' and 'finished' are set by Restore() when repopulating old
	// commits. If 'finished' is set, the commit being built is always marked
	// finished.
	Started  *timestamp.Timestamp `protobuf:"bytes,10,opt,name=started,proto3" json:"started,omitempty"`
	Finished *timestamp.Timestamp `protobuf:"bytes,11,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *BuildCommitRequest) Reset() {
	*x = BuildCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCommitRequest) ProtoMessage() {}

func (x *BuildCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCommitRequest.ProtoReflect.Descriptor instead.
func (*BuildCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{28}
}

func (x *BuildCommitRequest) GetParent() *Commit {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *BuildCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *BuildCommitRequest) GetOrigin() *CommitOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *BuildCommitRequest) GetProvenance() []*CommitProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *BuildCommitRequest) GetTree() *Object {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *BuildCommitRequest) GetTrees() []*Object {
	if x != nil {
		return x.Trees
	}
	return nil
}

func (x *BuildCommitRequest) GetDatums() *Object {
	if x != nil {
		return x.Datums
	}
	return nil
}

func (x *BuildCommitRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BuildCommitRequest) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *BuildCommitRequest) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *BuildCommitRequest) GetFinished() *timestamp.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

type FinishCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// description is a user-provided string describing this commit. Setting this
	// will overwrite the description set in StartCommit
	Description string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tree        *Object   `protobuf:"bytes,3,opt,name=tree,proto3" json:"tree,omitempty"`
	Trees       []*Object `protobuf:"bytes,5,rep,name=trees,proto3" json:"trees,omitempty"`
	Datums      *Object   `protobuf:"bytes,7,opt,name=datums,proto3" json:"datums,omitempty"`
	SizeBytes   uint64    `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// If set, 'commit' will be closed (its 'finished' field will be set to the
	// current time) but its 'tree' will be left nil.
	Empty bool `protobuf:"varint,4,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *FinishCommitRequest) Reset() {
	*x = FinishCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishCommitRequest) ProtoMessage() {}

func (x *FinishCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishCommitRequest.ProtoReflect.Descriptor instead.
func (*FinishCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{29}
}

func (x *FinishCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *FinishCommitRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FinishCommitRequest) GetTree() *Object {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *FinishCommitRequest) GetTrees() []*Object {
	if x != nil {
		return x.Trees
	}
	return nil
}

func (x *FinishCommitRequest) GetDatums() *Object {
	if x != nil {
		return x.Datums
	}
	return nil
}

func (x *FinishCommitRequest) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FinishCommitRequest) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

type InspectCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// BlockState causes inspect commit to block until the commit is in the desired state.
	BlockState CommitState `protobuf:"varint,2,opt,name=block_state,json=blockState,proto3,enum=pfs.CommitState" json:"block_state,omitempty"`
}

func (x *InspectCommitRequest) Reset() {
	*x = InspectCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectCommitRequest) ProtoMessage() {}

func (x *InspectCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectCommitRequest.ProtoReflect.Descriptor instead.
func (*InspectCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{30}
}

func (x *InspectCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *InspectCommitRequest) GetBlockState() CommitState {
	if x != nil {
		return x.BlockState
	}
	return CommitState_STARTED
}

type ListCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo    *Repo   `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	From    *Commit `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To      *Commit `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Number  uint64  `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	Reverse bool    `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"` // Return commits oldest to newest
}

func (x *ListCommitRequest) Reset() {
	*x = ListCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitRequest) ProtoMessage() {}

func (x *ListCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitRequest.ProtoReflect.Descriptor instead.
func (*ListCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{31}
}

func (x *ListCommitRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ListCommitRequest) GetFrom() *Commit {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListCommitRequest) GetTo() *Commit {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ListCommitRequest) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListCommitRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type CommitInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
}

func (x *CommitInfos) Reset() {
	*x = CommitInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfos) ProtoMessage() {}

func (x *CommitInfos) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfos.ProtoReflect.Descriptor instead.
func (*CommitInfos) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{32}
}

func (x *CommitInfos) GetCommitInfo() []*CommitInfo {
	if x != nil {
		return x.CommitInfo
	}
	return nil
}

type CreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *Commit `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// s_branch matches the field number and type of SetBranchRequest.Branch in
	// Pachyderm 1.6--so that operations (generated by pachyderm 1.6's
	// Admin.Export) can be deserialized by pachyderm 1.7 correctly
	SBranch    string    `protobuf:"bytes,2,opt,name=s_branch,json=sBranch,proto3" json:"s_branch,omitempty"`
	Branch     *Branch   `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Provenance []*Branch `protobuf:"bytes,4,rep,name=provenance,proto3" json:"provenance,omitempty"`
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{33}
}

func (x *CreateBranchRequest) GetHead() *Commit {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *CreateBranchRequest) GetSBranch() string {
	if x != nil {
		return x.SBranch
	}
	return ""
}

func (x *CreateBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *CreateBranchRequest) GetProvenance() []*Branch {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type InspectBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *InspectBranchRequest) Reset() {
	*x = InspectBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectBranchRequest) ProtoMessage() {}

func (x *InspectBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectBranchRequest.ProtoReflect.Descriptor instead.
func (*InspectBranchRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{34}
}

func (x *InspectBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type ListBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo    *Repo `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Reverse bool  `protobuf:"varint,2,opt,name=reverse,proto3" json:"reverse,omitempty"` // Returns branches oldest to newest
}

func (x *ListBranchRequest) Reset() {
	*x = ListBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchRequest) ProtoMessage() {}

func (x *ListBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchRequest.ProtoReflect.Descriptor instead.
func (*ListBranchRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{35}
}

func (x *ListBranchRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ListBranchRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Force  bool    `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *DeleteBranchRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *DeleteCommitRequest) Reset() {
	*x = DeleteCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommitRequest) ProtoMessage() {}

func (x *DeleteCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommitRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type FlushCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	ToRepos []*Repo   `protobuf:"bytes,2,rep,name=to_repos,json=toRepos,proto3" json:"to_repos,omitempty"`
}

func (x *FlushCommitRequest) Reset() {
	*x = FlushCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushCommitRequest) ProtoMessage() {}

func (x *FlushCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushCommitRequest.ProtoReflect.Descriptor instead.
func (*FlushCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{38}
}

func (x *FlushCommitRequest) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *FlushCommitRequest) GetToRepos() []*Repo {
	if x != nil {
		return x.ToRepos
	}
	return nil
}

type SubscribeCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo   *Repo             `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Branch string            `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Prov   *CommitProvenance `protobuf:"bytes,5,opt,name=prov,proto3" json:"prov,omitempty"`
	// only commits created since this commit are returned
	From *Commit `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Don't return commits until they're in (at least) the desired state.
	State CommitState `protobuf:"varint,4,opt,name=state,proto3,enum=pfs.CommitState" json:"state,omitempty"`
}

func (x *SubscribeCommitRequest) Reset() {
	*x = SubscribeCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCommitRequest) ProtoMessage() {}

func (x *SubscribeCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCommitRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCommitRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{39}
}

func (x *SubscribeCommitRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *SubscribeCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SubscribeCommitRequest) GetProv() *CommitProvenance {
	if x != nil {
		return x.Prov
	}
	return nil
}

func (x *SubscribeCommitRequest) GetFrom() *Commit {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SubscribeCommitRequest) GetState() CommitState {
	if x != nil {
		return x.State
	}
	return CommitState_STARTED
}

type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File        *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	OffsetBytes int64 `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes,proto3" json:"offset_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{40}
}

func (x *GetFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *GetFileRequest) GetOffsetBytes() int64 {
	if x != nil {
		return x.OffsetBytes
	}
	return 0
}

func (x *GetFileRequest) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

// An OverwriteIndex specifies the index of objects from which new writes
// are applied to.  Existing objects starting from the index are deleted.
// We want a separate message for ObjectIndex because we want to be able to
// distinguish between a zero index and a non-existent index.
type OverwriteIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *OverwriteIndex) Reset() {
	*x = OverwriteIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverwriteIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverwriteIndex) ProtoMessage() {}

func (x *OverwriteIndex) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverwriteIndex.ProtoReflect.Descriptor instead.
func (*OverwriteIndex) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{41}
}

func (x *OverwriteIndex) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type PutFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Url   string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// applies only to URLs that can be recursively walked, for example s3:// URLs
	Recursive bool `protobuf:"varint,6,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Delimiter causes data to be broken up into separate files with File.Path
	// as a prefix.
	Delimiter Delimiter `protobuf:"varint,7,opt,name=delimiter,proto3,enum=pfs.Delimiter" json:"delimiter,omitempty"`
	// TargetFileDatums specifies the target number of datums in each written
	// file it may be lower if data does not split evenly, but will never be
	// higher, unless the value is 0.
	TargetFileDatums int64 `protobuf:"varint,8,opt,name=target_file_datums,json=targetFileDatums,proto3" json:"target_file_datums,omitempty"`
	// TargetFileBytes specifies the target number of bytes in each written
	// file, files may have more or fewer bytes than the target.
	TargetFileBytes int64 `protobuf:"varint,9,opt,name=target_file_bytes,json=targetFileBytes,proto3" json:"target_file_bytes,omitempty"`
	// header_records is an option for splitting data when 'delimiter' is not NONE
	// (or SQL). It specifies the number of records that are converted to a
	// header and applied to all file shards.
	//
	// This is particularly useful for CSV files, where the first row often
	// contains column titles; if 'header_records' is set to one in that case,
	// the first row will be associated with the directory that contains the rest
	// of the split-up csv rows as files, and if any data is retrieved from that
	// directory by GetFile, it will appear to begin with that first row of
	// column labels (including in pipeline workers).
	//
	// Note that SQL files have their own logic for determining headers (their
	// header is not a number of records, but a collection of SQL commands that
	// create the relevant tables and such). This way, SQL files retrieved by
	// GetFile can be passed to psql, and they will set up the appropriate tables
	// before inserting the records in the files that were retrieved.
	HeaderRecords int64 `protobuf:"varint,11,opt,name=header_records,json=headerRecords,proto3" json:"header_records,omitempty"`
	// overwrite_index is the object index where the write starts from.  All
	// existing objects starting from the index are deleted.
	OverwriteIndex *OverwriteIndex `protobuf:"bytes,10,opt,name=overwrite_index,json=overwriteIndex,proto3" json:"overwrite_index,omitempty"`
	// delete indicates that the file should be deleted, this is redundant with
	// DeleteFile, but is necessary because it allows you to send file deletes
	// atomically with other PutFile operations.
	Delete bool `protobuf:"varint,12,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *PutFileRequest) Reset() {
	*x = PutFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileRequest) ProtoMessage() {}

func (x *PutFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileRequest.ProtoReflect.Descriptor instead.
func (*PutFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{42}
}

func (x *PutFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *PutFileRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutFileRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PutFileRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *PutFileRequest) GetDelimiter() Delimiter {
	if x != nil {
		return x.Delimiter
	}
	return Delimiter_NONE
}

func (x *PutFileRequest) GetTargetFileDatums() int64 {
	if x != nil {
		return x.TargetFileDatums
	}
	return 0
}

func (x *PutFileRequest) GetTargetFileBytes() int64 {
	if x != nil {
		return x.TargetFileBytes
	}
	return 0
}

func (x *PutFileRequest) GetHeaderRecords() int64 {
	if x != nil {
		return x.HeaderRecords
	}
	return 0
}

func (x *PutFileRequest) GetOverwriteIndex() *OverwriteIndex {
	if x != nil {
		return x.OverwriteIndex
	}
	return nil
}

func (x *PutFileRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// PutFileRecord is used to record PutFile requests in etcd temporarily.
type PutFileRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeBytes      int64           `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	ObjectHash     string          `protobuf:"bytes,2,opt,name=object_hash,json=objectHash,proto3" json:"object_hash,omitempty"`
	OverwriteIndex *OverwriteIndex `protobuf:"bytes,3,opt,name=overwrite_index,json=overwriteIndex,proto3" json:"overwrite_index,omitempty"`
	BlockRef       *BlockRef       `protobuf:"bytes,4,opt,name=block_ref,json=blockRef,proto3" json:"block_ref,omitempty"`
}

func (x *PutFileRecord) Reset() {
	*x = PutFileRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFileRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileRecord) ProtoMessage() {}

func (x *PutFileRecord) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileRecord.ProtoReflect.Descriptor instead.
func (*PutFileRecord) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{43}
}

func (x *PutFileRecord) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *PutFileRecord) GetObjectHash() string {
	if x != nil {
		return x.ObjectHash
	}
	return ""
}

func (x *PutFileRecord) GetOverwriteIndex() *OverwriteIndex {
	if x != nil {
		return x.OverwriteIndex
	}
	return nil
}

func (x *PutFileRecord) GetBlockRef() *BlockRef {
	if x != nil {
		return x.BlockRef
	}
	return nil
}

type PutFileRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Split     bool             `protobuf:"varint,1,opt,name=split,proto3" json:"split,omitempty"`
	Records   []*PutFileRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	Tombstone bool             `protobuf:"varint,3,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	Header    *PutFileRecord   `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Footer    *PutFileRecord   `protobuf:"bytes,5,opt,name=footer,proto3" json:"footer,omitempty"`
}

func (x *PutFileRecords) Reset() {
	*x = PutFileRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFileRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileRecords) ProtoMessage() {}

func (x *PutFileRecords) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileRecords.ProtoReflect.Descriptor instead.
func (*PutFileRecords) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{44}
}

func (x *PutFileRecords) GetSplit() bool {
	if x != nil {
		return x.Split
	}
	return false
}

func (x *PutFileRecords) GetRecords() []*PutFileRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *PutFileRecords) GetTombstone() bool {
	if x != nil {
		return x.Tombstone
	}
	return false
}

func (x *PutFileRecords) GetHeader() *PutFileRecord {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PutFileRecords) GetFooter() *PutFileRecord {
	if x != nil {
		return x.Footer
	}
	return nil
}

type CopyFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src       *File `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst       *File `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Overwrite bool  `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *CopyFileRequest) Reset() {
	*x = CopyFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileRequest) ProtoMessage() {}

func (x *CopyFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileRequest.ProtoReflect.Descriptor instead.
func (*CopyFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{45}
}

func (x *CopyFileRequest) GetSrc() *File {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CopyFileRequest) GetDst() *File {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *CopyFileRequest) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

type InspectFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *InspectFileRequest) Reset() {
	*x = InspectFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectFileRequest) ProtoMessage() {}

func (x *InspectFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectFileRequest.ProtoReflect.Descriptor instead.
func (*InspectFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{46}
}

func (x *InspectFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type ListFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File is the parent directory of the files we want to list. This sets the
	// repo, the commit/branch, and path prefix of files we're interested in
	// If the "path" field is omitted, a list of files at the top level of the repo
	// is returned
	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Full indicates whether the result should include file contents, which may
	// be large (i.e. the list of children for directories, and the list of object
	// references for regular files)
	Full bool `protobuf:"varint,2,opt,name=full,proto3" json:"full,omitempty"`
	// History indicates how many historical versions you want returned. Its
	// semantics are:
	// 0: Return the files as they are at the commit in `file`. FileInfo.File
	//    will equal File in this request.
	// 1: Return the files as they are in the last commit they were modified in.
	//    (This will have the same hash as if you'd passed 0, but
	//    FileInfo.File.Commit will be different.
	// 2: Return the above and the files as they are in the next-last commit they
	//    were modified in.
	// 3: etc.
	//-1: Return all historical versions.
	History int64 `protobuf:"varint,3,opt,name=history,proto3" json:"history,omitempty"`
}

func (x *ListFileRequest) Reset() {
	*x = ListFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileRequest) ProtoMessage() {}

func (x *ListFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileRequest.ProtoReflect.Descriptor instead.
func (*ListFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{47}
}

func (x *ListFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ListFileRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *ListFileRequest) GetHistory() int64 {
	if x != nil {
		return x.History
	}
	return 0
}

type WalkFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *WalkFileRequest) Reset() {
	*x = WalkFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalkFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalkFileRequest) ProtoMessage() {}

func (x *WalkFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalkFileRequest.ProtoReflect.Descriptor instead.
func (*WalkFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{48}
}

func (x *WalkFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type GlobFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit  *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Pattern string  `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *GlobFileRequest) Reset() {
	*x = GlobFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobFileRequest) ProtoMessage() {}

func (x *GlobFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobFileRequest.ProtoReflect.Descriptor instead.
func (*GlobFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{49}
}

func (x *GlobFileRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *GlobFileRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

// FileInfos is the result of both ListFile and GlobFile
type FileInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *FileInfos) Reset() {
	*x = FileInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfos) ProtoMessage() {}

func (x *FileInfos) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfos.ProtoReflect.Descriptor instead.
func (*FileInfos) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{50}
}

func (x *FileInfos) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type DiffFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewFile *File `protobuf:"bytes,1,opt,name=new_file,json=newFile,proto3" json:"new_file,omitempty"`
	// OldFile may be left nil in which case the same path in the parent of
	// NewFile's commit will be used.
	OldFile *File `protobuf:"bytes,2,opt,name=old_file,json=oldFile,proto3" json:"old_file,omitempty"`
	Shallow bool  `protobuf:"varint,3,opt,name=shallow,proto3" json:"shallow,omitempty"`
}

func (x *DiffFileRequest) Reset() {
	*x = DiffFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffFileRequest) ProtoMessage() {}

func (x *DiffFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffFileRequest.ProtoReflect.Descriptor instead.
func (*DiffFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{51}
}

func (x *DiffFileRequest) GetNewFile() *File {
	if x != nil {
		return x.NewFile
	}
	return nil
}

func (x *DiffFileRequest) GetOldFile() *File {
	if x != nil {
		return x.OldFile
	}
	return nil
}

func (x *DiffFileRequest) GetShallow() bool {
	if x != nil {
		return x.Shallow
	}
	return false
}

type DiffFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewFiles []*FileInfo `protobuf:"bytes,1,rep,name=new_files,json=newFiles,proto3" json:"new_files,omitempty"`
	OldFiles []*FileInfo `protobuf:"bytes,2,rep,name=old_files,json=oldFiles,proto3" json:"old_files,omitempty"`
}

func (x *DiffFileResponse) Reset() {
	*x = DiffFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffFileResponse) ProtoMessage() {}

func (x *DiffFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffFileResponse.ProtoReflect.Descriptor instead.
func (*DiffFileResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{52}
}

func (x *DiffFileResponse) GetNewFiles() []*FileInfo {
	if x != nil {
		return x.NewFiles
	}
	return nil
}

func (x *DiffFileResponse) GetOldFiles() []*FileInfo {
	if x != nil {
		return x.OldFiles
	}
	return nil
}

type DeleteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type FsckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fix bool `protobuf:"varint,1,opt,name=fix,proto3" json:"fix,omitempty"`
}

func (x *FsckRequest) Reset() {
	*x = FsckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsckRequest) ProtoMessage() {}

func (x *FsckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsckRequest.ProtoReflect.Descriptor instead.
func (*FsckRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{54}
}

func (x *FsckRequest) GetFix() bool {
	if x != nil {
		return x.Fix
	}
	return false
}

type FsckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fix   string `protobuf:"bytes,1,opt,name=fix,proto3" json:"fix,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FsckResponse) Reset() {
	*x = FsckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsckResponse) ProtoMessage() {}

func (x *FsckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsckResponse.ProtoReflect.Descriptor instead.
func (*FsckResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{55}
}

func (x *FsckResponse) GetFix() string {
	if x != nil {
		return x.Fix
	}
	return ""
}

func (x *FsckResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FileInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *FileInfoV2) Reset() {
	*x = FileInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoV2) ProtoMessage() {}

func (x *FileInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoV2.ProtoReflect.Descriptor instead.
func (*FileInfoV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{56}
}

func (x *FileInfoV2) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileInfoV2) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type FileOperationRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// Types that are assignable to Operation:
	//	*FileOperationRequestV2_PutTar
	//	*FileOperationRequestV2_DeleteFiles
	Operation isFileOperationRequestV2_Operation `protobuf_oneof:"operation"`
}

func (x *FileOperationRequestV2) Reset() {
	*x = FileOperationRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOperationRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOperationRequestV2) ProtoMessage() {}

func (x *FileOperationRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOperationRequestV2.ProtoReflect.Descriptor instead.
func (*FileOperationRequestV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{57}
}

func (x *FileOperationRequestV2) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (m *FileOperationRequestV2) GetOperation() isFileOperationRequestV2_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *FileOperationRequestV2) GetPutTar() *PutTarRequestV2 {
	if x, ok := x.GetOperation().(*FileOperationRequestV2_PutTar); ok {
		return x.PutTar
	}
	return nil
}

func (x *FileOperationRequestV2) GetDeleteFiles() *DeleteFilesRequestV2 {
	if x, ok := x.GetOperation().(*FileOperationRequestV2_DeleteFiles); ok {
		return x.DeleteFiles
	}
	return nil
}

type isFileOperationRequestV2_Operation interface {
	isFileOperationRequestV2_Operation()
}

type FileOperationRequestV2_PutTar struct {
	PutTar *PutTarRequestV2 `protobuf:"bytes,2,opt,name=put_tar,json=putTar,proto3,oneof"`
}

type FileOperationRequestV2_DeleteFiles struct {
	DeleteFiles *DeleteFilesRequestV2 `protobuf:"bytes,3,opt,name=delete_files,json=deleteFiles,proto3,oneof"`
}

func (*FileOperationRequestV2_PutTar) isFileOperationRequestV2_Operation() {}

func (*FileOperationRequestV2_DeleteFiles) isFileOperationRequestV2_Operation() {}

type PutTarRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	EOF  bool   `protobuf:"varint,3,opt,name=EOF,proto3" json:"EOF,omitempty"`
}

func (x *PutTarRequestV2) Reset() {
	*x = PutTarRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTarRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTarRequestV2) ProtoMessage() {}

func (x *PutTarRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTarRequestV2.ProtoReflect.Descriptor instead.
func (*PutTarRequestV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{58}
}

func (x *PutTarRequestV2) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *PutTarRequestV2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PutTarRequestV2) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type DeleteFilesRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Tag   string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DeleteFilesRequestV2) Reset() {
	*x = DeleteFilesRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesRequestV2) ProtoMessage() {}

func (x *DeleteFilesRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesRequestV2.ProtoReflect.Descriptor instead.
func (*DeleteFilesRequestV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteFilesRequestV2) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *DeleteFilesRequestV2) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type GetTarRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *GetTarRequestV2) Reset() {
	*x = GetTarRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTarRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTarRequestV2) ProtoMessage() {}

func (x *GetTarRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTarRequestV2.ProtoReflect.Descriptor instead.
func (*GetTarRequestV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{60}
}

func (x *GetTarRequestV2) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type GetTarConditionalRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Skip bool  `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *GetTarConditionalRequestV2) Reset() {
	*x = GetTarConditionalRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTarConditionalRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTarConditionalRequestV2) ProtoMessage() {}

func (x *GetTarConditionalRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTarConditionalRequestV2.ProtoReflect.Descriptor instead.
func (*GetTarConditionalRequestV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{61}
}

func (x *GetTarConditionalRequestV2) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *GetTarConditionalRequestV2) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

type GetTarConditionalResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo *FileInfoV2 `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	Data     []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	EOF      bool        `protobuf:"varint,3,opt,name=EOF,proto3" json:"EOF,omitempty"`
}

func (x *GetTarConditionalResponseV2) Reset() {
	*x = GetTarConditionalResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTarConditionalResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTarConditionalResponseV2) ProtoMessage() {}

func (x *GetTarConditionalResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTarConditionalResponseV2.ProtoReflect.Descriptor instead.
func (*GetTarConditionalResponseV2) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{62}
}

func (x *GetTarConditionalResponseV2) GetFileInfo() *FileInfoV2 {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *GetTarConditionalResponseV2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTarConditionalResponseV2) GetEOF() bool {
	if x != nil {
		return x.EOF
	}
	return false
}

type PutObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Tags  []*Tag `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Block *Block `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *PutObjectRequest) Reset() {
	*x = PutObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutObjectRequest) ProtoMessage() {}

func (x *PutObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutObjectRequest.ProtoReflect.Descriptor instead.
func (*PutObjectRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{63}
}

func (x *PutObjectRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutObjectRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PutObjectRequest) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type CreateObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object   *Object   `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	BlockRef *BlockRef `protobuf:"bytes,2,opt,name=block_ref,json=blockRef,proto3" json:"block_ref,omitempty"`
}

func (x *CreateObjectRequest) Reset() {
	*x = CreateObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectRequest) ProtoMessage() {}

func (x *CreateObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{64}
}

func (x *CreateObjectRequest) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *CreateObjectRequest) GetBlockRef() *BlockRef {
	if x != nil {
		return x.BlockRef
	}
	return nil
}

type GetObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects     []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	OffsetBytes uint64    `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes,proto3" json:"offset_bytes,omitempty"`
	// The number of bytes requested.
	SizeBytes uint64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The total amount of bytes in these objects.  It's OK if it's not
	// entirely accurate or if it's unknown (in which case it'd be set to 0).
	// It's used primarily as a hint for cache eviction.
	TotalSize uint64 `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GetObjectsRequest) Reset() {
	*x = GetObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectsRequest) ProtoMessage() {}

func (x *GetObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectsRequest.ProtoReflect.Descriptor instead.
func (*GetObjectsRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{65}
}

func (x *GetObjectsRequest) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *GetObjectsRequest) GetOffsetBytes() uint64 {
	if x != nil {
		return x.OffsetBytes
	}
	return 0
}

func (x *GetObjectsRequest) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *GetObjectsRequest) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PutBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PutBlockRequest) Reset() {
	*x = PutBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBlockRequest) ProtoMessage() {}

func (x *PutBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBlockRequest.ProtoReflect.Descriptor instead.
func (*PutBlockRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{66}
}

func (x *PutBlockRequest) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *PutBlockRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{67}
}

func (x *GetBlockRequest) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockRefs   []*BlockRef `protobuf:"bytes,1,rep,name=blockRefs,proto3" json:"blockRefs,omitempty"`
	OffsetBytes uint64      `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes,proto3" json:"offset_bytes,omitempty"`
	// The number of bytes requested.
	SizeBytes uint64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The total amount of bytes in these blocks.  It's OK if it's not
	// entirely accurate or if it's unknown (in which case it'd be set to 0).
	// It's used primarily as a hint for cache eviction.
	TotalSize uint64 `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{68}
}

func (x *GetBlocksRequest) GetBlockRefs() []*BlockRef {
	if x != nil {
		return x.BlockRefs
	}
	return nil
}

func (x *GetBlocksRequest) GetOffsetBytes() uint64 {
	if x != nil {
		return x.OffsetBytes
	}
	return 0
}

func (x *GetBlocksRequest) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *GetBlocksRequest) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ListBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBlockRequest) Reset() {
	*x = ListBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockRequest) ProtoMessage() {}

func (x *ListBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockRequest.ProtoReflect.Descriptor instead.
func (*ListBlockRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{69}
}

type TagObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Tags   []*Tag  `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagObjectRequest) Reset() {
	*x = TagObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagObjectRequest) ProtoMessage() {}

func (x *TagObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagObjectRequest.ProtoReflect.Descriptor instead.
func (*TagObjectRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{70}
}

func (x *TagObjectRequest) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *TagObjectRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListObjectsRequest) Reset() {
	*x = ListObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectsRequest) ProtoMessage() {}

func (x *ListObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectsRequest.ProtoReflect.Descriptor instead.
func (*ListObjectsRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{71}
}

type ListTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix        string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	IncludeObject bool   `protobuf:"varint,2,opt,name=include_object,json=includeObject,proto3" json:"include_object,omitempty"`
}

func (x *ListTagsRequest) Reset() {
	*x = ListTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsRequest) ProtoMessage() {}

func (x *ListTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsRequest.ProtoReflect.Descriptor instead.
func (*ListTagsRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{72}
}

func (x *ListTagsRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ListTagsRequest) GetIncludeObject() bool {
	if x != nil {
		return x.IncludeObject
	}
	return false
}

type ListTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag    *Tag    `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Object *Object `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *ListTagsResponse) Reset() {
	*x = ListTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsResponse) ProtoMessage() {}

func (x *ListTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsResponse.ProtoReflect.Descriptor instead.
func (*ListTagsResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{73}
}

func (x *ListTagsResponse) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ListTagsResponse) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

type DeleteObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *DeleteObjectsRequest) Reset() {
	*x = DeleteObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectsRequest) ProtoMessage() {}

func (x *DeleteObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectsRequest.ProtoReflect.Descriptor instead.
func (*DeleteObjectsRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteObjectsRequest) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

type DeleteObjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteObjectsResponse) Reset() {
	*x = DeleteObjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectsResponse) ProtoMessage() {}

func (x *DeleteObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectsResponse.ProtoReflect.Descriptor instead.
func (*DeleteObjectsResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{75}
}

type DeleteTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeleteTagsRequest) Reset() {
	*x = DeleteTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagsRequest) ProtoMessage() {}

func (x *DeleteTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagsRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagsRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteTagsRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagsResponse) Reset() {
	*x = DeleteTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagsResponse) ProtoMessage() {}

func (x *DeleteTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagsResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagsResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{77}
}

type CheckObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *CheckObjectRequest) Reset() {
	*x = CheckObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckObjectRequest) ProtoMessage() {}

func (x *CheckObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckObjectRequest.ProtoReflect.Descriptor instead.
func (*CheckObjectRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{78}
}

func (x *CheckObjectRequest) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

type CheckObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *CheckObjectResponse) Reset() {
	*x = CheckObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckObjectResponse) ProtoMessage() {}

func (x *CheckObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckObjectResponse.ProtoReflect.Descriptor instead.
func (*CheckObjectResponse) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{79}
}

func (x *CheckObjectResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type Objects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *Objects) Reset() {
	*x = Objects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Objects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objects) ProtoMessage() {}

func (x *Objects) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objects.ProtoReflect.Descriptor instead.
func (*Objects) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{80}
}

func (x *Objects) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

type PutObjDirectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj   string `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PutObjDirectRequest) Reset() {
	*x = PutObjDirectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutObjDirectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutObjDirectRequest) ProtoMessage() {}

func (x *PutObjDirectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutObjDirectRequest.ProtoReflect.Descriptor instead.
func (*PutObjDirectRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{81}
}

func (x *PutObjDirectRequest) GetObj() string {
	if x != nil {
		return x.Obj
	}
	return ""
}

func (x *PutObjDirectRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetObjDirectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj string `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
}

func (x *GetObjDirectRequest) Reset() {
	*x = GetObjDirectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjDirectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjDirectRequest) ProtoMessage() {}

func (x *GetObjDirectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjDirectRequest.ProtoReflect.Descriptor instead.
func (*GetObjDirectRequest) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{82}
}

func (x *GetObjDirectRequest) GetObj() string {
	if x != nil {
		return x.Obj
	}
	return ""
}

type ObjectIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects map[string]*BlockRef `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags    map[string]*Object   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectIndex) Reset() {
	*x = ObjectIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_pfs_pfs_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectIndex) ProtoMessage() {}

func (x *ObjectIndex) ProtoReflect() protoreflect.Message {
	mi := &file_client_pfs_pfs_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectIndex.ProtoReflect.Descriptor instead.
func (*ObjectIndex) Descriptor() ([]byte, []int) {
	return file_client_pfs_pfs_proto_rawDescGZIP(), []int{83}
}

func (x *ObjectIndex) GetObjects() map[string]*BlockRef {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ObjectIndex) GetTags() map[string]*Object {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_client_pfs_pfs_proto protoreflect.FileDescriptor

var file_client_pfs_pfs_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x66, 0x73, 0x2f, 0x70, 0x66, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x66, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x1a, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a,
	0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0a, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x2b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x11, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x1b, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x1c, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x19, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xff, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x33, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x37, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x53, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x22, 0xcd, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x74, 0x72, 0x65, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x75, 0x62, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x22, 0xb2, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x37, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x22, 0x52, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x22, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x37, 0x0a, 0x09, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x22, 0x72, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x17, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0x3e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x22, 0xb0, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0xbf, 0x03, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x72,
	0x65, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x06, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x6e, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3b,
	0x0a, 0x14, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x4c, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x61, 0x0a, 0x12, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x07, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x16, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x04,
	0x70, 0x72, 0x6f, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x76, 0x12, 0x1f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x71, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x86, 0x03, 0x0a, 0x0e,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66,
	0x22, 0xca, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x69, 0x0a,
	0x0f, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1b, 0x0a,
	0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5e, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x30, 0x0a,
	0x0f, 0x57, 0x61, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x50, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x22, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2a,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x0f, 0x44, 0x69,
	0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x22, 0x6a, 0x0a, 0x10, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x32, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x1f, 0x0a, 0x0b, 0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x66, 0x69, 0x78, 0x22, 0x36, 0x0a, 0x0c, 0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3f, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xbb, 0x01,
	0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x74, 0x54, 0x61, 0x72, 0x12, 0x3e,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0f, 0x50,
	0x75, 0x74, 0x54, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4f, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x45, 0x4f, 0x46, 0x22, 0x3e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x30, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x2c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4f,
	0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x4f, 0x46, 0x22, 0x68, 0x0a, 0x10,
	0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x66, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x22, 0x9b,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x0f,
	0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa0, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x50, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x53, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x30, 0x0a, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62,
	0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x22, 0x87, 0x02, 0x0a,
	0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x2a, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x53, 0x43, 0x4b,
	0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x52, 0x10, 0x02, 0x2a,
	0x33, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10,
	0x04, 0x32, 0xfd, 0x10, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x14,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x18, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x16, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3a, 0x0a, 0x08,
	0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x33, 0x0a, 0x08, 0x57, 0x61, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x47, 0x6c,
	0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2f, 0x0a, 0x04, 0x46, 0x73, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x73,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x4a, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x32, 0x12, 0x1b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x56, 0x32, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x20, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x37, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x14, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x32, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x47, 0x6c, 0x6f, 0x62,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x22, 0x00, 0x30,
	0x01, 0x32, 0xe2, 0x0a, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x50, 0x49, 0x12,
	0x33, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x3f, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x15, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x42, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x18, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x3c, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0b, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x48, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x19, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x08, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x29, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x12, 0x08, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x4f,
	0x62, 0x6a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x70,
	0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_pfs_pfs_proto_rawDescOnce sync.Once
	file_client_pfs_pfs_proto_rawDescData = file_client_pfs_pfs_proto_rawDesc
)

func file_client_pfs_pfs_proto_rawDescGZIP() []byte {
	file_client_pfs_pfs_proto_rawDescOnce.Do(func() {
		file_client_pfs_pfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_pfs_pfs_proto_rawDescData)
	})
	return file_client_pfs_pfs_proto_rawDescData
}

var file_client_pfs_pfs_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_client_pfs_pfs_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_client_pfs_pfs_proto_goTypes = []interface{}{
	(OriginKind)(0),                     // 0: pfs.OriginKind
	(FileType)(0),                       // 1: pfs.FileType
	(CommitState)(0),                    // 2: pfs.CommitState
	(Delimiter)(0),                      // 3: pfs.Delimiter
	(*Repo)(nil),                        // 4: pfs.Repo
	(*Branch)(nil),                      // 5: pfs.Branch
	(*BranchInfo)(nil),                  // 6: pfs.BranchInfo
	(*BranchInfos)(nil),                 // 7: pfs.BranchInfos
	(*File)(nil),                        // 8: pfs.File
	(*Block)(nil),                       // 9: pfs.Block
	(*Object)(nil),                      // 10: pfs.Object
	(*Tag)(nil),                         // 11: pfs.Tag
	(*RepoInfo)(nil),                    // 12: pfs.RepoInfo
	(*RepoAuthInfo)(nil),                // 13: pfs.RepoAuthInfo
	(*CommitOrigin)(nil),                // 14: pfs.CommitOrigin
	(*Commit)(nil),                      // 15: pfs.Commit
	(*CommitRange)(nil),                 // 16: pfs.CommitRange
	(*CommitProvenance)(nil),            // 17: pfs.CommitProvenance
	(*CommitInfo)(nil),                  // 18: pfs.CommitInfo
	(*FileInfo)(nil),                    // 19: pfs.FileInfo
	(*ByteRange)(nil),                   // 20: pfs.ByteRange
	(*BlockRef)(nil),                    // 21: pfs.BlockRef
	(*ObjectInfo)(nil),                  // 22: pfs.ObjectInfo
	(*Compaction)(nil),                  // 23: pfs.Compaction
	(*Shard)(nil),                       // 24: pfs.Shard
	(*PathRange)(nil),                   // 25: pfs.PathRange
	(*CreateRepoRequest)(nil),           // 26: pfs.CreateRepoRequest
	(*InspectRepoRequest)(nil),          // 27: pfs.InspectRepoRequest
	(*ListRepoRequest)(nil),             // 28: pfs.ListRepoRequest
	(*ListRepoResponse)(nil),            // 29: pfs.ListRepoResponse
	(*DeleteRepoRequest)(nil),           // 30: pfs.DeleteRepoRequest
	(*StartCommitRequest)(nil),          // 31: pfs.StartCommitRequest
	(*BuildCommitRequest)(nil),          // 32: pfs.BuildCommitRequest
	(*FinishCommitRequest)(nil),         // 33: pfs.FinishCommitRequest
	(*InspectCommitRequest)(nil),        // 34: pfs.InspectCommitRequest
	(*ListCommitRequest)(nil),           // 35: pfs.ListCommitRequest
	(*CommitInfos)(nil),                 // 36: pfs.CommitInfos
	(*CreateBranchRequest)(nil),         // 37: pfs.CreateBranchRequest
	(*InspectBranchRequest)(nil),        // 38: pfs.InspectBranchRequest
	(*ListBranchRequest)(nil),           // 39: pfs.ListBranchRequest
	(*DeleteBranchRequest)(nil),         // 40: pfs.DeleteBranchRequest
	(*DeleteCommitRequest)(nil),         // 41: pfs.DeleteCommitRequest
	(*FlushCommitRequest)(nil),          // 42: pfs.FlushCommitRequest
	(*SubscribeCommitRequest)(nil),      // 43: pfs.SubscribeCommitRequest
	(*GetFileRequest)(nil),              // 44: pfs.GetFileRequest
	(*OverwriteIndex)(nil),              // 45: pfs.OverwriteIndex
	(*PutFileRequest)(nil),              // 46: pfs.PutFileRequest
	(*PutFileRecord)(nil),               // 47: pfs.PutFileRecord
	(*PutFileRecords)(nil),              // 48: pfs.PutFileRecords
	(*CopyFileRequest)(nil),             // 49: pfs.CopyFileRequest
	(*InspectFileRequest)(nil),          // 50: pfs.InspectFileRequest
	(*ListFileRequest)(nil),             // 51: pfs.ListFileRequest
	(*WalkFileRequest)(nil),             // 52: pfs.WalkFileRequest
	(*GlobFileRequest)(nil),             // 53: pfs.GlobFileRequest
	(*FileInfos)(nil),                   // 54: pfs.FileInfos
	(*DiffFileRequest)(nil),             // 55: pfs.DiffFileRequest
	(*DiffFileResponse)(nil),            // 56: pfs.DiffFileResponse
	(*DeleteFileRequest)(nil),           // 57: pfs.DeleteFileRequest
	(*FsckRequest)(nil),                 // 58: pfs.FsckRequest
	(*FsckResponse)(nil),                // 59: pfs.FsckResponse
	(*FileInfoV2)(nil),                  // 60: pfs.FileInfoV2
	(*FileOperationRequestV2)(nil),      // 61: pfs.FileOperationRequestV2
	(*PutTarRequestV2)(nil),             // 62: pfs.PutTarRequestV2
	(*DeleteFilesRequestV2)(nil),        // 63: pfs.DeleteFilesRequestV2
	(*GetTarRequestV2)(nil),             // 64: pfs.GetTarRequestV2
	(*GetTarConditionalRequestV2)(nil),  // 65: pfs.GetTarConditionalRequestV2
	(*GetTarConditionalResponseV2)(nil), // 66: pfs.GetTarConditionalResponseV2
	(*PutObjectRequest)(nil),            // 67: pfs.PutObjectRequest
	(*CreateObjectRequest)(nil),         // 68: pfs.CreateObjectRequest
	(*GetObjectsRequest)(nil),           // 69: pfs.GetObjectsRequest
	(*PutBlockRequest)(nil),             // 70: pfs.PutBlockRequest
	(*GetBlockRequest)(nil),             // 71: pfs.GetBlockRequest
	(*GetBlocksRequest)(nil),            // 72: pfs.GetBlocksRequest
	(*ListBlockRequest)(nil),            // 73: pfs.ListBlockRequest
	(*TagObjectRequest)(nil),            // 74: pfs.TagObjectRequest
	(*ListObjectsRequest)(nil),          // 75: pfs.ListObjectsRequest
	(*ListTagsRequest)(nil),             // 76: pfs.ListTagsRequest
	(*ListTagsResponse)(nil),            // 77: pfs.ListTagsResponse
	(*DeleteObjectsRequest)(nil),        // 78: pfs.DeleteObjectsRequest
	(*DeleteObjectsResponse)(nil),       // 79: pfs.DeleteObjectsResponse
	(*DeleteTagsRequest)(nil),           // 80: pfs.DeleteTagsRequest
	(*DeleteTagsResponse)(nil),          // 81: pfs.DeleteTagsResponse
	(*CheckObjectRequest)(nil),          // 82: pfs.CheckObjectRequest
	(*CheckObjectResponse)(nil),         // 83: pfs.CheckObjectResponse
	(*Objects)(nil),                     // 84: pfs.Objects
	(*PutObjDirectRequest)(nil),         // 85: pfs.PutObjDirectRequest
	(*GetObjDirectRequest)(nil),         // 86: pfs.GetObjDirectRequest
	(*ObjectIndex)(nil),                 // 87: pfs.ObjectIndex
	nil,                                 // 88: pfs.ObjectIndex.ObjectsEntry
	nil,                                 // 89: pfs.ObjectIndex.TagsEntry
	(*timestamp.Timestamp)(nil),         // 90: google.protobuf.Timestamp
	(auth.Scope)(0),                     // 91: auth.Scope
	(*empty.Empty)(nil),                 // 92: google.protobuf.Empty
	(*wrappers.BytesValue)(nil),         // 93: google.protobuf.BytesValue
}
var file_client_pfs_pfs_proto_depIdxs = []int32{
	4,   // 0: pfs.Branch.repo:type_name -> pfs.Repo
	5,   // 1: pfs.BranchInfo.branch:type_name -> pfs.Branch
	15,  // 2: pfs.BranchInfo.head:type_name -> pfs.Commit
	5,   // 3: pfs.BranchInfo.provenance:type_name -> pfs.Branch
	5,   // 4: pfs.BranchInfo.subvenance:type_name -> pfs.Branch
	5,   // 5: pfs.BranchInfo.direct_provenance:type_name -> pfs.Branch
	6,   // 6: pfs.BranchInfos.branch_info:type_name -> pfs.BranchInfo
	15,  // 7: pfs.File.commit:type_name -> pfs.Commit
	4,   // 8: pfs.RepoInfo.repo:type_name -> pfs.Repo
	90,  // 9: pfs.RepoInfo.created:type_name -> google.protobuf.Timestamp
	5,   // 10: pfs.RepoInfo.branches:type_name -> pfs.Branch
	13,  // 11: pfs.RepoInfo.auth_info:type_name -> pfs.RepoAuthInfo
	91,  // 12: pfs.RepoAuthInfo.access_level:type_name -> auth.Scope
	0,   // 13: pfs.CommitOrigin.kind:type_name -> pfs.OriginKind
	4,   // 14: pfs.Commit.repo:type_name -> pfs.Repo
	15,  // 15: pfs.CommitRange.lower:type_name -> pfs.Commit
	15,  // 16: pfs.CommitRange.upper:type_name -> pfs.Commit
	15,  // 17: pfs.CommitProvenance.commit:type_name -> pfs.Commit
	5,   // 18: pfs.CommitProvenance.branch:type_name -> pfs.Branch
	15,  // 19: pfs.CommitInfo.commit:type_name -> pfs.Commit
	5,   // 20: pfs.CommitInfo.branch:type_name -> pfs.Branch
	14,  // 21: pfs.CommitInfo.origin:type_name -> pfs.CommitOrigin
	15,  // 22: pfs.CommitInfo.parent_commit:type_name -> pfs.Commit
	15,  // 23: pfs.CommitInfo.child_commits:type_name -> pfs.Commit
	90,  // 24: pfs.CommitInfo.started:type_name -> google.protobuf.Timestamp
	90,  // 25: pfs.CommitInfo.finished:type_name -> google.protobuf.Timestamp
	17,  // 26: pfs.CommitInfo.provenance:type_name -> pfs.CommitProvenance
	16,  // 27: pfs.CommitInfo.subvenance:type_name -> pfs.CommitRange
	10,  // 28: pfs.CommitInfo.tree:type_name -> pfs.Object
	10,  // 29: pfs.CommitInfo.trees:type_name -> pfs.Object
	10,  // 30: pfs.CommitInfo.datums:type_name -> pfs.Object
	8,   // 31: pfs.FileInfo.file:type_name -> pfs.File
	1,   // 32: pfs.FileInfo.file_type:type_name -> pfs.FileType
	90,  // 33: pfs.FileInfo.committed:type_name -> google.protobuf.Timestamp
	10,  // 34: pfs.FileInfo.objects:type_name -> pfs.Object
	21,  // 35: pfs.FileInfo.blockRefs:type_name -> pfs.BlockRef
	9,   // 36: pfs.BlockRef.block:type_name -> pfs.Block
	20,  // 37: pfs.BlockRef.range:type_name -> pfs.ByteRange
	10,  // 38: pfs.ObjectInfo.object:type_name -> pfs.Object
	21,  // 39: pfs.ObjectInfo.block_ref:type_name -> pfs.BlockRef
	23,  // 40: pfs.Shard.compaction:type_name -> pfs.Compaction
	25,  // 41: pfs.Shard.range:type_name -> pfs.PathRange
	4,   // 42: pfs.CreateRepoRequest.repo:type_name -> pfs.Repo
	4,   // 43: pfs.InspectRepoRequest.repo:type_name -> pfs.Repo
	12,  // 44: pfs.ListRepoResponse.repo_info:type_name -> pfs.RepoInfo
	4,   // 45: pfs.DeleteRepoRequest.repo:type_name -> pfs.Repo
	15,  // 46: pfs.StartCommitRequest.parent:type_name -> pfs.Commit
	17,  // 47: pfs.StartCommitRequest.provenance:type_name -> pfs.CommitProvenance
	15,  // 48: pfs.BuildCommitRequest.parent:type_name -> pfs.Commit
	14,  // 49: pfs.BuildCommitRequest.origin:type_name -> pfs.CommitOrigin
	17,  // 50: pfs.BuildCommitRequest.provenance:type_name -> pfs.CommitProvenance
	10,  // 51: pfs.BuildCommitRequest.tree:type_name -> pfs.Object
	10,  // 52: pfs.BuildCommitRequest.trees:type_name -> pfs.Object
	10,  // 53: pfs.BuildCommitRequest.datums:type_name -> pfs.Object
	90,  // 54: pfs.BuildCommitRequest.started:type_name -> google.protobuf.Timestamp
	90,  // 55: pfs.BuildCommitRequest.finished:type_name -> google.protobuf.Timestamp
	15,  // 56: pfs.FinishCommitRequest.commit:type_name -> pfs.Commit
	10,  // 57: pfs.FinishCommitRequest.tree:type_name -> pfs.Object
	10,  // 58: pfs.FinishCommitRequest.trees:type_name -> pfs.Object
	10,  // 59: pfs.FinishCommitRequest.datums:type_name -> pfs.Object
	15,  // 60: pfs.InspectCommitRequest.commit:type_name -> pfs.Commit
	2,   // 61: pfs.InspectCommitRequest.block_state:type_name -> pfs.CommitState
	4,   // 62: pfs.ListCommitRequest.repo:type_name -> pfs.Repo
	15,  // 63: pfs.ListCommitRequest.from:type_name -> pfs.Commit
	15,  // 64: pfs.ListCommitRequest.to:type_name -> pfs.Commit
	18,  // 65: pfs.CommitInfos.commit_info:type_name -> pfs.CommitInfo
	15,  // 66: pfs.CreateBranchRequest.head:type_name -> pfs.Commit
	5,   // 67: pfs.CreateBranchRequest.branch:type_name -> pfs.Branch
	5,   // 68: pfs.CreateBranchRequest.provenance:type_name -> pfs.Branch
	5,   // 69: pfs.InspectBranchRequest.branch:type_name -> pfs.Branch
	4,   // 70: pfs.ListBranchRequest.repo:type_name -> pfs.Repo
	5,   // 71: pfs.DeleteBranchRequest.branch:type_name -> pfs.Branch
	15,  // 72: pfs.DeleteCommitRequest.commit:type_name -> pfs.Commit
	15,  // 73: pfs.FlushCommitRequest.commits:type_name -> pfs.Commit
	4,   // 74: pfs.FlushCommitRequest.to_repos:type_name -> pfs.Repo
	4,   // 75: pfs.SubscribeCommitRequest.repo:type_name -> pfs.Repo
	17,  // 76: pfs.SubscribeCommitRequest.prov:type_name -> pfs.CommitProvenance
	15,  // 77: pfs.SubscribeCommitRequest.from:type_name -> pfs.Commit
	2,   // 78: pfs.SubscribeCommitRequest.state:type_name -> pfs.CommitState
	8,   // 79: pfs.GetFileRequest.file:type_name -> pfs.File
	8,   // 80: pfs.PutFileRequest.file:type_name -> pfs.File
	3,   // 81: pfs.PutFileRequest.delimiter:type_name -> pfs.Delimiter
	45,  // 82: pfs.PutFileRequest.overwrite_index:type_name -> pfs.OverwriteIndex
	45,  // 83: pfs.PutFileRecord.overwrite_index:type_name -> pfs.OverwriteIndex
	21,  // 84: pfs.PutFileRecord.block_ref:type_name -> pfs.BlockRef
	47,  // 85: pfs.PutFileRecords.records:type_name -> pfs.PutFileRecord
	47,  // 86: pfs.PutFileRecords.header:type_name -> pfs.PutFileRecord
	47,  // 87: pfs.PutFileRecords.footer:type_name -> pfs.PutFileRecord
	8,   // 88: pfs.CopyFileRequest.src:type_name -> pfs.File
	8,   // 89: pfs.CopyFileRequest.dst:type_name -> pfs.File
	8,   // 90: pfs.InspectFileRequest.file:type_name -> pfs.File
	8,   // 91: pfs.ListFileRequest.file:type_name -> pfs.File
	8,   // 92: pfs.WalkFileRequest.file:type_name -> pfs.File
	15,  // 93: pfs.GlobFileRequest.commit:type_name -> pfs.Commit
	19,  // 94: pfs.FileInfos.file_info:type_name -> pfs.FileInfo
	8,   // 95: pfs.DiffFileRequest.new_file:type_name -> pfs.File
	8,   // 96: pfs.DiffFileRequest.old_file:type_name -> pfs.File
	19,  // 97: pfs.DiffFileResponse.new_files:type_name -> pfs.FileInfo
	19,  // 98: pfs.DiffFileResponse.old_files:type_name -> pfs.FileInfo
	8,   // 99: pfs.DeleteFileRequest.file:type_name -> pfs.File
	8,   // 100: pfs.FileInfoV2.file:type_name -> pfs.File
	15,  // 101: pfs.FileOperationRequestV2.commit:type_name -> pfs.Commit
	62,  // 102: pfs.FileOperationRequestV2.put_tar:type_name -> pfs.PutTarRequestV2
	63,  // 103: pfs.FileOperationRequestV2.delete_files:type_name -> pfs.DeleteFilesRequestV2
	8,   // 104: pfs.GetTarRequestV2.file:type_name -> pfs.File
	8,   // 105: pfs.GetTarConditionalRequestV2.file:type_name -> pfs.File
	60,  // 106: pfs.GetTarConditionalResponseV2.file_info:type_name -> pfs.FileInfoV2
	11,  // 107: pfs.PutObjectRequest.tags:type_name -> pfs.Tag
	9,   // 108: pfs.PutObjectRequest.block:type_name -> pfs.Block
	10,  // 109: pfs.CreateObjectRequest.object:type_name -> pfs.Object
	21,  // 110: pfs.CreateObjectRequest.block_ref:type_name -> pfs.BlockRef
	10,  // 111: pfs.GetObjectsRequest.objects:type_name -> pfs.Object
	9,   // 112: pfs.PutBlockRequest.block:type_name -> pfs.Block
	9,   // 113: pfs.GetBlockRequest.block:type_name -> pfs.Block
	21,  // 114: pfs.GetBlocksRequest.blockRefs:type_name -> pfs.BlockRef
	10,  // 115: pfs.TagObjectRequest.object:type_name -> pfs.Object
	11,  // 116: pfs.TagObjectRequest.tags:type_name -> pfs.Tag
	11,  // 117: pfs.ListTagsResponse.tag:type_name -> pfs.Tag
	10,  // 118: pfs.ListTagsResponse.object:type_name -> pfs.Object
	10,  // 119: pfs.DeleteObjectsRequest.objects:type_name -> pfs.Object
	11,  // 120: pfs.DeleteTagsRequest.tags:type_name -> pfs.Tag
	10,  // 121: pfs.CheckObjectRequest.object:type_name -> pfs.Object
	10,  // 122: pfs.Objects.objects:type_name -> pfs.Object
	88,  // 123: pfs.ObjectIndex.objects:type_name -> pfs.ObjectIndex.ObjectsEntry
	89,  // 124: pfs.ObjectIndex.tags:type_name -> pfs.ObjectIndex.TagsEntry
	21,  // 125: pfs.ObjectIndex.ObjectsEntry.value:type_name -> pfs.BlockRef
	10,  // 126: pfs.ObjectIndex.TagsEntry.value:type_name -> pfs.Object
	26,  // 127: pfs.API.CreateRepo:input_type -> pfs.CreateRepoRequest
	27,  // 128: pfs.API.InspectRepo:input_type -> pfs.InspectRepoRequest
	28,  // 129: pfs.API.ListRepo:input_type -> pfs.ListRepoRequest
	30,  // 130: pfs.API.DeleteRepo:input_type -> pfs.DeleteRepoRequest
	31,  // 131: pfs.API.StartCommit:input_type -> pfs.StartCommitRequest
	33,  // 132: pfs.API.FinishCommit:input_type -> pfs.FinishCommitRequest
	34,  // 133: pfs.API.InspectCommit:input_type -> pfs.InspectCommitRequest
	35,  // 134: pfs.API.ListCommit:input_type -> pfs.ListCommitRequest
	35,  // 135: pfs.API.ListCommitStream:input_type -> pfs.ListCommitRequest
	41,  // 136: pfs.API.DeleteCommit:input_type -> pfs.DeleteCommitRequest
	42,  // 137: pfs.API.FlushCommit:input_type -> pfs.FlushCommitRequest
	43,  // 138: pfs.API.SubscribeCommit:input_type -> pfs.SubscribeCommitRequest
	32,  // 139: pfs.API.BuildCommit:input_type -> pfs.BuildCommitRequest
	37,  // 140: pfs.API.CreateBranch:input_type -> pfs.CreateBranchRequest
	38,  // 141: pfs.API.InspectBranch:input_type -> pfs.InspectBranchRequest
	39,  // 142: pfs.API.ListBranch:input_type -> pfs.ListBranchRequest
	40,  // 143: pfs.API.DeleteBranch:input_type -> pfs.DeleteBranchRequest
	46,  // 144: pfs.API.PutFile:input_type -> pfs.PutFileRequest
	49,  // 145: pfs.API.CopyFile:input_type -> pfs.CopyFileRequest
	44,  // 146: pfs.API.GetFile:input_type -> pfs.GetFileRequest
	50,  // 147: pfs.API.InspectFile:input_type -> pfs.InspectFileRequest
	51,  // 148: pfs.API.ListFile:input_type -> pfs.ListFileRequest
	51,  // 149: pfs.API.ListFileStream:input_type -> pfs.ListFileRequest
	52,  // 150: pfs.API.WalkFile:input_type -> pfs.WalkFileRequest
	53,  // 151: pfs.API.GlobFile:input_type -> pfs.GlobFileRequest
	53,  // 152: pfs.API.GlobFileStream:input_type -> pfs.GlobFileRequest
	55,  // 153: pfs.API.DiffFile:input_type -> pfs.DiffFileRequest
	57,  // 154: pfs.API.DeleteFile:input_type -> pfs.DeleteFileRequest
	92,  // 155: pfs.API.DeleteAll:input_type -> google.protobuf.Empty
	58,  // 156: pfs.API.Fsck:input_type -> pfs.FsckRequest
	61,  // 157: pfs.API.FileOperationV2:input_type -> pfs.FileOperationRequestV2
	64,  // 158: pfs.API.GetTarV2:input_type -> pfs.GetTarRequestV2
	65,  // 159: pfs.API.GetTarConditionalV2:input_type -> pfs.GetTarConditionalRequestV2
	51,  // 160: pfs.API.ListFileV2:input_type -> pfs.ListFileRequest
	53,  // 161: pfs.API.GlobFileV2:input_type -> pfs.GlobFileRequest
	67,  // 162: pfs.ObjectAPI.PutObject:input_type -> pfs.PutObjectRequest
	67,  // 163: pfs.ObjectAPI.PutObjectSplit:input_type -> pfs.PutObjectRequest
	67,  // 164: pfs.ObjectAPI.PutObjects:input_type -> pfs.PutObjectRequest
	68,  // 165: pfs.ObjectAPI.CreateObject:input_type -> pfs.CreateObjectRequest
	10,  // 166: pfs.ObjectAPI.GetObject:input_type -> pfs.Object
	69,  // 167: pfs.ObjectAPI.GetObjects:input_type -> pfs.GetObjectsRequest
	70,  // 168: pfs.ObjectAPI.PutBlock:input_type -> pfs.PutBlockRequest
	71,  // 169: pfs.ObjectAPI.GetBlock:input_type -> pfs.GetBlockRequest
	72,  // 170: pfs.ObjectAPI.GetBlocks:input_type -> pfs.GetBlocksRequest
	73,  // 171: pfs.ObjectAPI.ListBlock:input_type -> pfs.ListBlockRequest
	74,  // 172: pfs.ObjectAPI.TagObject:input_type -> pfs.TagObjectRequest
	10,  // 173: pfs.ObjectAPI.InspectObject:input_type -> pfs.Object
	82,  // 174: pfs.ObjectAPI.CheckObject:input_type -> pfs.CheckObjectRequest
	75,  // 175: pfs.ObjectAPI.ListObjects:input_type -> pfs.ListObjectsRequest
	78,  // 176: pfs.ObjectAPI.DeleteObjects:input_type -> pfs.DeleteObjectsRequest
	11,  // 177: pfs.ObjectAPI.GetTag:input_type -> pfs.Tag
	11,  // 178: pfs.ObjectAPI.InspectTag:input_type -> pfs.Tag
	76,  // 179: pfs.ObjectAPI.ListTags:input_type -> pfs.ListTagsRequest
	80,  // 180: pfs.ObjectAPI.DeleteTags:input_type -> pfs.DeleteTagsRequest
	92,  // 181: pfs.ObjectAPI.Compact:input_type -> google.protobuf.Empty
	85,  // 182: pfs.ObjectAPI.PutObjDirect:input_type -> pfs.PutObjDirectRequest
	86,  // 183: pfs.ObjectAPI.GetObjDirect:input_type -> pfs.GetObjDirectRequest
	92,  // 184: pfs.API.CreateRepo:output_type -> google.protobuf.Empty
	12,  // 185: pfs.API.InspectRepo:output_type -> pfs.RepoInfo
	29,  // 186: pfs.API.ListRepo:output_type -> pfs.ListRepoResponse
	92,  // 187: pfs.API.DeleteRepo:output_type -> google.protobuf.Empty
	15,  // 188: pfs.API.StartCommit:output_type -> pfs.Commit
	92,  // 189: pfs.API.FinishCommit:output_type -> google.protobuf.Empty
	18,  // 190: pfs.API.InspectCommit:output_type -> pfs.CommitInfo
	36,  // 191: pfs.API.ListCommit:output_type -> pfs.CommitInfos
	18,  // 192: pfs.API.ListCommitStream:output_type -> pfs.CommitInfo
	92,  // 193: pfs.API.DeleteCommit:output_type -> google.protobuf.Empty
	18,  // 194: pfs.API.FlushCommit:output_type -> pfs.CommitInfo
	18,  // 195: pfs.API.SubscribeCommit:output_type -> pfs.CommitInfo
	15,  // 196: pfs.API.BuildCommit:output_type -> pfs.Commit
	92,  // 197: pfs.API.CreateBranch:output_type -> google.protobuf.Empty
	6,   // 198: pfs.API.InspectBranch:output_type -> pfs.BranchInfo
	7,   // 199: pfs.API.ListBranch:output_type -> pfs.BranchInfos
	92,  // 200: pfs.API.DeleteBranch:output_type -> google.protobuf.Empty
	92,  // 201: pfs.API.PutFile:output_type -> google.protobuf.Empty
	92,  // 202: pfs.API.CopyFile:output_type -> google.protobuf.Empty
	93,  // 203: pfs.API.GetFile:output_type -> google.protobuf.BytesValue
	19,  // 204: pfs.API.InspectFile:output_type -> pfs.FileInfo
	54,  // 205: pfs.API.ListFile:output_type -> pfs.FileInfos
	19,  // 206: pfs.API.ListFileStream:output_type -> pfs.FileInfo
	19,  // 207: pfs.API.WalkFile:output_type -> pfs.FileInfo
	54,  // 208: pfs.API.GlobFile:output_type -> pfs.FileInfos
	19,  // 209: pfs.API.GlobFileStream:output_type -> pfs.FileInfo
	56,  // 210: pfs.API.DiffFile:output_type -> pfs.DiffFileResponse
	92,  // 211: pfs.API.DeleteFile:output_type -> google.protobuf.Empty
	92,  // 212: pfs.API.DeleteAll:output_type -> google.protobuf.Empty
	59,  // 213: pfs.API.Fsck:output_type -> pfs.FsckResponse
	92,  // 214: pfs.API.FileOperationV2:output_type -> google.protobuf.Empty
	93,  // 215: pfs.API.GetTarV2:output_type -> google.protobuf.BytesValue
	66,  // 216: pfs.API.GetTarConditionalV2:output_type -> pfs.GetTarConditionalResponseV2
	60,  // 217: pfs.API.ListFileV2:output_type -> pfs.FileInfoV2
	60,  // 218: pfs.API.GlobFileV2:output_type -> pfs.FileInfoV2
	10,  // 219: pfs.ObjectAPI.PutObject:output_type -> pfs.Object
	84,  // 220: pfs.ObjectAPI.PutObjectSplit:output_type -> pfs.Objects
	92,  // 221: pfs.ObjectAPI.PutObjects:output_type -> google.protobuf.Empty
	92,  // 222: pfs.ObjectAPI.CreateObject:output_type -> google.protobuf.Empty
	93,  // 223: pfs.ObjectAPI.GetObject:output_type -> google.protobuf.BytesValue
	93,  // 224: pfs.ObjectAPI.GetObjects:output_type -> google.protobuf.BytesValue
	92,  // 225: pfs.ObjectAPI.PutBlock:output_type -> google.protobuf.Empty
	93,  // 226: pfs.ObjectAPI.GetBlock:output_type -> google.protobuf.BytesValue
	93,  // 227: pfs.ObjectAPI.GetBlocks:output_type -> google.protobuf.BytesValue
	9,   // 228: pfs.ObjectAPI.ListBlock:output_type -> pfs.Block
	92,  // 229: pfs.ObjectAPI.TagObject:output_type -> google.protobuf.Empty
	22,  // 230: pfs.ObjectAPI.InspectObject:output_type -> pfs.ObjectInfo
	83,  // 231: pfs.ObjectAPI.CheckObject:output_type -> pfs.CheckObjectResponse
	22,  // 232: pfs.ObjectAPI.ListObjects:output_type -> pfs.ObjectInfo
	79,  // 233: pfs.ObjectAPI.DeleteObjects:output_type -> pfs.DeleteObjectsResponse
	93,  // 234: pfs.ObjectAPI.GetTag:output_type -> google.protobuf.BytesValue
	22,  // 235: pfs.ObjectAPI.InspectTag:output_type -> pfs.ObjectInfo
	77,  // 236: pfs.ObjectAPI.ListTags:output_type -> pfs.ListTagsResponse
	81,  // 237: pfs.ObjectAPI.DeleteTags:output_type -> pfs.DeleteTagsResponse
	92,  // 238: pfs.ObjectAPI.Compact:output_type -> google.protobuf.Empty
	92,  // 239: pfs.ObjectAPI.PutObjDirect:output_type -> google.protobuf.Empty
	93,  // 240: pfs.ObjectAPI.GetObjDirect:output_type -> google.protobuf.BytesValue
	184, // [184:241] is the sub-list for method output_type
	127, // [127:184] is the sub-list for method input_type
	127, // [127:127] is the sub-list for extension type_name
	127, // [127:127] is the sub-list for extension extendee
	0,   // [0:127] is the sub-list for field type_name
}

func init() { file_client_pfs_pfs_proto_init() }
func file_client_pfs_pfs_proto_init() {
	if File_client_pfs_pfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_pfs_pfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitProvenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverwriteIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFileRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFileRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalkFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOperationRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTarRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTarRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTarConditionalRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTarConditionalResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Objects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutObjDirectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjDirectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_pfs_pfs_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_client_pfs_pfs_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*FileOperationRequestV2_PutTar)(nil),
		(*FileOperationRequestV2_DeleteFiles)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_pfs_pfs_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_client_pfs_pfs_proto_goTypes,
		DependencyIndexes: file_client_pfs_pfs_proto_depIdxs,
		EnumInfos:         file_client_pfs_pfs_proto_enumTypes,
		MessageInfos:      file_client_pfs_pfs_proto_msgTypes,
	}.Build()
	File_client_pfs_pfs_proto = out.File
	file_client_pfs_pfs_proto_rawDesc = nil
	file_client_pfs_pfs_proto_goTypes = nil
	file_client_pfs_pfs_proto_depIdxs = nil
}
