// Code generated by protoc-gen-go.
// source: client/pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	client/pfs/pfs.proto

It has these top-level messages:
	Repo
	Commit
	Commits
	Branches
	File
	Block
	Object
	Tag
	RepoInfo
	RepoInfos
	CommitInfo
	CommitInfos
	FileInfo
	FileInfos
	ByteRange
	BlockRef
	BlockRefs
	Append
	BlockInfo
	BlockInfos
	Shard
	CreateRepoRequest
	InspectRepoRequest
	ListRepoRequest
	DeleteRepoRequest
	StartCommitRequest
	ForkCommitRequest
	FinishCommitRequest
	ArchiveCommitRequest
	InspectCommitRequest
	ListCommitRequest
	ListBranchRequest
	DeleteCommitRequest
	FlushCommitRequest
	DiffMethod
	GetFileRequest
	PutFileRequest
	InspectFileRequest
	ListFileRequest
	DeleteFileRequest
	SquashCommitRequest
	ReplayCommitRequest
	PutBlockRequest
	GetBlockRequest
	DeleteBlockRequest
	InspectBlockRequest
	ListBlockRequest
	PutObjectRequest
	ObjectIndex
*/
package pfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf2 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf3 "go.pedge.io/pb/go/google/protobuf"
import _ "github.com/pachyderm/pachyderm/src/client/pkg/shard"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommitType int32

const (
	CommitType_COMMIT_TYPE_NONE  CommitType = 0
	CommitType_COMMIT_TYPE_READ  CommitType = 1
	CommitType_COMMIT_TYPE_WRITE CommitType = 2
)

var CommitType_name = map[int32]string{
	0: "COMMIT_TYPE_NONE",
	1: "COMMIT_TYPE_READ",
	2: "COMMIT_TYPE_WRITE",
}
var CommitType_value = map[string]int32{
	"COMMIT_TYPE_NONE":  0,
	"COMMIT_TYPE_READ":  1,
	"COMMIT_TYPE_WRITE": 2,
}

func (x CommitType) String() string {
	return proto.EnumName(CommitType_name, int32(x))
}
func (CommitType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FileType int32

const (
	FileType_FILE_TYPE_NONE    FileType = 0
	FileType_FILE_TYPE_REGULAR FileType = 1
	FileType_FILE_TYPE_DIR     FileType = 2
)

var FileType_name = map[int32]string{
	0: "FILE_TYPE_NONE",
	1: "FILE_TYPE_REGULAR",
	2: "FILE_TYPE_DIR",
}
var FileType_value = map[string]int32{
	"FILE_TYPE_NONE":    0,
	"FILE_TYPE_REGULAR": 1,
	"FILE_TYPE_DIR":     2,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CommitStatus int32

const (
	CommitStatus_NORMAL    CommitStatus = 0
	CommitStatus_ARCHIVED  CommitStatus = 1
	CommitStatus_CANCELLED CommitStatus = 2
	CommitStatus_ALL       CommitStatus = 3
)

var CommitStatus_name = map[int32]string{
	0: "NORMAL",
	1: "ARCHIVED",
	2: "CANCELLED",
	3: "ALL",
}
var CommitStatus_value = map[string]int32{
	"NORMAL":    0,
	"ARCHIVED":  1,
	"CANCELLED": 2,
	"ALL":       3,
}

func (x CommitStatus) String() string {
	return proto.EnumName(CommitStatus_name, int32(x))
}
func (CommitStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Delimiter int32

const (
	Delimiter_NONE Delimiter = 0
	Delimiter_JSON Delimiter = 1
	Delimiter_LINE Delimiter = 2
)

var Delimiter_name = map[int32]string{
	0: "NONE",
	1: "JSON",
	2: "LINE",
}
var Delimiter_value = map[string]int32{
	"NONE": 0,
	"JSON": 1,
	"LINE": 2,
}

func (x Delimiter) String() string {
	return proto.EnumName(Delimiter_name, int32(x))
}
func (Delimiter) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListFileMode int32

const (
	ListFileMode_ListFile_NORMAL  ListFileMode = 0
	ListFileMode_ListFile_FAST    ListFileMode = 1
	ListFileMode_ListFile_RECURSE ListFileMode = 2
)

var ListFileMode_name = map[int32]string{
	0: "ListFile_NORMAL",
	1: "ListFile_FAST",
	2: "ListFile_RECURSE",
}
var ListFileMode_value = map[string]int32{
	"ListFile_NORMAL":  0,
	"ListFile_FAST":    1,
	"ListFile_RECURSE": 2,
}

func (x ListFileMode) String() string {
	return proto.EnumName(ListFileMode_name, int32(x))
}
func (ListFileMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Repo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Commit struct {
	Repo *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Commit) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type Commits struct {
	Commit []*Commit `protobuf:"bytes,1,rep,name=commit" json:"commit,omitempty"`
}

func (m *Commits) Reset()                    { *m = Commits{} }
func (m *Commits) String() string            { return proto.CompactTextString(m) }
func (*Commits) ProtoMessage()               {}
func (*Commits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Commits) GetCommit() []*Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type Branches struct {
	Branches []string `protobuf:"bytes,1,rep,name=branches" json:"branches,omitempty"`
}

func (m *Branches) Reset()                    { *m = Branches{} }
func (m *Branches) String() string            { return proto.CompactTextString(m) }
func (*Branches) ProtoMessage()               {}
func (*Branches) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type File struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *File) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Object struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Tag struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RepoInfo struct {
	Repo       *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created    *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes  uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Provenance []*Repo                     `protobuf:"bytes,4,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *RepoInfo) Reset()                    { *m = RepoInfo{} }
func (m *RepoInfo) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()               {}
func (*RepoInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RepoInfo) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *RepoInfo) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type RepoInfos struct {
	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info,json=repoInfo" json:"repo_info,omitempty"`
}

func (m *RepoInfos) Reset()                    { *m = RepoInfos{} }
func (m *RepoInfos) String() string            { return proto.CompactTextString(m) }
func (*RepoInfos) ProtoMessage()               {}
func (*RepoInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RepoInfos) GetRepoInfo() []*RepoInfo {
	if m != nil {
		return m.RepoInfo
	}
	return nil
}

type CommitInfo struct {
	Commit       *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Branch       string                      `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
	CommitType   CommitType                  `protobuf:"varint,3,opt,name=commit_type,json=commitType,enum=pfs.CommitType" json:"commit_type,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,4,opt,name=parent_commit,json=parentCommit" json:"parent_commit,omitempty"`
	Started      *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=started" json:"started,omitempty"`
	Finished     *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=finished" json:"finished,omitempty"`
	SizeBytes    uint64                      `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Cancelled    bool                        `protobuf:"varint,8,opt,name=cancelled" json:"cancelled,omitempty"`
	Archived     bool                        `protobuf:"varint,9,opt,name=archived" json:"archived,omitempty"`
	Provenance   []*Commit                   `protobuf:"bytes,10,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *CommitInfo) Reset()                    { *m = CommitInfo{} }
func (m *CommitInfo) String() string            { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()               {}
func (*CommitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommitInfo) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CommitInfo) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *CommitInfo) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *CommitInfo) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type CommitInfos struct {
	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info,json=commitInfo" json:"commit_info,omitempty"`
}

func (m *CommitInfos) Reset()                    { *m = CommitInfos{} }
func (m *CommitInfos) String() string            { return proto.CompactTextString(m) }
func (*CommitInfos) ProtoMessage()               {}
func (*CommitInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CommitInfos) GetCommitInfo() []*CommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

type FileInfo struct {
	File           *File                       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType       FileType                    `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes      uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Modified       *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
	CommitModified *Commit                     `protobuf:"bytes,5,opt,name=commit_modified,json=commitModified" json:"commit_modified,omitempty"`
	Children       []*File                     `protobuf:"bytes,6,rep,name=children" json:"children,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetModified() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *FileInfo) GetCommitModified() *Commit {
	if m != nil {
		return m.CommitModified
	}
	return nil
}

func (m *FileInfo) GetChildren() []*File {
	if m != nil {
		return m.Children
	}
	return nil
}

type FileInfos struct {
	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
}

func (m *FileInfos) Reset()                    { *m = FileInfos{} }
func (m *FileInfos) String() string            { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()               {}
func (*FileInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FileInfos) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type ByteRange struct {
	Lower uint64 `protobuf:"varint,1,opt,name=lower" json:"lower,omitempty"`
	Upper uint64 `protobuf:"varint,2,opt,name=upper" json:"upper,omitempty"`
}

func (m *ByteRange) Reset()                    { *m = ByteRange{} }
func (m *ByteRange) String() string            { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()               {}
func (*ByteRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type BlockRef struct {
	Block *Block     `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Range *ByteRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (m *BlockRef) Reset()                    { *m = BlockRef{} }
func (m *BlockRef) String() string            { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()               {}
func (*BlockRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BlockRef) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockRef) GetRange() *ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type BlockRefs struct {
	BlockRef []*BlockRef `protobuf:"bytes,1,rep,name=block_ref,json=blockRef" json:"block_ref,omitempty"`
}

func (m *BlockRefs) Reset()                    { *m = BlockRefs{} }
func (m *BlockRefs) String() string            { return proto.CompactTextString(m) }
func (*BlockRefs) ProtoMessage()               {}
func (*BlockRefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BlockRefs) GetBlockRef() []*BlockRef {
	if m != nil {
		return m.BlockRef
	}
	return nil
}

type Append struct {
	BlockRefs []*BlockRef     `protobuf:"bytes,1,rep,name=block_refs,json=blockRefs" json:"block_refs,omitempty"`
	Children  map[string]bool `protobuf:"bytes,2,rep,name=children" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LastRef   *Commit         `protobuf:"bytes,3,opt,name=last_ref,json=lastRef" json:"last_ref,omitempty"`
	Delete    bool            `protobuf:"varint,4,opt,name=delete" json:"delete,omitempty"`
	FileType  FileType        `protobuf:"varint,5,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
}

func (m *Append) Reset()                    { *m = Append{} }
func (m *Append) String() string            { return proto.CompactTextString(m) }
func (*Append) ProtoMessage()               {}
func (*Append) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Append) GetBlockRefs() []*BlockRef {
	if m != nil {
		return m.BlockRefs
	}
	return nil
}

func (m *Append) GetChildren() map[string]bool {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Append) GetLastRef() *Commit {
	if m != nil {
		return m.LastRef
	}
	return nil
}

type BlockInfo struct {
	Block     *Block                      `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BlockInfo) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type BlockInfos struct {
	BlockInfo []*BlockInfo `protobuf:"bytes,1,rep,name=block_info,json=blockInfo" json:"block_info,omitempty"`
}

func (m *BlockInfos) Reset()                    { *m = BlockInfos{} }
func (m *BlockInfos) String() string            { return proto.CompactTextString(m) }
func (*BlockInfos) ProtoMessage()               {}
func (*BlockInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BlockInfos) GetBlockInfo() []*BlockInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

type Shard struct {
	FileNumber   uint64 `protobuf:"varint,1,opt,name=file_number,json=fileNumber" json:"file_number,omitempty"`
	FileModulus  uint64 `protobuf:"varint,2,opt,name=file_modulus,json=fileModulus" json:"file_modulus,omitempty"`
	BlockNumber  uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockModulus uint64 `protobuf:"varint,4,opt,name=block_modulus,json=blockModulus" json:"block_modulus,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type CreateRepoRequest struct {
	Repo       *Repo   `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Provenance []*Repo `protobuf:"bytes,2,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *CreateRepoRequest) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type InspectRepoRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *InspectRepoRequest) Reset()                    { *m = InspectRepoRequest{} }
func (m *InspectRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectRepoRequest) ProtoMessage()               {}
func (*InspectRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *InspectRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type ListRepoRequest struct {
	Provenance []*Repo `protobuf:"bytes,1,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *ListRepoRequest) Reset()                    { *m = ListRepoRequest{} }
func (m *ListRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRepoRequest) ProtoMessage()               {}
func (*ListRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ListRepoRequest) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type DeleteRepoRequest struct {
	Repo  *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Force bool  `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *DeleteRepoRequest) Reset()                    { *m = DeleteRepoRequest{} }
func (m *DeleteRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRepoRequest) ProtoMessage()               {}
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeleteRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type StartCommitRequest struct {
	Parent     *Commit   `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Provenance []*Commit `protobuf:"bytes,2,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *StartCommitRequest) Reset()                    { *m = StartCommitRequest{} }
func (m *StartCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*StartCommitRequest) ProtoMessage()               {}
func (*StartCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *StartCommitRequest) GetParent() *Commit {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *StartCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type ForkCommitRequest struct {
	Parent     *Commit   `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Branch     string    `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
	Provenance []*Commit `protobuf:"bytes,3,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *ForkCommitRequest) Reset()                    { *m = ForkCommitRequest{} }
func (m *ForkCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ForkCommitRequest) ProtoMessage()               {}
func (*ForkCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ForkCommitRequest) GetParent() *Commit {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ForkCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type FinishCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Cancel bool    `protobuf:"varint,2,opt,name=cancel" json:"cancel,omitempty"`
}

func (m *FinishCommitRequest) Reset()                    { *m = FinishCommitRequest{} }
func (m *FinishCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishCommitRequest) ProtoMessage()               {}
func (*FinishCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FinishCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ArchiveCommitRequest struct {
	Commits []*Commit `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
}

func (m *ArchiveCommitRequest) Reset()                    { *m = ArchiveCommitRequest{} }
func (m *ArchiveCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ArchiveCommitRequest) ProtoMessage()               {}
func (*ArchiveCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ArchiveCommitRequest) GetCommits() []*Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type InspectCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *InspectCommitRequest) Reset()                    { *m = InspectCommitRequest{} }
func (m *InspectCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectCommitRequest) ProtoMessage()               {}
func (*InspectCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *InspectCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ListCommitRequest struct {
	Exclude    []*Commit    `protobuf:"bytes,1,rep,name=exclude" json:"exclude,omitempty"`
	Include    []*Commit    `protobuf:"bytes,6,rep,name=include" json:"include,omitempty"`
	Provenance []*Commit    `protobuf:"bytes,2,rep,name=provenance" json:"provenance,omitempty"`
	CommitType CommitType   `protobuf:"varint,3,opt,name=commit_type,json=commitType,enum=pfs.CommitType" json:"commit_type,omitempty"`
	Status     CommitStatus `protobuf:"varint,4,opt,name=status,enum=pfs.CommitStatus" json:"status,omitempty"`
	Block      bool         `protobuf:"varint,5,opt,name=block" json:"block,omitempty"`
}

func (m *ListCommitRequest) Reset()                    { *m = ListCommitRequest{} }
func (m *ListCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCommitRequest) ProtoMessage()               {}
func (*ListCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListCommitRequest) GetExclude() []*Commit {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *ListCommitRequest) GetInclude() []*Commit {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *ListCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type ListBranchRequest struct {
	Repo   *Repo        `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Status CommitStatus `protobuf:"varint,2,opt,name=status,enum=pfs.CommitStatus" json:"status,omitempty"`
}

func (m *ListBranchRequest) Reset()                    { *m = ListBranchRequest{} }
func (m *ListBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBranchRequest) ProtoMessage()               {}
func (*ListBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ListBranchRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type DeleteCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *DeleteCommitRequest) Reset()                    { *m = DeleteCommitRequest{} }
func (m *DeleteCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCommitRequest) ProtoMessage()               {}
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type FlushCommitRequest struct {
	Commit []*Commit `protobuf:"bytes,1,rep,name=commit" json:"commit,omitempty"`
	ToRepo []*Repo   `protobuf:"bytes,2,rep,name=to_repo,json=toRepo" json:"to_repo,omitempty"`
}

func (m *FlushCommitRequest) Reset()                    { *m = FlushCommitRequest{} }
func (m *FlushCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushCommitRequest) ProtoMessage()               {}
func (*FlushCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *FlushCommitRequest) GetCommit() []*Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *FlushCommitRequest) GetToRepo() []*Repo {
	if m != nil {
		return m.ToRepo
	}
	return nil
}

// DiffMethod specifies how file operations represent changes to files.
// If FromCommit is nil then the whole file will be returned.
// If FromCommit is not nil and FullFile is false then only the changes since
// FromCommit will be returned.
// If FromCommit is not nil and FullFile is true then the whole file will be
// returned if there have been changes since FromCommit.
type DiffMethod struct {
	FromCommit *Commit `protobuf:"bytes,1,opt,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
	FullFile   bool    `protobuf:"varint,2,opt,name=full_file,json=fullFile" json:"full_file,omitempty"`
}

func (m *DiffMethod) Reset()                    { *m = DiffMethod{} }
func (m *DiffMethod) String() string            { return proto.CompactTextString(m) }
func (*DiffMethod) ProtoMessage()               {}
func (*DiffMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DiffMethod) GetFromCommit() *Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

type GetFileRequest struct {
	File        *File       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	OffsetBytes int64       `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	SizeBytes   int64       `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Shard       *Shard      `protobuf:"bytes,4,opt,name=shard" json:"shard,omitempty"`
	DiffMethod  *DiffMethod `protobuf:"bytes,5,opt,name=diff_method,json=diffMethod" json:"diff_method,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *GetFileRequest) GetDiffMethod() *DiffMethod {
	if m != nil {
		return m.DiffMethod
	}
	return nil
}

type PutFileRequest struct {
	File      *File     `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType  FileType  `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
	Value     []byte    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Delimiter Delimiter `protobuf:"varint,4,opt,name=delimiter,enum=pfs.Delimiter" json:"delimiter,omitempty"`
	Url       string    `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	// applies only to URLs that can be recursively walked, for example s3:// URLs
	Recursive bool `protobuf:"varint,6,opt,name=recursive" json:"recursive,omitempty"`
}

func (m *PutFileRequest) Reset()                    { *m = PutFileRequest{} }
func (m *PutFileRequest) String() string            { return proto.CompactTextString(m) }
func (*PutFileRequest) ProtoMessage()               {}
func (*PutFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *PutFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type InspectFileRequest struct {
	File       *File       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard      *Shard      `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	DiffMethod *DiffMethod `protobuf:"bytes,3,opt,name=diff_method,json=diffMethod" json:"diff_method,omitempty"`
}

func (m *InspectFileRequest) Reset()                    { *m = InspectFileRequest{} }
func (m *InspectFileRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectFileRequest) ProtoMessage()               {}
func (*InspectFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *InspectFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *InspectFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *InspectFileRequest) GetDiffMethod() *DiffMethod {
	if m != nil {
		return m.DiffMethod
	}
	return nil
}

type ListFileRequest struct {
	File       *File        `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard      *Shard       `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	DiffMethod *DiffMethod  `protobuf:"bytes,3,opt,name=diff_method,json=diffMethod" json:"diff_method,omitempty"`
	Mode       ListFileMode `protobuf:"varint,4,opt,name=mode,enum=pfs.ListFileMode" json:"mode,omitempty"`
}

func (m *ListFileRequest) Reset()                    { *m = ListFileRequest{} }
func (m *ListFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFileRequest) ProtoMessage()               {}
func (*ListFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ListFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *ListFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *ListFileRequest) GetDiffMethod() *DiffMethod {
	if m != nil {
		return m.DiffMethod
	}
	return nil
}

type DeleteFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *DeleteFileRequest) Reset()                    { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()               {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeleteFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type SquashCommitRequest struct {
	FromCommits []*Commit `protobuf:"bytes,1,rep,name=from_commits,json=fromCommits" json:"from_commits,omitempty"`
	ToCommit    *Commit   `protobuf:"bytes,2,opt,name=to_commit,json=toCommit" json:"to_commit,omitempty"`
}

func (m *SquashCommitRequest) Reset()                    { *m = SquashCommitRequest{} }
func (m *SquashCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*SquashCommitRequest) ProtoMessage()               {}
func (*SquashCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SquashCommitRequest) GetFromCommits() []*Commit {
	if m != nil {
		return m.FromCommits
	}
	return nil
}

func (m *SquashCommitRequest) GetToCommit() *Commit {
	if m != nil {
		return m.ToCommit
	}
	return nil
}

type ReplayCommitRequest struct {
	FromCommits []*Commit `protobuf:"bytes,1,rep,name=from_commits,json=fromCommits" json:"from_commits,omitempty"`
	ToBranch    string    `protobuf:"bytes,2,opt,name=to_branch,json=toBranch" json:"to_branch,omitempty"`
}

func (m *ReplayCommitRequest) Reset()                    { *m = ReplayCommitRequest{} }
func (m *ReplayCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplayCommitRequest) ProtoMessage()               {}
func (*ReplayCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ReplayCommitRequest) GetFromCommits() []*Commit {
	if m != nil {
		return m.FromCommits
	}
	return nil
}

type PutBlockRequest struct {
	Value     []byte    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Delimiter Delimiter `protobuf:"varint,2,opt,name=delimiter,enum=pfs.Delimiter" json:"delimiter,omitempty"`
}

func (m *PutBlockRequest) Reset()                    { *m = PutBlockRequest{} }
func (m *PutBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*PutBlockRequest) ProtoMessage()               {}
func (*PutBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type GetBlockRequest struct {
	Block       *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	OffsetBytes uint64 `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	SizeBytes   uint64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type DeleteBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *DeleteBlockRequest) Reset()                    { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()               {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *DeleteBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type InspectBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *InspectBlockRequest) Reset()                    { *m = InspectBlockRequest{} }
func (m *InspectBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectBlockRequest) ProtoMessage()               {}
func (*InspectBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *InspectBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ListBlockRequest struct {
}

func (m *ListBlockRequest) Reset()                    { *m = ListBlockRequest{} }
func (m *ListBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBlockRequest) ProtoMessage()               {}
func (*ListBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type PutObjectRequest struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Tags  []*Tag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *PutObjectRequest) Reset()                    { *m = PutObjectRequest{} }
func (m *PutObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*PutObjectRequest) ProtoMessage()               {}
func (*PutObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *PutObjectRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ObjectIndex struct {
	Object map[string]*BlockRef `protobuf:"bytes,1,rep,name=object" json:"object,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags   map[string]*Object   `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ObjectIndex) Reset()                    { *m = ObjectIndex{} }
func (m *ObjectIndex) String() string            { return proto.CompactTextString(m) }
func (*ObjectIndex) ProtoMessage()               {}
func (*ObjectIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ObjectIndex) GetObject() map[string]*BlockRef {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ObjectIndex) GetTags() map[string]*Object {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Repo)(nil), "pfs.Repo")
	proto.RegisterType((*Commit)(nil), "pfs.Commit")
	proto.RegisterType((*Commits)(nil), "pfs.Commits")
	proto.RegisterType((*Branches)(nil), "pfs.Branches")
	proto.RegisterType((*File)(nil), "pfs.File")
	proto.RegisterType((*Block)(nil), "pfs.Block")
	proto.RegisterType((*Object)(nil), "pfs.Object")
	proto.RegisterType((*Tag)(nil), "pfs.Tag")
	proto.RegisterType((*RepoInfo)(nil), "pfs.RepoInfo")
	proto.RegisterType((*RepoInfos)(nil), "pfs.RepoInfos")
	proto.RegisterType((*CommitInfo)(nil), "pfs.CommitInfo")
	proto.RegisterType((*CommitInfos)(nil), "pfs.CommitInfos")
	proto.RegisterType((*FileInfo)(nil), "pfs.FileInfo")
	proto.RegisterType((*FileInfos)(nil), "pfs.FileInfos")
	proto.RegisterType((*ByteRange)(nil), "pfs.ByteRange")
	proto.RegisterType((*BlockRef)(nil), "pfs.BlockRef")
	proto.RegisterType((*BlockRefs)(nil), "pfs.BlockRefs")
	proto.RegisterType((*Append)(nil), "pfs.Append")
	proto.RegisterType((*BlockInfo)(nil), "pfs.BlockInfo")
	proto.RegisterType((*BlockInfos)(nil), "pfs.BlockInfos")
	proto.RegisterType((*Shard)(nil), "pfs.Shard")
	proto.RegisterType((*CreateRepoRequest)(nil), "pfs.CreateRepoRequest")
	proto.RegisterType((*InspectRepoRequest)(nil), "pfs.InspectRepoRequest")
	proto.RegisterType((*ListRepoRequest)(nil), "pfs.ListRepoRequest")
	proto.RegisterType((*DeleteRepoRequest)(nil), "pfs.DeleteRepoRequest")
	proto.RegisterType((*StartCommitRequest)(nil), "pfs.StartCommitRequest")
	proto.RegisterType((*ForkCommitRequest)(nil), "pfs.ForkCommitRequest")
	proto.RegisterType((*FinishCommitRequest)(nil), "pfs.FinishCommitRequest")
	proto.RegisterType((*ArchiveCommitRequest)(nil), "pfs.ArchiveCommitRequest")
	proto.RegisterType((*InspectCommitRequest)(nil), "pfs.InspectCommitRequest")
	proto.RegisterType((*ListCommitRequest)(nil), "pfs.ListCommitRequest")
	proto.RegisterType((*ListBranchRequest)(nil), "pfs.ListBranchRequest")
	proto.RegisterType((*DeleteCommitRequest)(nil), "pfs.DeleteCommitRequest")
	proto.RegisterType((*FlushCommitRequest)(nil), "pfs.FlushCommitRequest")
	proto.RegisterType((*DiffMethod)(nil), "pfs.DiffMethod")
	proto.RegisterType((*GetFileRequest)(nil), "pfs.GetFileRequest")
	proto.RegisterType((*PutFileRequest)(nil), "pfs.PutFileRequest")
	proto.RegisterType((*InspectFileRequest)(nil), "pfs.InspectFileRequest")
	proto.RegisterType((*ListFileRequest)(nil), "pfs.ListFileRequest")
	proto.RegisterType((*DeleteFileRequest)(nil), "pfs.DeleteFileRequest")
	proto.RegisterType((*SquashCommitRequest)(nil), "pfs.SquashCommitRequest")
	proto.RegisterType((*ReplayCommitRequest)(nil), "pfs.ReplayCommitRequest")
	proto.RegisterType((*PutBlockRequest)(nil), "pfs.PutBlockRequest")
	proto.RegisterType((*GetBlockRequest)(nil), "pfs.GetBlockRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "pfs.DeleteBlockRequest")
	proto.RegisterType((*InspectBlockRequest)(nil), "pfs.InspectBlockRequest")
	proto.RegisterType((*ListBlockRequest)(nil), "pfs.ListBlockRequest")
	proto.RegisterType((*PutObjectRequest)(nil), "pfs.PutObjectRequest")
	proto.RegisterType((*ObjectIndex)(nil), "pfs.ObjectIndex")
	proto.RegisterEnum("pfs.CommitType", CommitType_name, CommitType_value)
	proto.RegisterEnum("pfs.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("pfs.CommitStatus", CommitStatus_name, CommitStatus_value)
	proto.RegisterEnum("pfs.Delimiter", Delimiter_name, Delimiter_value)
	proto.RegisterEnum("pfs.ListFileMode", ListFileMode_name, ListFileMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for API service

type APIClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// Fork creates a commit on a new branch.
	ForkCommit(ctx context.Context, in *ForkCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// ArchiveCommit marks commits as archived, it will be excluded from ListCommit.
	ArchiveCommit(ctx context.Context, in *ArchiveCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*Branches, error)
	// Squash returns the head of the commit of the merge
	SquashCommit(ctx context.Context, in *SquashCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Replay returns the head of the commit of the merge
	ReplayCommit(ctx context.Context, in *ReplayCommitRequest, opts ...grpc.CallOption) (*Commits, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error)
	// InspectFile returns info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// ArchiveAll archives everything
	ArchiveAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.API/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ForkCommit(ctx context.Context, in *ForkCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.API/ForkCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveCommit(ctx context.Context, in *ArchiveCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/ArchiveCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/FlushCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*Branches, error) {
	out := new(Branches)
	err := grpc.Invoke(ctx, "/pfs.API/ListBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SquashCommit(ctx context.Context, in *SquashCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/SquashCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReplayCommit(ctx context.Context, in *ReplayCommitRequest, opts ...grpc.CallOption) (*Commits, error) {
	out := new(Commits)
	err := grpc.Invoke(ctx, "/pfs.API/ReplayCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pfs.API/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPutFileClient{stream}
	return x, nil
}

type API_PutFileClient interface {
	Send(*PutFileRequest) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type aPIPutFileClient struct {
	grpc.ClientStream
}

func (x *aPIPutFileClient) Send(m *PutFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPutFileClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pfs.API/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type aPIGetFileClient struct {
	grpc.ClientStream
}

func (x *aPIGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/ArchiveAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(context.Context, *StartCommitRequest) (*Commit, error)
	// Fork creates a commit on a new branch.
	ForkCommit(context.Context, *ForkCommitRequest) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// ArchiveCommit marks commits as archived, it will be excluded from ListCommit.
	ArchiveCommit(context.Context, *ArchiveCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(context.Context, *FlushCommitRequest) (*CommitInfos, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(context.Context, *ListBranchRequest) (*Branches, error)
	// Squash returns the head of the commit of the merge
	SquashCommit(context.Context, *SquashCommitRequest) (*google_protobuf1.Empty, error)
	// Replay returns the head of the commit of the merge
	ReplayCommit(context.Context, *ReplayCommitRequest) (*Commits, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(API_PutFileServer) error
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, API_GetFileServer) error
	// InspectFile returns info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	// ArchiveAll archives everything
	ArchiveAll(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectRepo(ctx, req.(*InspectRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRepo(ctx, req.(*ListRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteRepo(ctx, req.(*DeleteRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/StartCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartCommit(ctx, req.(*StartCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ForkCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ForkCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ForkCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ForkCommit(ctx, req.(*ForkCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FinishCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FinishCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/FinishCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FinishCommit(ctx, req.(*FinishCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ArchiveCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ArchiveCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ArchiveCommit(ctx, req.(*ArchiveCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectCommit(ctx, req.(*InspectCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCommit(ctx, req.(*ListCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FlushCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FlushCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/FlushCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FlushCommit(ctx, req.(*FlushCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBranch(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SquashCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquashCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SquashCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/SquashCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SquashCommit(ctx, req.(*SquashCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReplayCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ReplayCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ReplayCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ReplayCommit(ctx, req.(*ReplayCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).PutFile(&aPIPutFileServer{stream})
}

type API_PutFileServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*PutFileRequest, error)
	grpc.ServerStream
}

type aPIPutFileServer struct {
	grpc.ServerStream
}

func (x *aPIPutFileServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPutFileServer) Recv() (*PutFileRequest, error) {
	m := new(PutFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetFile(m, &aPIGetFileServer{stream})
}

type API_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type aPIGetFileServer struct {
	grpc.ServerStream
}

func (x *aPIGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _API_InspectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectFile(ctx, req.(*InspectFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFile(ctx, req.(*ListFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ArchiveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ArchiveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ArchiveAll(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _API_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _API_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _API_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _API_DeleteRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _API_StartCommit_Handler,
		},
		{
			MethodName: "ForkCommit",
			Handler:    _API_ForkCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _API_FinishCommit_Handler,
		},
		{
			MethodName: "ArchiveCommit",
			Handler:    _API_ArchiveCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _API_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _API_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _API_DeleteCommit_Handler,
		},
		{
			MethodName: "FlushCommit",
			Handler:    _API_FlushCommit_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _API_ListBranch_Handler,
		},
		{
			MethodName: "SquashCommit",
			Handler:    _API_SquashCommit_Handler,
		},
		{
			MethodName: "ReplayCommit",
			Handler:    _API_ReplayCommit_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _API_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _API_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _API_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
		{
			MethodName: "ArchiveAll",
			Handler:    _API_ArchiveAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _API_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _API_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for BlockAPI service

type BlockAPIClient interface {
	PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_PutBlockClient, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (BlockAPI_GetBlockClient, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*BlockInfo, error)
	ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*BlockInfos, error)
}

type blockAPIClient struct {
	cc *grpc.ClientConn
}

func NewBlockAPIClient(cc *grpc.ClientConn) BlockAPIClient {
	return &blockAPIClient{cc}
}

func (c *blockAPIClient) PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_PutBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[0], c.cc, "/pfs.BlockAPI/PutBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIPutBlockClient{stream}
	return x, nil
}

type BlockAPI_PutBlockClient interface {
	Send(*PutBlockRequest) error
	CloseAndRecv() (*BlockRefs, error)
	grpc.ClientStream
}

type blockAPIPutBlockClient struct {
	grpc.ClientStream
}

func (x *blockAPIPutBlockClient) Send(m *PutBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockAPIPutBlockClient) CloseAndRecv() (*BlockRefs, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BlockRefs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (BlockAPI_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[1], c.cc, "/pfs.BlockAPI/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIGetBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAPI_GetBlockClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type blockAPIGetBlockClient struct {
	grpc.ClientStream
}

func (x *blockAPIGetBlockClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/DeleteBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/InspectBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*BlockInfos, error) {
	out := new(BlockInfos)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/ListBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockAPI service

type BlockAPIServer interface {
	PutBlock(BlockAPI_PutBlockServer) error
	GetBlock(*GetBlockRequest, BlockAPI_GetBlockServer) error
	DeleteBlock(context.Context, *DeleteBlockRequest) (*google_protobuf1.Empty, error)
	InspectBlock(context.Context, *InspectBlockRequest) (*BlockInfo, error)
	ListBlock(context.Context, *ListBlockRequest) (*BlockInfos, error)
}

func RegisterBlockAPIServer(s *grpc.Server, srv BlockAPIServer) {
	s.RegisterService(&_BlockAPI_serviceDesc, srv)
}

func _BlockAPI_PutBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockAPIServer).PutBlock(&blockAPIPutBlockServer{stream})
}

type BlockAPI_PutBlockServer interface {
	SendAndClose(*BlockRefs) error
	Recv() (*PutBlockRequest, error)
	grpc.ServerStream
}

type blockAPIPutBlockServer struct {
	grpc.ServerStream
}

func (x *blockAPIPutBlockServer) SendAndClose(m *BlockRefs) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockAPIPutBlockServer) Recv() (*PutBlockRequest, error) {
	m := new(PutBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlockAPI_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAPIServer).GetBlock(m, &blockAPIGetBlockServer{stream})
}

type BlockAPI_GetBlockServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type blockAPIGetBlockServer struct {
	grpc.ServerStream
}

func (x *blockAPIGetBlockServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockAPI_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_InspectBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).InspectBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/InspectBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).InspectBlock(ctx, req.(*InspectBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_ListBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).ListBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/ListBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).ListBlock(ctx, req.(*ListBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.BlockAPI",
	HandlerType: (*BlockAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBlock",
			Handler:    _BlockAPI_DeleteBlock_Handler,
		},
		{
			MethodName: "InspectBlock",
			Handler:    _BlockAPI_InspectBlock_Handler,
		},
		{
			MethodName: "ListBlock",
			Handler:    _BlockAPI_ListBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutBlock",
			Handler:       _BlockAPI_PutBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlock",
			Handler:       _BlockAPI_GetBlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for ObjectAPI service

type ObjectAPIClient interface {
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*Object, error)
	GetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*google_protobuf3.BytesValue, error)
	GetTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*google_protobuf3.BytesValue, error)
}

type objectAPIClient struct {
	cc *grpc.ClientConn
}

func NewObjectAPIClient(cc *grpc.ClientConn) ObjectAPIClient {
	return &objectAPIClient{cc}
}

func (c *objectAPIClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/PutObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectAPIClient) GetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*google_protobuf3.BytesValue, error) {
	out := new(google_protobuf3.BytesValue)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/GetObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectAPIClient) GetTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*google_protobuf3.BytesValue, error) {
	out := new(google_protobuf3.BytesValue)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/GetTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ObjectAPI service

type ObjectAPIServer interface {
	PutObject(context.Context, *PutObjectRequest) (*Object, error)
	GetObject(context.Context, *Object) (*google_protobuf3.BytesValue, error)
	GetTag(context.Context, *Tag) (*google_protobuf3.BytesValue, error)
}

func RegisterObjectAPIServer(s *grpc.Server, srv ObjectAPIServer) {
	s.RegisterService(&_ObjectAPI_serviceDesc, srv)
}

func _ObjectAPI_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectAPI_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).GetObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectAPI_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).GetTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.ObjectAPI",
	HandlerType: (*ObjectAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _ObjectAPI_PutObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ObjectAPI_GetObject_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _ObjectAPI_GetTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("client/pfs/pfs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x19, 0x4d, 0x73, 0xdb, 0xc6,
	0x55, 0x00, 0x3f, 0x04, 0x3c, 0x52, 0x14, 0xb5, 0x52, 0x5c, 0x85, 0x56, 0x1a, 0x79, 0x5d, 0x67,
	0x64, 0x37, 0x95, 0x1d, 0xf9, 0x73, 0xec, 0x3a, 0x0e, 0x2d, 0x51, 0xb6, 0x3a, 0x94, 0xe4, 0x59,
	0xd1, 0xc9, 0xf4, 0x90, 0xe1, 0x80, 0xe4, 0x42, 0x42, 0x0d, 0x02, 0x08, 0x00, 0x3a, 0x51, 0x67,
	0x7a, 0x68, 0x7b, 0xe8, 0xf4, 0xdc, 0x99, 0xde, 0x7b, 0x6c, 0xfb, 0x07, 0x7a, 0xeb, 0xa9, 0xe7,
	0xfe, 0xa5, 0xce, 0x7e, 0x00, 0x5c, 0x10, 0x14, 0x29, 0xb9, 0xd3, 0xe9, 0xc1, 0xe6, 0xee, 0xbe,
	0xcf, 0x7d, 0x1f, 0xfb, 0xde, 0x83, 0x60, 0xad, 0xef, 0x3a, 0xd4, 0x8b, 0xef, 0x06, 0x76, 0xc4,
	0xfe, 0x6d, 0x07, 0xa1, 0x1f, 0xfb, 0xa8, 0x10, 0xd8, 0x51, 0x63, 0xe3, 0xd4, 0xf7, 0x4f, 0x5d,
	0x7a, 0xd7, 0x0a, 0x9c, 0xbb, 0x96, 0xe7, 0xf9, 0xb1, 0x15, 0x3b, 0xbe, 0x27, 0x51, 0x1a, 0xd7,
	0x25, 0x94, 0xef, 0x7a, 0x23, 0xfb, 0x2e, 0x1d, 0x06, 0xf1, 0xb9, 0x04, 0x7e, 0x3a, 0x09, 0x8c,
	0x9d, 0x21, 0x8d, 0x62, 0x6b, 0x18, 0x48, 0x84, 0x1f, 0x4f, 0x22, 0x7c, 0x1f, 0x5a, 0x41, 0x40,
	0xc3, 0x84, 0xfb, 0x46, 0xa2, 0xd6, 0xbb, 0xd3, 0xbb, 0xd1, 0x99, 0x15, 0x0e, 0xc4, 0xff, 0x02,
	0x8a, 0x1b, 0x50, 0x24, 0x34, 0xf0, 0x11, 0x82, 0xa2, 0x67, 0x0d, 0xe9, 0xba, 0xb6, 0xa9, 0x6d,
	0x99, 0x84, 0xaf, 0xf1, 0x63, 0x28, 0xef, 0xfa, 0xc3, 0xa1, 0x13, 0xa3, 0x4f, 0xa0, 0x18, 0xd2,
	0xc0, 0xe7, 0xd0, 0xca, 0x8e, 0xb9, 0xcd, 0xae, 0xc7, 0xc8, 0x08, 0x3f, 0x46, 0x35, 0xd0, 0x9d,
	0xc1, 0xba, 0xce, 0x49, 0x75, 0x67, 0x80, 0xb7, 0x61, 0x51, 0x10, 0x46, 0xe8, 0x26, 0x94, 0xfb,
	0x7c, 0xb9, 0xae, 0x6d, 0x16, 0xb6, 0x2a, 0x3b, 0x15, 0x4e, 0x2b, 0xa0, 0x44, 0x82, 0xf0, 0x67,
	0x60, 0xbc, 0x0c, 0x2d, 0xaf, 0x7f, 0x46, 0x23, 0xd4, 0x00, 0xa3, 0x27, 0xd7, 0x9c, 0xc4, 0x24,
	0xe9, 0x1e, 0xbf, 0x80, 0xe2, 0xbe, 0xe3, 0xd2, 0x0c, 0x53, 0xed, 0x02, 0xa6, 0xec, 0x46, 0x81,
	0x15, 0x9f, 0x49, 0xb5, 0xf8, 0x1a, 0x5f, 0x87, 0xd2, 0x4b, 0xd7, 0xef, 0xbf, 0x63, 0xc0, 0x33,
	0x2b, 0x3a, 0x4b, 0xae, 0xcb, 0xd6, 0x78, 0x03, 0xca, 0xc7, 0xbd, 0x5f, 0xd1, 0x7e, 0x3c, 0x15,
	0xfa, 0x31, 0x14, 0x3a, 0xd6, 0xe9, 0x54, 0x3b, 0xfd, 0x55, 0x03, 0x83, 0x59, 0xe3, 0xc0, 0xb3,
	0xfd, 0x79, 0xa6, 0x7a, 0x00, 0x8b, 0xfd, 0x90, 0x5a, 0x31, 0x15, 0xf6, 0xaa, 0xec, 0x34, 0xb6,
	0x85, 0xff, 0xb6, 0x13, 0xff, 0x6d, 0x77, 0x12, 0x07, 0x93, 0x04, 0x15, 0x7d, 0x02, 0x10, 0x39,
	0xbf, 0xa6, 0xdd, 0xde, 0x79, 0x4c, 0xa3, 0xf5, 0xc2, 0xa6, 0xb6, 0x55, 0x24, 0x26, 0x3b, 0x79,
	0xc9, 0x0e, 0xd0, 0x6d, 0x80, 0x20, 0xf4, 0xdf, 0x53, 0xcf, 0xf2, 0xfa, 0x74, 0xbd, 0xc8, 0x0d,
	0xad, 0x48, 0x56, 0x80, 0xf8, 0x31, 0x98, 0x89, 0xaa, 0x11, 0xba, 0x03, 0x26, 0x53, 0xaa, 0xeb,
	0x78, 0xb6, 0x2f, 0xfd, 0xb3, 0x94, 0x92, 0x31, 0x14, 0x62, 0x84, 0x72, 0x85, 0xff, 0x52, 0x00,
	0x10, 0x16, 0xe6, 0xd7, 0xbc, 0x94, 0x0b, 0xae, 0x41, 0x59, 0xf8, 0x4e, 0x3a, 0x41, 0xee, 0xd0,
	0x3d, 0xa8, 0x08, 0x8c, 0x6e, 0x7c, 0x1e, 0x50, 0x7e, 0x9f, 0xda, 0xce, 0xb2, 0xc2, 0xa1, 0x73,
	0x1e, 0x50, 0x02, 0xfd, 0x74, 0x8d, 0xee, 0xc1, 0x52, 0x60, 0x85, 0xd4, 0x8b, 0xbb, 0x52, 0x6a,
	0x31, 0x2f, 0xb5, 0x2a, 0x30, 0x64, 0xc8, 0x3e, 0x80, 0xc5, 0x28, 0xb6, 0x42, 0x66, 0xe8, 0xd2,
	0x7c, 0x43, 0x4b, 0x54, 0xf4, 0x08, 0x0c, 0xdb, 0xf1, 0x9c, 0xe8, 0x8c, 0x0e, 0xd6, 0xcb, 0x73,
	0xc9, 0x52, 0xdc, 0x09, 0x07, 0x2d, 0x4e, 0x3a, 0x68, 0x03, 0xcc, 0x3e, 0x33, 0xbf, 0xeb, 0xd2,
	0xc1, 0xba, 0xb1, 0xa9, 0x6d, 0x19, 0x64, 0x7c, 0xc0, 0x42, 0xde, 0x0a, 0xfb, 0x67, 0xce, 0x7b,
	0x3a, 0x58, 0x37, 0x39, 0x30, 0xdd, 0xa3, 0x9f, 0x66, 0x5c, 0x0b, 0xf9, 0x1c, 0x52, 0x9d, 0xfb,
	0x02, 0x2a, 0x63, 0x17, 0x45, 0x8a, 0x99, 0x15, 0x07, 0xab, 0x66, 0xe6, 0x2e, 0x96, 0x66, 0xe6,
	0x4e, 0xfe, 0xa3, 0x0e, 0x06, 0xcb, 0xb0, 0x24, 0x92, 0x6d, 0xc7, 0xa5, 0x99, 0x48, 0x66, 0x40,
	0xc2, 0x8f, 0x59, 0xf0, 0xb0, 0x5f, 0xe1, 0x42, 0x9d, 0xbb, 0x70, 0x29, 0xc5, 0xe1, 0x0e, 0x34,
	0x6c, 0xb9, 0x9a, 0x17, 0xbf, 0x8f, 0xc0, 0x18, 0xfa, 0x03, 0xc7, 0x76, 0xe8, 0x40, 0x3a, 0x76,
	0xa6, 0xd5, 0x13, 0x5c, 0xf4, 0x00, 0x96, 0xe5, 0x05, 0x53, 0xf2, 0x52, 0x3e, 0x2e, 0x6a, 0x02,
	0xe7, 0x30, 0xa1, 0xba, 0x05, 0x46, 0xff, 0xcc, 0x71, 0x07, 0x21, 0xf5, 0xd6, 0xcb, 0x4a, 0xae,
	0xf0, 0xbb, 0xa5, 0x20, 0x96, 0x29, 0x89, 0x29, 0xa2, 0xf4, 0xb2, 0xb9, 0x4c, 0x49, 0x50, 0xc4,
	0x65, 0xb9, 0x11, 0x1f, 0x83, 0xc9, 0xae, 0x45, 0x2c, 0xef, 0x94, 0xa2, 0x35, 0x28, 0xb9, 0xfe,
	0xf7, 0x34, 0xe4, 0x56, 0x2c, 0x12, 0xb1, 0x61, 0xa7, 0x23, 0xf6, 0x46, 0x73, 0xbb, 0x15, 0x89,
	0xd8, 0x60, 0x02, 0x06, 0x7f, 0x9d, 0x08, 0xb5, 0xd1, 0x26, 0x94, 0x7a, 0x6c, 0x2d, 0xad, 0x0f,
	0x5c, 0x98, 0x80, 0x0a, 0x00, 0xfa, 0x09, 0x94, 0x42, 0x26, 0x42, 0xbe, 0x23, 0x35, 0x81, 0x91,
	0x08, 0x26, 0x02, 0xc8, 0x95, 0x91, 0x3c, 0xf9, 0x2d, 0x38, 0x6d, 0x37, 0xa4, 0x76, 0xe6, 0x16,
	0x09, 0x0a, 0x31, 0x7a, 0x72, 0x85, 0xff, 0xac, 0x43, 0xb9, 0x19, 0x04, 0xd4, 0x1b, 0xa0, 0xcf,
	0x01, 0x52, 0xb2, 0x68, 0x3a, 0x9d, 0xd9, 0x4b, 0x85, 0x3c, 0x54, 0xcc, 0xab, 0x73, 0xdc, 0x8f,
	0x39, 0xae, 0x60, 0xb6, 0xbd, 0x2b, 0x61, 0x2d, 0x2f, 0x0e, 0xcf, 0xc7, 0xe6, 0x46, 0x9f, 0x81,
	0xe1, 0x5a, 0x51, 0xcc, 0x55, 0x2b, 0xe4, 0x9d, 0xb8, 0xc8, 0x80, 0xcc, 0x30, 0xd7, 0xa0, 0x3c,
	0xa0, 0x2e, 0x8d, 0x29, 0x8f, 0x14, 0x83, 0xc8, 0x5d, 0x36, 0x1c, 0x4b, 0x33, 0xc3, 0xb1, 0xf1,
	0x0c, 0x96, 0x32, 0x6a, 0xa0, 0x3a, 0x14, 0xde, 0xd1, 0x73, 0xf9, 0xa8, 0xb3, 0x25, 0xf3, 0xd0,
	0x7b, 0xcb, 0x1d, 0x09, 0xeb, 0x1a, 0x44, 0x6c, 0x9e, 0xea, 0x4f, 0x34, 0xfc, 0x3b, 0x4d, 0x9a,
	0x94, 0x27, 0xc9, 0x7c, 0x3f, 0xfd, 0x2f, 0x5e, 0x7c, 0xfc, 0x0c, 0x20, 0xd5, 0x21, 0x42, 0x3f,
	0x4b, 0x1c, 0xa4, 0x84, 0x67, 0x6d, 0xac, 0x09, 0x8f, 0x4f, 0xe1, 0x21, 0x1e, 0xa0, 0x7f, 0xd2,
	0xa0, 0x74, 0xc2, 0x7a, 0x00, 0xf4, 0x29, 0x54, 0xb8, 0xd1, 0xbc, 0xd1, 0xb0, 0x97, 0xc6, 0x28,
	0xb0, 0xa3, 0x23, 0x7e, 0x82, 0x6e, 0x40, 0x95, 0x23, 0x0c, 0xfd, 0xc1, 0xc8, 0x1d, 0x45, 0x32,
	0x5e, 0x39, 0xd1, 0xa1, 0x38, 0x62, 0x28, 0x42, 0xb8, 0x64, 0x22, 0x74, 0xad, 0xf0, 0x33, 0xc9,
	0xe5, 0x26, 0x2c, 0x09, 0x94, 0x84, 0x4d, 0x91, 0xe3, 0x08, 0x3a, 0xc9, 0x07, 0x7f, 0x0b, 0x2b,
	0xbb, 0xfc, 0xf2, 0xbc, 0x66, 0xd1, 0xef, 0x46, 0x34, 0x9a, 0xdb, 0x78, 0x64, 0x0b, 0x9f, 0x3e,
	0xab, 0xf0, 0xdd, 0x07, 0x74, 0xe0, 0x45, 0x01, 0xed, 0xc7, 0x97, 0xe7, 0x8f, 0x7f, 0x0e, 0xcb,
	0x6d, 0x27, 0xca, 0x50, 0x64, 0x45, 0x6a, 0xb3, 0x44, 0xbe, 0x86, 0x95, 0x3d, 0x1e, 0x9c, 0x57,
	0xb8, 0xd1, 0x1a, 0x94, 0x6c, 0x3f, 0xec, 0xa7, 0x71, 0xc7, 0x37, 0xd8, 0x06, 0x74, 0xc2, 0x2a,
	0x94, 0x4c, 0x06, 0xc9, 0xea, 0x26, 0x94, 0x45, 0xc9, 0x9b, 0x5a, 0x83, 0x05, 0x68, 0xa2, 0x80,
	0xe8, 0xb3, 0x0b, 0xc8, 0x6f, 0x60, 0x65, 0xdf, 0x0f, 0xdf, 0x7d, 0x80, 0x98, 0x8b, 0x4a, 0x7d,
	0x56, 0x7c, 0x61, 0xb6, 0x78, 0x02, 0xab, 0xfb, 0xbc, 0xa2, 0xe6, 0x14, 0xb8, 0x54, 0xaf, 0x21,
	0x2a, 0xaa, 0xb4, 0x9c, 0xdc, 0xe1, 0xe7, 0xb0, 0xd6, 0x14, 0xc5, 0x34, 0xcb, 0xf4, 0x16, 0x2c,
	0x0a, 0xca, 0x68, 0x5a, 0x67, 0x9a, 0xc0, 0xf0, 0x33, 0x58, 0x93, 0x61, 0x73, 0x75, 0x9d, 0xf0,
	0x6f, 0x75, 0x58, 0x61, 0xf1, 0x93, 0x93, 0x4c, 0x7f, 0xe8, 0xbb, 0xa3, 0x01, 0x9d, 0x2a, 0x59,
	0xc2, 0x18, 0x9a, 0xe3, 0x09, 0xb4, 0xf2, 0x14, 0x34, 0x09, 0xbb, 0x92, 0x7f, 0x3f, 0xa0, 0xf1,
	0xba, 0x0d, 0xe5, 0x28, 0xb6, 0x62, 0x99, 0xb3, 0xb5, 0x9d, 0x15, 0x05, 0xf9, 0x84, 0x03, 0x88,
	0x44, 0x60, 0xa1, 0x2b, 0x9e, 0xc2, 0x92, 0x08, 0x5d, 0xbe, 0x61, 0x69, 0xcd, 0x4c, 0x20, 0xfa,
	0xfb, 0x4b, 0xa7, 0x75, 0x22, 0x54, 0x9f, 0x23, 0x14, 0x3f, 0x85, 0x55, 0x91, 0x63, 0x1f, 0xe0,
	0x9e, 0x6f, 0x01, 0xed, 0xbb, 0xa3, 0x59, 0xd1, 0x76, 0xd1, 0xc4, 0x82, 0x30, 0x2c, 0xc6, 0x7e,
	0x97, 0xdf, 0x21, 0xf7, 0xea, 0x94, 0x63, 0x9f, 0xfd, 0xe2, 0x6f, 0x00, 0xf6, 0x1c, 0xdb, 0x3e,
	0xa4, 0xf1, 0x99, 0xcf, 0x8a, 0x68, 0xc5, 0x0e, 0xfd, 0x61, 0xf7, 0x62, 0xb5, 0x80, 0xc1, 0x65,
	0xf7, 0x7a, 0x1d, 0x4c, 0x7b, 0xe4, 0xba, 0x5d, 0xde, 0x80, 0x89, 0x80, 0x36, 0xd8, 0x01, 0x2b,
	0x66, 0xf8, 0x5f, 0x1a, 0xd4, 0x5e, 0xd1, 0x98, 0xf7, 0x2b, 0x63, 0x83, 0xce, 0xea, 0xd5, 0x6e,
	0x40, 0xd5, 0xb7, 0xed, 0x88, 0xc6, 0xb2, 0x9e, 0x30, 0x8e, 0x05, 0x52, 0x11, 0x67, 0xa2, 0x07,
	0xcb, 0x17, 0x9c, 0x82, 0xda, 0xa2, 0x6d, 0x42, 0x89, 0x8f, 0x8d, 0xb2, 0x3f, 0x13, 0x75, 0x8e,
	0x17, 0x11, 0x22, 0x00, 0x2c, 0xb6, 0x06, 0x8e, 0x6d, 0x77, 0x87, 0xfc, 0xbe, 0xb2, 0x11, 0x13,
	0xb1, 0x35, 0x36, 0x03, 0x81, 0x41, 0xba, 0xc6, 0xff, 0xd6, 0xa0, 0xf6, 0x66, 0x74, 0x95, 0x7b,
	0x5c, 0xa5, 0xe7, 0x4c, 0x2b, 0x38, 0xbb, 0x4b, 0x55, 0x56, 0x70, 0xf4, 0x39, 0x98, 0x03, 0xea,
	0x3a, 0x43, 0x27, 0xa6, 0xa1, 0x0c, 0x69, 0x51, 0x29, 0xf7, 0x92, 0x53, 0x32, 0x46, 0x60, 0x7d,
	0xc1, 0x28, 0x74, 0xf9, 0x5d, 0x4c, 0xc2, 0x96, 0xac, 0x93, 0x0f, 0x69, 0x7f, 0x14, 0x46, 0xce,
	0x7b, 0xca, 0x27, 0x04, 0x83, 0x8c, 0x0f, 0xf0, 0x1f, 0xb4, 0xb4, 0xca, 0x5c, 0xe1, 0x56, 0xa9,
	0x6d, 0xf5, 0x4b, 0xda, 0xb6, 0x30, 0xdf, 0xb6, 0x7f, 0xd7, 0x44, 0xe9, 0xfa, 0xff, 0xaa, 0x81,
	0x6e, 0x41, 0x71, 0xe8, 0x0f, 0x68, 0xe6, 0xf1, 0x48, 0xd4, 0x3a, 0xf4, 0x07, 0x94, 0x70, 0x30,
	0xde, 0x49, 0x2a, 0xe5, 0xe5, 0xd5, 0xc5, 0x3e, 0xac, 0x9e, 0x7c, 0x37, 0xb2, 0x26, 0xd3, 0x77,
	0x1b, 0xaa, 0x4a, 0x9e, 0x4d, 0x7d, 0xdc, 0x2b, 0xe3, 0x44, 0x8b, 0xd0, 0x16, 0x98, 0xb1, 0x9f,
	0x64, 0xa5, 0x9e, 0xcf, 0x4a, 0x23, 0xf6, 0xc5, 0x0a, 0xf7, 0x60, 0x95, 0xd0, 0xc0, 0xb5, 0xce,
	0xff, 0x3b, 0x81, 0xd7, 0xb9, 0xc0, 0x4c, 0xb1, 0x34, 0x62, 0x5f, 0xbc, 0x8f, 0xf8, 0x2d, 0x2c,
	0xbf, 0x19, 0xc5, 0xb2, 0xad, 0x16, 0xfc, 0xd3, 0x38, 0xd6, 0x2e, 0x8c, 0x63, 0x7d, 0x4e, 0x1c,
	0xe3, 0x11, 0x2c, 0xbf, 0xa2, 0x59, 0xb6, 0xf3, 0x1b, 0xd7, 0x69, 0x8f, 0x46, 0x71, 0xde, 0xa3,
	0x91, 0xe9, 0x52, 0x1f, 0x01, 0x12, 0x6e, 0xbd, 0x9a, 0x64, 0xfc, 0x18, 0x56, 0x65, 0x16, 0x5d,
	0x91, 0x10, 0x41, 0x9d, 0x17, 0x1b, 0x85, 0x0a, 0xef, 0x43, 0xfd, 0xcd, 0x28, 0x16, 0x5f, 0x76,
	0x66, 0xdb, 0x74, 0x03, 0x8a, 0xb1, 0x75, 0x1a, 0xc9, 0x17, 0xdd, 0xe0, 0xec, 0x3b, 0xd6, 0x29,
	0xe1, 0xa7, 0xf8, 0xf7, 0x3a, 0x54, 0x04, 0x97, 0x03, 0x6f, 0x40, 0x7f, 0x40, 0x0f, 0xa0, 0xec,
	0xf3, 0xad, 0xf4, 0xf8, 0x06, 0xc7, 0x57, 0x30, 0xe4, 0x5a, 0x0c, 0x3a, 0x12, 0x17, 0x6d, 0x67,
	0x64, 0x34, 0x72, 0x34, 0x1d, 0xeb, 0x34, 0x12, 0x14, 0x1c, 0xaf, 0xf1, 0x3a, 0x11, 0x7a, 0xd1,
	0xa0, 0x72, 0x53, 0x1d, 0x54, 0x72, 0x73, 0xd9, 0x78, 0x6e, 0x69, 0xec, 0x81, 0x99, 0x32, 0x9f,
	0xc2, 0xe7, 0x46, 0x96, 0x4f, 0x45, 0xd1, 0x4c, 0xe1, 0x72, 0xe7, 0x38, 0xf9, 0x0a, 0x24, 0xdf,
	0xd8, 0xfa, 0xee, 0xf1, 0xe1, 0xe1, 0x41, 0xa7, 0xdb, 0xf9, 0xe5, 0x9b, 0x56, 0xf7, 0xe8, 0xf8,
	0xa8, 0x55, 0x5f, 0x98, 0x3c, 0x25, 0xad, 0xe6, 0x5e, 0x5d, 0x43, 0x1f, 0xc1, 0x8a, 0x7a, 0xfa,
	0x0d, 0x39, 0xe8, 0xb4, 0xea, 0xfa, 0x9d, 0xd7, 0xe2, 0x8b, 0x03, 0x67, 0x87, 0xa0, 0xb6, 0x7f,
	0xd0, 0x6e, 0x65, 0x98, 0x7d, 0x04, 0x2b, 0xe3, 0x33, 0xd2, 0x7a, 0xf5, 0xb6, 0xdd, 0x24, 0x75,
	0x0d, 0xad, 0xc0, 0xd2, 0xf8, 0x78, 0xef, 0x80, 0xd4, 0xf5, 0x3b, 0x5f, 0x41, 0x55, 0x6d, 0x11,
	0x10, 0x40, 0xf9, 0xe8, 0x98, 0x1c, 0x36, 0xdb, 0xf5, 0x05, 0x54, 0x05, 0xa3, 0x49, 0x76, 0x5f,
	0x1f, 0x7c, 0xdd, 0x62, 0xaa, 0x2c, 0x81, 0xb9, 0xdb, 0x3c, 0xda, 0x6d, 0xb5, 0xdb, 0xad, 0xbd,
	0xba, 0x8e, 0x16, 0xa1, 0xd0, 0x6c, 0xb7, 0xeb, 0x85, 0x3b, 0xb7, 0xc1, 0x4c, 0xd3, 0x07, 0x19,
	0x50, 0x94, 0x2a, 0x18, 0x50, 0xfc, 0xc5, 0xc9, 0xf1, 0x51, 0x5d, 0x63, 0xab, 0xf6, 0xc1, 0x11,
	0x53, 0xbb, 0x0d, 0x55, 0xf5, 0x1d, 0x43, 0xab, 0xe3, 0xe7, 0xb6, 0x9b, 0x4a, 0x5d, 0x81, 0xa5,
	0xf4, 0x70, 0xbf, 0x79, 0xd2, 0xa9, 0x6b, 0xcc, 0x36, 0xe9, 0x11, 0x69, 0xed, 0xbe, 0x25, 0x27,
	0xad, 0xba, 0xbe, 0xf3, 0x4f, 0x80, 0x42, 0xf3, 0xcd, 0x01, 0xfa, 0x12, 0x60, 0x3c, 0x03, 0xa1,
	0x6b, 0xe2, 0x0d, 0x99, 0x1c, 0x8a, 0x1a, 0xd7, 0x72, 0x03, 0x64, 0x6b, 0x18, 0xc4, 0xe7, 0x78,
	0x01, 0x3d, 0x86, 0x8a, 0x32, 0xe4, 0xa0, 0x1f, 0x71, 0x06, 0xf9, 0xb1, 0xa7, 0x91, 0xfd, 0xca,
	0x87, 0x17, 0xd0, 0x0e, 0x18, 0xc9, 0xa0, 0x83, 0xd6, 0xd2, 0x57, 0x5a, 0x25, 0xa9, 0x65, 0x48,
	0x22, 0xbc, 0xc0, 0x94, 0x1d, 0x8f, 0x37, 0x52, 0xd9, 0xdc, 0xbc, 0x33, 0x43, 0xd9, 0x87, 0x50,
	0x51, 0x86, 0x1a, 0xa9, 0x6c, 0x7e, 0xcc, 0x69, 0xa8, 0x4f, 0x29, 0x5e, 0x40, 0xf7, 0x01, 0xc6,
	0x33, 0x8a, 0x14, 0x9b, 0x1b, 0x5a, 0x26, 0x89, 0x5e, 0x42, 0x55, 0x9d, 0x2c, 0xd0, 0xba, 0xac,
	0x26, 0xb9, 0x61, 0x63, 0x86, 0xbe, 0x7b, 0xb0, 0x94, 0x99, 0x24, 0x90, 0xfc, 0xae, 0x31, 0x65,
	0xba, 0x98, 0xc1, 0xe5, 0x39, 0x2c, 0x65, 0x06, 0x0a, 0xc9, 0x65, 0xda, 0x90, 0xd1, 0x98, 0xfc,
	0x56, 0x87, 0x17, 0xd0, 0x13, 0x80, 0xf1, 0x44, 0x21, 0x6f, 0x9f, 0x1b, 0x31, 0x1a, 0xf5, 0x09,
	0xc2, 0x48, 0x98, 0x40, 0xed, 0x94, 0xa5, 0x09, 0xa6, 0x34, 0xcf, 0x33, 0x94, 0x7f, 0x0a, 0x15,
	0xa5, 0x63, 0x96, 0x2e, 0xcb, 0xf7, 0xd0, 0x53, 0xe5, 0x3f, 0x14, 0x9a, 0x8b, 0x42, 0xa7, 0x68,
	0x9e, 0x99, 0x0c, 0x64, 0x64, 0x26, 0x7f, 0x0d, 0x10, 0x6a, 0xab, 0x65, 0x5e, 0xaa, 0x3d, 0xa5,
	0xf2, 0xcf, 0x50, 0xfb, 0x09, 0x54, 0xd5, 0xca, 0x2d, 0x79, 0x4c, 0x29, 0xe6, 0x8d, 0xaa, 0xa2,
	0x78, 0xc4, 0x2f, 0xbc, 0x28, 0x3b, 0x54, 0xb4, 0xca, 0x41, 0xd9, 0x7e, 0xf5, 0x62, 0x99, 0x5b,
	0x1a, 0x7a, 0x01, 0x8b, 0xb2, 0x4b, 0x97, 0xb4, 0xd9, 0x9e, 0xbd, 0x71, 0x3d, 0x47, 0xcb, 0xab,
	0xe6, 0xd7, 0xec, 0xad, 0xc5, 0x0b, 0xf7, 0x34, 0x25, 0x9b, 0x39, 0x93, 0x4c, 0x36, 0xab, 0x8c,
	0xb2, 0x5f, 0x22, 0xc7, 0xd9, 0xcc, 0xa9, 0xd6, 0x32, 0x3d, 0x57, 0x36, 0x9b, 0xd3, 0xef, 0x9b,
	0x6a, 0x36, 0x73, 0x2a, 0x35, 0x9b, 0x2f, 0x75, 0x5f, 0xf4, 0x9c, 0xbf, 0x9d, 0x34, 0xa6, 0x4d,
	0xd7, 0x45, 0x17, 0xa0, 0xcd, 0x20, 0xff, 0x12, 0x40, 0x26, 0xd2, 0x07, 0xd1, 0xef, 0xfc, 0x43,
	0x97, 0x1f, 0x4f, 0xd9, 0x33, 0xfa, 0x00, 0x8c, 0xa4, 0x8b, 0x92, 0xf7, 0x9f, 0x68, 0xaa, 0x1a,
	0xb5, 0x4c, 0x99, 0x8c, 0xb8, 0xbf, 0x9a, 0x60, 0x24, 0x4d, 0x92, 0xa4, 0x9a, 0xe8, 0x99, 0xe6,
	0x7b, 0xec, 0x2b, 0xa8, 0x28, 0x0d, 0x8f, 0xf4, 0x58, 0xbe, 0x05, 0x9a, 0x99, 0x61, 0x55, 0xb5,
	0xf5, 0x91, 0xa1, 0x3a, 0xa5, 0x1b, 0x6a, 0x4c, 0x7c, 0xe0, 0xe3, 0x19, 0x66, 0xa6, 0xdd, 0x0f,
	0xfa, 0x68, 0x9c, 0x60, 0x2a, 0xd5, 0x72, 0x96, 0x2a, 0xc2, 0x0b, 0x3b, 0x7f, 0xd3, 0xc0, 0x14,
	0x85, 0x9e, 0xd9, 0xee, 0x0b, 0x30, 0xd3, 0x76, 0x49, 0x32, 0x99, 0x6c, 0x9f, 0x1a, 0x6a, 0x73,
	0xc0, 0xab, 0x8e, 0xf9, 0x8a, 0x26, 0x24, 0x2a, 0x6c, 0x8e, 0xc1, 0xd0, 0x17, 0x50, 0x7e, 0x45,
	0xe3, 0x8e, 0x75, 0x8a, 0xd2, 0x66, 0x6b, 0x0e, 0x49, 0xaf, 0xcc, 0x8f, 0xef, 0xff, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x33, 0x64, 0xc8, 0xc7, 0x6d, 0x1d, 0x00, 0x00,
}
