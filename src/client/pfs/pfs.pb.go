// Code generated by protoc-gen-gogo.
// source: client/pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	client/pfs/pfs.proto

It has these top-level messages:
	Repo
	Commit
	Commits
	Branch
	Branches
	File
	Block
	Object
	Tag
	RepoInfo
	RepoInfos
	CommitInfo
	CommitInfos
	FileInfo
	FileInfos
	ByteRange
	BlockRef
	ObjectInfo
	CreateRepoRequest
	InspectRepoRequest
	ListRepoRequest
	DeleteRepoRequest
	StartCommitRequest
	BuildCommitRequest
	FinishCommitRequest
	InspectCommitRequest
	ListCommitRequest
	ListBranchRequest
	SetBranchRequest
	DeleteBranchRequest
	DeleteCommitRequest
	FlushCommitRequest
	SubscribeCommitRequest
	GetFileRequest
	PutFileRequest
	InspectFileRequest
	ListFileRequest
	GlobFileRequest
	DeleteFileRequest
	PutObjectRequest
	GetObjectsRequest
	TagObjectRequest
	ListObjectsRequest
	ListObjectsTaggedWithPrefixRequest
	DeleteObjectsRequest
	DeleteObjectsResponse
	ObjectIndex
*/
package pfs

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FileType int32

const (
	FileType_RESERVED FileType = 0
	FileType_FILE     FileType = 1
	FileType_DIR      FileType = 2
)

var FileType_name = map[int32]string{
	0: "RESERVED",
	1: "FILE",
	2: "DIR",
}
var FileType_value = map[string]int32{
	"RESERVED": 0,
	"FILE":     1,
	"DIR":      2,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPfs, []int{0} }

type Delimiter int32

const (
	Delimiter_NONE Delimiter = 0
	Delimiter_JSON Delimiter = 1
	Delimiter_LINE Delimiter = 2
)

var Delimiter_name = map[int32]string{
	0: "NONE",
	1: "JSON",
	2: "LINE",
}
var Delimiter_value = map[string]int32{
	"NONE": 0,
	"JSON": 1,
	"LINE": 2,
}

func (x Delimiter) String() string {
	return proto.EnumName(Delimiter_name, int32(x))
}
func (Delimiter) EnumDescriptor() ([]byte, []int) { return fileDescriptorPfs, []int{1} }

type ListFileMode int32

const (
	ListFileMode_ListFile_NORMAL  ListFileMode = 0
	ListFileMode_ListFile_FAST    ListFileMode = 1
	ListFileMode_ListFile_RECURSE ListFileMode = 2
)

var ListFileMode_name = map[int32]string{
	0: "ListFile_NORMAL",
	1: "ListFile_FAST",
	2: "ListFile_RECURSE",
}
var ListFileMode_value = map[string]int32{
	"ListFile_NORMAL":  0,
	"ListFile_FAST":    1,
	"ListFile_RECURSE": 2,
}

func (x ListFileMode) String() string {
	return proto.EnumName(ListFileMode_name, int32(x))
}
func (ListFileMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorPfs, []int{2} }

type Repo struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{0} }

func (m *Repo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Commit struct {
	Repo *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{1} }

func (m *Commit) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *Commit) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Commits struct {
	Commit []*Commit `protobuf:"bytes,1,rep,name=commit" json:"commit,omitempty"`
}

func (m *Commits) Reset()                    { *m = Commits{} }
func (m *Commits) String() string            { return proto.CompactTextString(m) }
func (*Commits) ProtoMessage()               {}
func (*Commits) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{2} }

func (m *Commits) GetCommit() []*Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type Branch struct {
	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Head *Commit `protobuf:"bytes,2,opt,name=head" json:"head,omitempty"`
}

func (m *Branch) Reset()                    { *m = Branch{} }
func (m *Branch) String() string            { return proto.CompactTextString(m) }
func (*Branch) ProtoMessage()               {}
func (*Branch) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{3} }

func (m *Branch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Branch) GetHead() *Commit {
	if m != nil {
		return m.Head
	}
	return nil
}

type Branches struct {
	Branches []*Branch `protobuf:"bytes,1,rep,name=branches" json:"branches,omitempty"`
}

func (m *Branches) Reset()                    { *m = Branches{} }
func (m *Branches) String() string            { return proto.CompactTextString(m) }
func (*Branches) ProtoMessage()               {}
func (*Branches) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{4} }

func (m *Branches) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

type File struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{5} }

func (m *File) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{6} }

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Object struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{7} }

func (m *Object) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Tag struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{8} }

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RepoInfo struct {
	Repo        *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created     *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes   uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Provenance  []*Repo                     `protobuf:"bytes,4,rep,name=provenance" json:"provenance,omitempty"`
	Description string                      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RepoInfo) Reset()                    { *m = RepoInfo{} }
func (m *RepoInfo) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()               {}
func (*RepoInfo) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{9} }

func (m *RepoInfo) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoInfo) GetCreated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *RepoInfo) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *RepoInfo) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

func (m *RepoInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RepoInfos struct {
	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info,json=repoInfo" json:"repo_info,omitempty"`
}

func (m *RepoInfos) Reset()                    { *m = RepoInfos{} }
func (m *RepoInfos) String() string            { return proto.CompactTextString(m) }
func (*RepoInfos) ProtoMessage()               {}
func (*RepoInfos) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{10} }

func (m *RepoInfos) GetRepoInfo() []*RepoInfo {
	if m != nil {
		return m.RepoInfo
	}
	return nil
}

type CommitInfo struct {
	Commit       *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,2,opt,name=parent_commit,json=parentCommit" json:"parent_commit,omitempty"`
	Started      *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=started" json:"started,omitempty"`
	Finished     *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=finished" json:"finished,omitempty"`
	SizeBytes    uint64                      `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Provenance   []*Commit                   `protobuf:"bytes,6,rep,name=provenance" json:"provenance,omitempty"`
	// this is the block that stores the serialized form of a tree that
	// represents the entire file system hierarchy of the repo at this commit
	Tree *Object `protobuf:"bytes,7,opt,name=tree" json:"tree,omitempty"`
}

func (m *CommitInfo) Reset()                    { *m = CommitInfo{} }
func (m *CommitInfo) String() string            { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()               {}
func (*CommitInfo) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{11} }

func (m *CommitInfo) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CommitInfo) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *CommitInfo) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *CommitInfo) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *CommitInfo) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

func (m *CommitInfo) GetTree() *Object {
	if m != nil {
		return m.Tree
	}
	return nil
}

type CommitInfos struct {
	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info,json=commitInfo" json:"commit_info,omitempty"`
}

func (m *CommitInfos) Reset()                    { *m = CommitInfos{} }
func (m *CommitInfos) String() string            { return proto.CompactTextString(m) }
func (*CommitInfos) ProtoMessage()               {}
func (*CommitInfos) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{12} }

func (m *CommitInfos) GetCommitInfo() []*CommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

type FileInfo struct {
	File      *File    `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType  FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes uint64   `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// the base names (i.e. just the filenames, not the full paths) of
	// the children
	Children []string  `protobuf:"bytes,6,rep,name=children" json:"children,omitempty"`
	Objects  []*Object `protobuf:"bytes,8,rep,name=objects" json:"objects,omitempty"`
	Hash     []byte    `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{13} }

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetFileType() FileType {
	if m != nil {
		return m.FileType
	}
	return FileType_RESERVED
}

func (m *FileInfo) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *FileInfo) GetChildren() []string {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *FileInfo) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *FileInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type FileInfos struct {
	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
}

func (m *FileInfos) Reset()                    { *m = FileInfos{} }
func (m *FileInfos) String() string            { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()               {}
func (*FileInfos) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{14} }

func (m *FileInfos) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type ByteRange struct {
	Lower uint64 `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper uint64 `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (m *ByteRange) Reset()                    { *m = ByteRange{} }
func (m *ByteRange) String() string            { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()               {}
func (*ByteRange) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{15} }

func (m *ByteRange) GetLower() uint64 {
	if m != nil {
		return m.Lower
	}
	return 0
}

func (m *ByteRange) GetUpper() uint64 {
	if m != nil {
		return m.Upper
	}
	return 0
}

type BlockRef struct {
	Block *Block     `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Range *ByteRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (m *BlockRef) Reset()                    { *m = BlockRef{} }
func (m *BlockRef) String() string            { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()               {}
func (*BlockRef) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{16} }

func (m *BlockRef) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockRef) GetRange() *ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type ObjectInfo struct {
	Object   *Object   `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	BlockRef *BlockRef `protobuf:"bytes,2,opt,name=block_ref,json=blockRef" json:"block_ref,omitempty"`
}

func (m *ObjectInfo) Reset()                    { *m = ObjectInfo{} }
func (m *ObjectInfo) String() string            { return proto.CompactTextString(m) }
func (*ObjectInfo) ProtoMessage()               {}
func (*ObjectInfo) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{17} }

func (m *ObjectInfo) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ObjectInfo) GetBlockRef() *BlockRef {
	if m != nil {
		return m.BlockRef
	}
	return nil
}

type CreateRepoRequest struct {
	Repo        *Repo   `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Provenance  []*Repo `protobuf:"bytes,2,rep,name=provenance" json:"provenance,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{18} }

func (m *CreateRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *CreateRepoRequest) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

func (m *CreateRepoRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type InspectRepoRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *InspectRepoRequest) Reset()                    { *m = InspectRepoRequest{} }
func (m *InspectRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectRepoRequest) ProtoMessage()               {}
func (*InspectRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{19} }

func (m *InspectRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type ListRepoRequest struct {
	Provenance []*Repo `protobuf:"bytes,1,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *ListRepoRequest) Reset()                    { *m = ListRepoRequest{} }
func (m *ListRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRepoRequest) ProtoMessage()               {}
func (*ListRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{20} }

func (m *ListRepoRequest) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type DeleteRepoRequest struct {
	Repo  *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Force bool  `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *DeleteRepoRequest) Reset()                    { *m = DeleteRepoRequest{} }
func (m *DeleteRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRepoRequest) ProtoMessage()               {}
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{21} }

func (m *DeleteRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *DeleteRepoRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type StartCommitRequest struct {
	// Parent.ID may be empty in which case the commit that Branch points to will be used as the parent.
	// If branch is empty, or if branch does not exist, the commit will have no parent.
	Parent     *Commit   `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Branch     string    `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Provenance []*Commit `protobuf:"bytes,2,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *StartCommitRequest) Reset()                    { *m = StartCommitRequest{} }
func (m *StartCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*StartCommitRequest) ProtoMessage()               {}
func (*StartCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{22} }

func (m *StartCommitRequest) GetParent() *Commit {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *StartCommitRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *StartCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type BuildCommitRequest struct {
	Parent     *Commit   `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Branch     string    `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Provenance []*Commit `protobuf:"bytes,2,rep,name=provenance" json:"provenance,omitempty"`
	Tree       *Object   `protobuf:"bytes,3,opt,name=tree" json:"tree,omitempty"`
}

func (m *BuildCommitRequest) Reset()                    { *m = BuildCommitRequest{} }
func (m *BuildCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildCommitRequest) ProtoMessage()               {}
func (*BuildCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{23} }

func (m *BuildCommitRequest) GetParent() *Commit {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *BuildCommitRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

func (m *BuildCommitRequest) GetTree() *Object {
	if m != nil {
		return m.Tree
	}
	return nil
}

type FinishCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *FinishCommitRequest) Reset()                    { *m = FinishCommitRequest{} }
func (m *FinishCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishCommitRequest) ProtoMessage()               {}
func (*FinishCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{24} }

func (m *FinishCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type InspectCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *InspectCommitRequest) Reset()                    { *m = InspectCommitRequest{} }
func (m *InspectCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectCommitRequest) ProtoMessage()               {}
func (*InspectCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{25} }

func (m *InspectCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ListCommitRequest struct {
	Repo   *Repo   `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	From   *Commit `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To     *Commit `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	Number uint64  `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *ListCommitRequest) Reset()                    { *m = ListCommitRequest{} }
func (m *ListCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCommitRequest) ProtoMessage()               {}
func (*ListCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{26} }

func (m *ListCommitRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ListCommitRequest) GetFrom() *Commit {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListCommitRequest) GetTo() *Commit {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ListCommitRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ListBranchRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *ListBranchRequest) Reset()                    { *m = ListBranchRequest{} }
func (m *ListBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBranchRequest) ProtoMessage()               {}
func (*ListBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{27} }

func (m *ListBranchRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type SetBranchRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Branch string  `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (m *SetBranchRequest) Reset()                    { *m = SetBranchRequest{} }
func (m *SetBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBranchRequest) ProtoMessage()               {}
func (*SetBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{28} }

func (m *SetBranchRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *SetBranchRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type DeleteBranchRequest struct {
	Repo   *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (m *DeleteBranchRequest) Reset()                    { *m = DeleteBranchRequest{} }
func (m *DeleteBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBranchRequest) ProtoMessage()               {}
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{29} }

func (m *DeleteBranchRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *DeleteBranchRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type DeleteCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *DeleteCommitRequest) Reset()                    { *m = DeleteCommitRequest{} }
func (m *DeleteCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCommitRequest) ProtoMessage()               {}
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{30} }

func (m *DeleteCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type FlushCommitRequest struct {
	Commits []*Commit `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
	ToRepos []*Repo   `protobuf:"bytes,2,rep,name=to_repos,json=toRepos" json:"to_repos,omitempty"`
}

func (m *FlushCommitRequest) Reset()                    { *m = FlushCommitRequest{} }
func (m *FlushCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushCommitRequest) ProtoMessage()               {}
func (*FlushCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{31} }

func (m *FlushCommitRequest) GetCommits() []*Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *FlushCommitRequest) GetToRepos() []*Repo {
	if m != nil {
		return m.ToRepos
	}
	return nil
}

type SubscribeCommitRequest struct {
	Repo   *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// only commits created since this commit are returned
	From *Commit `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
}

func (m *SubscribeCommitRequest) Reset()                    { *m = SubscribeCommitRequest{} }
func (m *SubscribeCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeCommitRequest) ProtoMessage()               {}
func (*SubscribeCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{32} }

func (m *SubscribeCommitRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *SubscribeCommitRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *SubscribeCommitRequest) GetFrom() *Commit {
	if m != nil {
		return m.From
	}
	return nil
}

type GetFileRequest struct {
	File        *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	OffsetBytes int64 `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes,proto3" json:"offset_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{33} }

func (m *GetFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetFileRequest) GetOffsetBytes() int64 {
	if m != nil {
		return m.OffsetBytes
	}
	return 0
}

func (m *GetFileRequest) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

type PutFileRequest struct {
	File  *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Url   string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// applies only to URLs that can be recursively walked, for example s3:// URLs
	Recursive bool `protobuf:"varint,6,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Delimiter causes data to be broken up into separate files with File.Path
	// as a prefix.
	Delimiter Delimiter `protobuf:"varint,7,opt,name=delimiter,proto3,enum=pfs.Delimiter" json:"delimiter,omitempty"`
	// TargetFileDatums specifies the target number of datums in each written
	// file it may be lower if data does not split evenly, but will never be
	// higher, unless the value is 0.
	TargetFileDatums int64 `protobuf:"varint,8,opt,name=target_file_datums,json=targetFileDatums,proto3" json:"target_file_datums,omitempty"`
	// TargetFileBytes specifies the target number of bytes in each written
	// file, files may have more or fewer bytes than the target.
	TargetFileBytes int64 `protobuf:"varint,9,opt,name=target_file_bytes,json=targetFileBytes,proto3" json:"target_file_bytes,omitempty"`
}

func (m *PutFileRequest) Reset()                    { *m = PutFileRequest{} }
func (m *PutFileRequest) String() string            { return proto.CompactTextString(m) }
func (*PutFileRequest) ProtoMessage()               {}
func (*PutFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{34} }

func (m *PutFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *PutFileRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PutFileRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PutFileRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *PutFileRequest) GetDelimiter() Delimiter {
	if m != nil {
		return m.Delimiter
	}
	return Delimiter_NONE
}

func (m *PutFileRequest) GetTargetFileDatums() int64 {
	if m != nil {
		return m.TargetFileDatums
	}
	return 0
}

func (m *PutFileRequest) GetTargetFileBytes() int64 {
	if m != nil {
		return m.TargetFileBytes
	}
	return 0
}

type InspectFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *InspectFileRequest) Reset()                    { *m = InspectFileRequest{} }
func (m *InspectFileRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectFileRequest) ProtoMessage()               {}
func (*InspectFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{35} }

func (m *InspectFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type ListFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *ListFileRequest) Reset()                    { *m = ListFileRequest{} }
func (m *ListFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFileRequest) ProtoMessage()               {}
func (*ListFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{36} }

func (m *ListFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type GlobFileRequest struct {
	Commit  *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Pattern string  `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (m *GlobFileRequest) Reset()                    { *m = GlobFileRequest{} }
func (m *GlobFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GlobFileRequest) ProtoMessage()               {}
func (*GlobFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{37} }

func (m *GlobFileRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *GlobFileRequest) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type DeleteFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *DeleteFileRequest) Reset()                    { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()               {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{38} }

func (m *DeleteFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type PutObjectRequest struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Tags  []*Tag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *PutObjectRequest) Reset()                    { *m = PutObjectRequest{} }
func (m *PutObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*PutObjectRequest) ProtoMessage()               {}
func (*PutObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{39} }

func (m *PutObjectRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PutObjectRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GetObjectsRequest struct {
	Objects     []*Object `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	OffsetBytes uint64    `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes,proto3" json:"offset_bytes,omitempty"`
	SizeBytes   uint64    `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (m *GetObjectsRequest) Reset()                    { *m = GetObjectsRequest{} }
func (m *GetObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObjectsRequest) ProtoMessage()               {}
func (*GetObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{40} }

func (m *GetObjectsRequest) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *GetObjectsRequest) GetOffsetBytes() uint64 {
	if m != nil {
		return m.OffsetBytes
	}
	return 0
}

func (m *GetObjectsRequest) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

type TagObjectRequest struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	Tags   []*Tag  `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *TagObjectRequest) Reset()                    { *m = TagObjectRequest{} }
func (m *TagObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*TagObjectRequest) ProtoMessage()               {}
func (*TagObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{41} }

func (m *TagObjectRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *TagObjectRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListObjectsRequest struct {
}

func (m *ListObjectsRequest) Reset()                    { *m = ListObjectsRequest{} }
func (m *ListObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListObjectsRequest) ProtoMessage()               {}
func (*ListObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{42} }

type ListObjectsTaggedWithPrefixRequest struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *ListObjectsTaggedWithPrefixRequest) Reset()         { *m = ListObjectsTaggedWithPrefixRequest{} }
func (m *ListObjectsTaggedWithPrefixRequest) String() string { return proto.CompactTextString(m) }
func (*ListObjectsTaggedWithPrefixRequest) ProtoMessage()    {}
func (*ListObjectsTaggedWithPrefixRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPfs, []int{43}
}

func (m *ListObjectsTaggedWithPrefixRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type DeleteObjectsRequest struct {
	Objects []*Object `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
}

func (m *DeleteObjectsRequest) Reset()                    { *m = DeleteObjectsRequest{} }
func (m *DeleteObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectsRequest) ProtoMessage()               {}
func (*DeleteObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{44} }

func (m *DeleteObjectsRequest) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type DeleteObjectsResponse struct {
}

func (m *DeleteObjectsResponse) Reset()                    { *m = DeleteObjectsResponse{} }
func (m *DeleteObjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectsResponse) ProtoMessage()               {}
func (*DeleteObjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{45} }

type ObjectIndex struct {
	Objects map[string]*BlockRef `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Tags    map[string]*Object   `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ObjectIndex) Reset()                    { *m = ObjectIndex{} }
func (m *ObjectIndex) String() string            { return proto.CompactTextString(m) }
func (*ObjectIndex) ProtoMessage()               {}
func (*ObjectIndex) Descriptor() ([]byte, []int) { return fileDescriptorPfs, []int{46} }

func (m *ObjectIndex) GetObjects() map[string]*BlockRef {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *ObjectIndex) GetTags() map[string]*Object {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Repo)(nil), "pfs.Repo")
	proto.RegisterType((*Commit)(nil), "pfs.Commit")
	proto.RegisterType((*Commits)(nil), "pfs.Commits")
	proto.RegisterType((*Branch)(nil), "pfs.Branch")
	proto.RegisterType((*Branches)(nil), "pfs.Branches")
	proto.RegisterType((*File)(nil), "pfs.File")
	proto.RegisterType((*Block)(nil), "pfs.Block")
	proto.RegisterType((*Object)(nil), "pfs.Object")
	proto.RegisterType((*Tag)(nil), "pfs.Tag")
	proto.RegisterType((*RepoInfo)(nil), "pfs.RepoInfo")
	proto.RegisterType((*RepoInfos)(nil), "pfs.RepoInfos")
	proto.RegisterType((*CommitInfo)(nil), "pfs.CommitInfo")
	proto.RegisterType((*CommitInfos)(nil), "pfs.CommitInfos")
	proto.RegisterType((*FileInfo)(nil), "pfs.FileInfo")
	proto.RegisterType((*FileInfos)(nil), "pfs.FileInfos")
	proto.RegisterType((*ByteRange)(nil), "pfs.ByteRange")
	proto.RegisterType((*BlockRef)(nil), "pfs.BlockRef")
	proto.RegisterType((*ObjectInfo)(nil), "pfs.ObjectInfo")
	proto.RegisterType((*CreateRepoRequest)(nil), "pfs.CreateRepoRequest")
	proto.RegisterType((*InspectRepoRequest)(nil), "pfs.InspectRepoRequest")
	proto.RegisterType((*ListRepoRequest)(nil), "pfs.ListRepoRequest")
	proto.RegisterType((*DeleteRepoRequest)(nil), "pfs.DeleteRepoRequest")
	proto.RegisterType((*StartCommitRequest)(nil), "pfs.StartCommitRequest")
	proto.RegisterType((*BuildCommitRequest)(nil), "pfs.BuildCommitRequest")
	proto.RegisterType((*FinishCommitRequest)(nil), "pfs.FinishCommitRequest")
	proto.RegisterType((*InspectCommitRequest)(nil), "pfs.InspectCommitRequest")
	proto.RegisterType((*ListCommitRequest)(nil), "pfs.ListCommitRequest")
	proto.RegisterType((*ListBranchRequest)(nil), "pfs.ListBranchRequest")
	proto.RegisterType((*SetBranchRequest)(nil), "pfs.SetBranchRequest")
	proto.RegisterType((*DeleteBranchRequest)(nil), "pfs.DeleteBranchRequest")
	proto.RegisterType((*DeleteCommitRequest)(nil), "pfs.DeleteCommitRequest")
	proto.RegisterType((*FlushCommitRequest)(nil), "pfs.FlushCommitRequest")
	proto.RegisterType((*SubscribeCommitRequest)(nil), "pfs.SubscribeCommitRequest")
	proto.RegisterType((*GetFileRequest)(nil), "pfs.GetFileRequest")
	proto.RegisterType((*PutFileRequest)(nil), "pfs.PutFileRequest")
	proto.RegisterType((*InspectFileRequest)(nil), "pfs.InspectFileRequest")
	proto.RegisterType((*ListFileRequest)(nil), "pfs.ListFileRequest")
	proto.RegisterType((*GlobFileRequest)(nil), "pfs.GlobFileRequest")
	proto.RegisterType((*DeleteFileRequest)(nil), "pfs.DeleteFileRequest")
	proto.RegisterType((*PutObjectRequest)(nil), "pfs.PutObjectRequest")
	proto.RegisterType((*GetObjectsRequest)(nil), "pfs.GetObjectsRequest")
	proto.RegisterType((*TagObjectRequest)(nil), "pfs.TagObjectRequest")
	proto.RegisterType((*ListObjectsRequest)(nil), "pfs.ListObjectsRequest")
	proto.RegisterType((*ListObjectsTaggedWithPrefixRequest)(nil), "pfs.ListObjectsTaggedWithPrefixRequest")
	proto.RegisterType((*DeleteObjectsRequest)(nil), "pfs.DeleteObjectsRequest")
	proto.RegisterType((*DeleteObjectsResponse)(nil), "pfs.DeleteObjectsResponse")
	proto.RegisterType((*ObjectIndex)(nil), "pfs.ObjectIndex")
	proto.RegisterEnum("pfs.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("pfs.Delimiter", Delimiter_name, Delimiter_value)
	proto.RegisterEnum("pfs.ListFileMode", ListFileMode_name, ListFileMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (API_FlushCommitClient, error)
	// SubscribeCommit subscribes for new commits on a given branch
	SubscribeCommit(ctx context.Context, in *SubscribeCommitRequest, opts ...grpc.CallOption) (API_SubscribeCommitClient, error)
	// BuildCommit builds a commit that's backed by the given tree
	BuildCommit(ctx context.Context, in *BuildCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*Branches, error)
	// SetBranch assigns a commit and its ancestors to a branch.
	SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteBranch deletes a branch; note that the commits still exist.
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error)
	// InspectFile returns info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// GlobFile returns info about all files.
	GlobFile(ctx context.Context, in *GlobFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.API/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (API_FlushCommitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pfs.API/FlushCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIFlushCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_FlushCommitClient interface {
	Recv() (*CommitInfo, error)
	grpc.ClientStream
}

type aPIFlushCommitClient struct {
	grpc.ClientStream
}

func (x *aPIFlushCommitClient) Recv() (*CommitInfo, error) {
	m := new(CommitInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) SubscribeCommit(ctx context.Context, in *SubscribeCommitRequest, opts ...grpc.CallOption) (API_SubscribeCommitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pfs.API/SubscribeCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeCommitClient interface {
	Recv() (*CommitInfo, error)
	grpc.ClientStream
}

type aPISubscribeCommitClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeCommitClient) Recv() (*CommitInfo, error) {
	m := new(CommitInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) BuildCommit(ctx context.Context, in *BuildCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.API/BuildCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*Branches, error) {
	out := new(Branches)
	err := grpc.Invoke(ctx, "/pfs.API/ListBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/SetBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[2], c.cc, "/pfs.API/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPutFileClient{stream}
	return x, nil
}

type API_PutFileClient interface {
	Send(*PutFileRequest) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type aPIPutFileClient struct {
	grpc.ClientStream
}

func (x *aPIPutFileClient) Send(m *PutFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPutFileClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[3], c.cc, "/pfs.API/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetFileClient interface {
	Recv() (*google_protobuf2.BytesValue, error)
	grpc.ClientStream
}

type aPIGetFileClient struct {
	grpc.ClientStream
}

func (x *aPIGetFileClient) Recv() (*google_protobuf2.BytesValue, error) {
	m := new(google_protobuf2.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GlobFile(ctx context.Context, in *GlobFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.API/GlobFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(context.Context, *StartCommitRequest) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(*FlushCommitRequest, API_FlushCommitServer) error
	// SubscribeCommit subscribes for new commits on a given branch
	SubscribeCommit(*SubscribeCommitRequest, API_SubscribeCommitServer) error
	// BuildCommit builds a commit that's backed by the given tree
	BuildCommit(context.Context, *BuildCommitRequest) (*Commit, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(context.Context, *ListBranchRequest) (*Branches, error)
	// SetBranch assigns a commit and its ancestors to a branch.
	SetBranch(context.Context, *SetBranchRequest) (*google_protobuf.Empty, error)
	// DeleteBranch deletes a branch; note that the commits still exist.
	DeleteBranch(context.Context, *DeleteBranchRequest) (*google_protobuf.Empty, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(API_PutFileServer) error
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, API_GetFileServer) error
	// InspectFile returns info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*FileInfos, error)
	// GlobFile returns info about all files.
	GlobFile(context.Context, *GlobFileRequest) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectRepo(ctx, req.(*InspectRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRepo(ctx, req.(*ListRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteRepo(ctx, req.(*DeleteRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/StartCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartCommit(ctx, req.(*StartCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FinishCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FinishCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/FinishCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FinishCommit(ctx, req.(*FinishCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectCommit(ctx, req.(*InspectCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCommit(ctx, req.(*ListCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FlushCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlushCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).FlushCommit(m, &aPIFlushCommitServer{stream})
}

type API_FlushCommitServer interface {
	Send(*CommitInfo) error
	grpc.ServerStream
}

type aPIFlushCommitServer struct {
	grpc.ServerStream
}

func (x *aPIFlushCommitServer) Send(m *CommitInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _API_SubscribeCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeCommit(m, &aPISubscribeCommitServer{stream})
}

type API_SubscribeCommitServer interface {
	Send(*CommitInfo) error
	grpc.ServerStream
}

type aPISubscribeCommitServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeCommitServer) Send(m *CommitInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _API_BuildCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BuildCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/BuildCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BuildCommit(ctx, req.(*BuildCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBranch(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/SetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetBranch(ctx, req.(*SetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).PutFile(&aPIPutFileServer{stream})
}

type API_PutFileServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*PutFileRequest, error)
	grpc.ServerStream
}

type aPIPutFileServer struct {
	grpc.ServerStream
}

func (x *aPIPutFileServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPutFileServer) Recv() (*PutFileRequest, error) {
	m := new(PutFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetFile(m, &aPIGetFileServer{stream})
}

type API_GetFileServer interface {
	Send(*google_protobuf2.BytesValue) error
	grpc.ServerStream
}

type aPIGetFileServer struct {
	grpc.ServerStream
}

func (x *aPIGetFileServer) Send(m *google_protobuf2.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _API_InspectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectFile(ctx, req.(*InspectFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFile(ctx, req.(*ListFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GlobFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GlobFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/GlobFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GlobFile(ctx, req.(*GlobFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _API_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _API_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _API_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _API_DeleteRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _API_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _API_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _API_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _API_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _API_DeleteCommit_Handler,
		},
		{
			MethodName: "BuildCommit",
			Handler:    _API_BuildCommit_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _API_ListBranch_Handler,
		},
		{
			MethodName: "SetBranch",
			Handler:    _API_SetBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _API_DeleteBranch_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _API_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _API_ListFile_Handler,
		},
		{
			MethodName: "GlobFile",
			Handler:    _API_GlobFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _API_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FlushCommit",
			Handler:       _API_FlushCommit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCommit",
			Handler:       _API_SubscribeCommit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFile",
			Handler:       _API_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _API_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client/pfs/pfs.proto",
}

// Client API for ObjectAPI service

type ObjectAPIClient interface {
	PutObject(ctx context.Context, opts ...grpc.CallOption) (ObjectAPI_PutObjectClient, error)
	GetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (ObjectAPI_GetObjectClient, error)
	GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (ObjectAPI_GetObjectsClient, error)
	TagObject(ctx context.Context, in *TagObjectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	InspectObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*ObjectInfo, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (ObjectAPI_ListObjectsClient, error)
	ListObjectsTaggedWithPrefix(ctx context.Context, in *ListObjectsTaggedWithPrefixRequest, opts ...grpc.CallOption) (ObjectAPI_ListObjectsTaggedWithPrefixClient, error)
	DeleteObjects(ctx context.Context, in *DeleteObjectsRequest, opts ...grpc.CallOption) (*DeleteObjectsResponse, error)
	GetTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (ObjectAPI_GetTagClient, error)
	InspectTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ObjectInfo, error)
	Compact(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type objectAPIClient struct {
	cc *grpc.ClientConn
}

func NewObjectAPIClient(cc *grpc.ClientConn) ObjectAPIClient {
	return &objectAPIClient{cc}
}

func (c *objectAPIClient) PutObject(ctx context.Context, opts ...grpc.CallOption) (ObjectAPI_PutObjectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectAPI_serviceDesc.Streams[0], c.cc, "/pfs.ObjectAPI/PutObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectAPIPutObjectClient{stream}
	return x, nil
}

type ObjectAPI_PutObjectClient interface {
	Send(*PutObjectRequest) error
	CloseAndRecv() (*Object, error)
	grpc.ClientStream
}

type objectAPIPutObjectClient struct {
	grpc.ClientStream
}

func (x *objectAPIPutObjectClient) Send(m *PutObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectAPIPutObjectClient) CloseAndRecv() (*Object, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectAPIClient) GetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (ObjectAPI_GetObjectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectAPI_serviceDesc.Streams[1], c.cc, "/pfs.ObjectAPI/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectAPIGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectAPI_GetObjectClient interface {
	Recv() (*google_protobuf2.BytesValue, error)
	grpc.ClientStream
}

type objectAPIGetObjectClient struct {
	grpc.ClientStream
}

func (x *objectAPIGetObjectClient) Recv() (*google_protobuf2.BytesValue, error) {
	m := new(google_protobuf2.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectAPIClient) GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (ObjectAPI_GetObjectsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectAPI_serviceDesc.Streams[2], c.cc, "/pfs.ObjectAPI/GetObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectAPIGetObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectAPI_GetObjectsClient interface {
	Recv() (*google_protobuf2.BytesValue, error)
	grpc.ClientStream
}

type objectAPIGetObjectsClient struct {
	grpc.ClientStream
}

func (x *objectAPIGetObjectsClient) Recv() (*google_protobuf2.BytesValue, error) {
	m := new(google_protobuf2.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectAPIClient) TagObject(ctx context.Context, in *TagObjectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/TagObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectAPIClient) InspectObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*ObjectInfo, error) {
	out := new(ObjectInfo)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/InspectObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectAPIClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (ObjectAPI_ListObjectsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectAPI_serviceDesc.Streams[3], c.cc, "/pfs.ObjectAPI/ListObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectAPIListObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectAPI_ListObjectsClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type objectAPIListObjectsClient struct {
	grpc.ClientStream
}

func (x *objectAPIListObjectsClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectAPIClient) ListObjectsTaggedWithPrefix(ctx context.Context, in *ListObjectsTaggedWithPrefixRequest, opts ...grpc.CallOption) (ObjectAPI_ListObjectsTaggedWithPrefixClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectAPI_serviceDesc.Streams[4], c.cc, "/pfs.ObjectAPI/ListObjectsTaggedWithPrefix", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectAPIListObjectsTaggedWithPrefixClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectAPI_ListObjectsTaggedWithPrefixClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type objectAPIListObjectsTaggedWithPrefixClient struct {
	grpc.ClientStream
}

func (x *objectAPIListObjectsTaggedWithPrefixClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectAPIClient) DeleteObjects(ctx context.Context, in *DeleteObjectsRequest, opts ...grpc.CallOption) (*DeleteObjectsResponse, error) {
	out := new(DeleteObjectsResponse)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/DeleteObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectAPIClient) GetTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (ObjectAPI_GetTagClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectAPI_serviceDesc.Streams[5], c.cc, "/pfs.ObjectAPI/GetTag", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectAPIGetTagClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectAPI_GetTagClient interface {
	Recv() (*google_protobuf2.BytesValue, error)
	grpc.ClientStream
}

type objectAPIGetTagClient struct {
	grpc.ClientStream
}

func (x *objectAPIGetTagClient) Recv() (*google_protobuf2.BytesValue, error) {
	m := new(google_protobuf2.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectAPIClient) InspectTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*ObjectInfo, error) {
	out := new(ObjectInfo)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/InspectTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectAPIClient) Compact(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pfs.ObjectAPI/Compact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ObjectAPI service

type ObjectAPIServer interface {
	PutObject(ObjectAPI_PutObjectServer) error
	GetObject(*Object, ObjectAPI_GetObjectServer) error
	GetObjects(*GetObjectsRequest, ObjectAPI_GetObjectsServer) error
	TagObject(context.Context, *TagObjectRequest) (*google_protobuf.Empty, error)
	InspectObject(context.Context, *Object) (*ObjectInfo, error)
	ListObjects(*ListObjectsRequest, ObjectAPI_ListObjectsServer) error
	ListObjectsTaggedWithPrefix(*ListObjectsTaggedWithPrefixRequest, ObjectAPI_ListObjectsTaggedWithPrefixServer) error
	DeleteObjects(context.Context, *DeleteObjectsRequest) (*DeleteObjectsResponse, error)
	GetTag(*Tag, ObjectAPI_GetTagServer) error
	InspectTag(context.Context, *Tag) (*ObjectInfo, error)
	Compact(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
}

func RegisterObjectAPIServer(s *grpc.Server, srv ObjectAPIServer) {
	s.RegisterService(&_ObjectAPI_serviceDesc, srv)
}

func _ObjectAPI_PutObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectAPIServer).PutObject(&objectAPIPutObjectServer{stream})
}

type ObjectAPI_PutObjectServer interface {
	SendAndClose(*Object) error
	Recv() (*PutObjectRequest, error)
	grpc.ServerStream
}

type objectAPIPutObjectServer struct {
	grpc.ServerStream
}

func (x *objectAPIPutObjectServer) SendAndClose(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectAPIPutObjectServer) Recv() (*PutObjectRequest, error) {
	m := new(PutObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectAPI_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Object)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectAPIServer).GetObject(m, &objectAPIGetObjectServer{stream})
}

type ObjectAPI_GetObjectServer interface {
	Send(*google_protobuf2.BytesValue) error
	grpc.ServerStream
}

type objectAPIGetObjectServer struct {
	grpc.ServerStream
}

func (x *objectAPIGetObjectServer) Send(m *google_protobuf2.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectAPI_GetObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectAPIServer).GetObjects(m, &objectAPIGetObjectsServer{stream})
}

type ObjectAPI_GetObjectsServer interface {
	Send(*google_protobuf2.BytesValue) error
	grpc.ServerStream
}

type objectAPIGetObjectsServer struct {
	grpc.ServerStream
}

func (x *objectAPIGetObjectsServer) Send(m *google_protobuf2.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectAPI_TagObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).TagObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/TagObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).TagObject(ctx, req.(*TagObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectAPI_InspectObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).InspectObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/InspectObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).InspectObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectAPI_ListObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectAPIServer).ListObjects(m, &objectAPIListObjectsServer{stream})
}

type ObjectAPI_ListObjectsServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type objectAPIListObjectsServer struct {
	grpc.ServerStream
}

func (x *objectAPIListObjectsServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectAPI_ListObjectsTaggedWithPrefix_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectsTaggedWithPrefixRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectAPIServer).ListObjectsTaggedWithPrefix(m, &objectAPIListObjectsTaggedWithPrefixServer{stream})
}

type ObjectAPI_ListObjectsTaggedWithPrefixServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type objectAPIListObjectsTaggedWithPrefixServer struct {
	grpc.ServerStream
}

func (x *objectAPIListObjectsTaggedWithPrefixServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectAPI_DeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).DeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/DeleteObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).DeleteObjects(ctx, req.(*DeleteObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectAPI_GetTag_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Tag)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectAPIServer).GetTag(m, &objectAPIGetTagServer{stream})
}

type ObjectAPI_GetTagServer interface {
	Send(*google_protobuf2.BytesValue) error
	grpc.ServerStream
}

type objectAPIGetTagServer struct {
	grpc.ServerStream
}

func (x *objectAPIGetTagServer) Send(m *google_protobuf2.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectAPI_InspectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).InspectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/InspectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).InspectTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectAPI_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectAPIServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.ObjectAPI/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectAPIServer).Compact(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.ObjectAPI",
	HandlerType: (*ObjectAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TagObject",
			Handler:    _ObjectAPI_TagObject_Handler,
		},
		{
			MethodName: "InspectObject",
			Handler:    _ObjectAPI_InspectObject_Handler,
		},
		{
			MethodName: "DeleteObjects",
			Handler:    _ObjectAPI_DeleteObjects_Handler,
		},
		{
			MethodName: "InspectTag",
			Handler:    _ObjectAPI_InspectTag_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _ObjectAPI_Compact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutObject",
			Handler:       _ObjectAPI_PutObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetObject",
			Handler:       _ObjectAPI_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetObjects",
			Handler:       _ObjectAPI_GetObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListObjects",
			Handler:       _ObjectAPI_ListObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListObjectsTaggedWithPrefix",
			Handler:       _ObjectAPI_ListObjectsTaggedWithPrefix_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTag",
			Handler:       _ObjectAPI_GetTag_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client/pfs/pfs.proto",
}

func init() { proto.RegisterFile("client/pfs/pfs.proto", fileDescriptorPfs) }

var fileDescriptorPfs = []byte{
	// 2001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x59, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0xc6, 0x02, 0x8b, 0x57, 0x83, 0x0f, 0x70, 0x04, 0xd3, 0xf0, 0x52, 0x0a, 0xe9, 0x91, 0x5d,
	0x96, 0x68, 0x17, 0xc9, 0x22, 0xad, 0xd0, 0xd1, 0x23, 0x2a, 0x51, 0x04, 0x65, 0xba, 0x68, 0x92,
	0xb5, 0x84, 0xed, 0x53, 0x8a, 0xb5, 0x00, 0x06, 0xe0, 0xc6, 0x00, 0x76, 0xbd, 0x3b, 0x90, 0xcd,
	0x54, 0x2a, 0x39, 0xe4, 0x90, 0xfc, 0x8b, 0xdc, 0xf3, 0x0f, 0x72, 0xc9, 0x1f, 0xc8, 0x7f, 0xc8,
	0x21, 0xbf, 0x24, 0x35, 0x8f, 0xdd, 0x9d, 0x7d, 0xe0, 0x41, 0xe6, 0xa0, 0xe2, 0xcc, 0xf4, 0x74,
	0x4f, 0xf7, 0x37, 0xdd, 0x3d, 0xdf, 0x42, 0xd0, 0xe8, 0x0e, 0x6d, 0x32, 0xa6, 0xbb, 0x6e, 0xdf,
	0x67, 0xff, 0x76, 0x5c, 0xcf, 0xa1, 0x0e, 0x2a, 0xb8, 0x7d, 0xdf, 0xd8, 0x18, 0x38, 0xce, 0x60,
	0x48, 0x76, 0xf9, 0x52, 0x67, 0xd2, 0xdf, 0x25, 0x23, 0x97, 0xde, 0x8a, 0x1d, 0xc6, 0x66, 0x52,
	0x48, 0xed, 0x11, 0xf1, 0xa9, 0x35, 0x72, 0xe5, 0x86, 0x5f, 0x25, 0x37, 0xfc, 0xec, 0x59, 0xae,
	0x4b, 0x3c, 0x79, 0x84, 0xd1, 0x18, 0x38, 0x03, 0x87, 0x0f, 0x77, 0xd9, 0x48, 0xac, 0x62, 0x03,
	0x74, 0x93, 0xb8, 0x0e, 0x42, 0xa0, 0x8f, 0xad, 0x11, 0x69, 0x6a, 0x5b, 0xda, 0x93, 0xaa, 0xc9,
	0xc7, 0xf8, 0x35, 0x94, 0xde, 0x3a, 0xa3, 0x91, 0x4d, 0xd1, 0x23, 0xd0, 0x3d, 0xe2, 0x3a, 0x5c,
	0x5a, 0xdb, 0xaf, 0xee, 0x30, 0xc7, 0x99, 0x9a, 0xc9, 0x97, 0xd1, 0x3a, 0xe4, 0xed, 0x5e, 0x33,
	0xcf, 0x54, 0x8f, 0x4a, 0xff, 0xfd, 0xcf, 0x66, 0xfe, 0xf4, 0xd8, 0xcc, 0xdb, 0x3d, 0xbc, 0x03,
	0x65, 0x61, 0xc0, 0x47, 0x8f, 0xa1, 0xd4, 0xe5, 0xc3, 0xa6, 0xb6, 0x55, 0x78, 0x52, 0xdb, 0xaf,
	0x71, 0x1b, 0x42, 0x6a, 0x4a, 0x11, 0x7e, 0x05, 0xa5, 0x23, 0xcf, 0x1a, 0x77, 0x6f, 0xb2, 0xdc,
	0x41, 0x9b, 0xa0, 0xdf, 0x10, 0x4b, 0x9c, 0x93, 0x30, 0xc0, 0x05, 0xf8, 0x00, 0x2a, 0x42, 0x9d,
	0xf8, 0xe8, 0x33, 0xa8, 0x74, 0xe4, 0x38, 0x76, 0xa2, 0xd8, 0x60, 0x86, 0x42, 0xfc, 0x1a, 0xf4,
	0x13, 0x7b, 0x48, 0x62, 0x0e, 0x6a, 0x53, 0x1c, 0x64, 0x6e, 0xb9, 0x16, 0xbd, 0x11, 0xa1, 0x9a,
	0x7c, 0x8c, 0x37, 0xa0, 0x78, 0x34, 0x74, 0xba, 0x3f, 0x32, 0xe1, 0x8d, 0xe5, 0xdf, 0x04, 0x3e,
	0xb3, 0x31, 0x7e, 0x08, 0xa5, 0x8b, 0xce, 0xef, 0x49, 0x97, 0x66, 0x4a, 0x3f, 0x82, 0x42, 0xdb,
	0x1a, 0x64, 0x62, 0xff, 0x6f, 0x0d, 0x2a, 0x0c, 0xe1, 0xd3, 0x71, 0xdf, 0x99, 0x07, 0xff, 0x97,
	0x50, 0xee, 0x7a, 0xc4, 0xa2, 0x24, 0xc0, 0xc6, 0xd8, 0x11, 0xb9, 0xb0, 0x13, 0xe4, 0xc2, 0x4e,
	0x3b, 0x48, 0x16, 0x33, 0xd8, 0x8a, 0x1e, 0x01, 0xf8, 0xf6, 0x1f, 0xc8, 0x75, 0xe7, 0x96, 0x12,
	0xbf, 0x59, 0xd8, 0xd2, 0x9e, 0xe8, 0x66, 0x95, 0xad, 0x1c, 0xb1, 0x05, 0xf4, 0x14, 0xc0, 0xf5,
	0x9c, 0xf7, 0x64, 0x6c, 0x8d, 0xbb, 0xa4, 0xa9, 0x73, 0x08, 0x95, 0x93, 0x15, 0x21, 0xda, 0x82,
	0x5a, 0x8f, 0xf8, 0x5d, 0xcf, 0x76, 0xa9, 0xed, 0x8c, 0x9b, 0x45, 0x1e, 0x86, 0xba, 0x84, 0x0f,
	0xa1, 0x1a, 0x04, 0xe3, 0xa3, 0x6d, 0xa8, 0x32, 0xb7, 0xaf, 0xed, 0x71, 0xdf, 0x91, 0x77, 0xb3,
	0x1c, 0x1a, 0x66, 0x5b, 0xcc, 0x8a, 0x27, 0x47, 0xf8, 0x5f, 0x79, 0x00, 0x71, 0x07, 0x1c, 0x88,
	0x85, 0x2e, 0x69, 0x0f, 0x96, 0x5d, 0xcb, 0x23, 0x63, 0x7a, 0x2d, 0xf7, 0x66, 0x24, 0xcc, 0x92,
	0xd8, 0x21, 0xd3, 0xfb, 0x4b, 0x28, 0xfb, 0xd4, 0xf2, 0x18, 0x80, 0x85, 0xf9, 0x00, 0xca, 0xad,
	0xe8, 0xd7, 0x50, 0xe9, 0xdb, 0x63, 0xdb, 0xbf, 0x21, 0xbd, 0xa6, 0x3e, 0x57, 0x2d, 0xdc, 0x9b,
	0x00, 0xbe, 0x98, 0x04, 0xfe, 0xf3, 0x18, 0xf0, 0xa5, 0x74, 0xb5, 0xa8, 0xd0, 0x6f, 0x82, 0x4e,
	0x3d, 0x42, 0x9a, 0x65, 0x25, 0x44, 0x91, 0x70, 0x26, 0x17, 0xe0, 0xd7, 0x50, 0x8b, 0xf0, 0xf3,
	0xd1, 0x1e, 0xd4, 0x04, 0x28, 0x2a, 0xfa, 0xab, 0x8a, 0x75, 0x8e, 0x3f, 0x74, 0xc3, 0x31, 0x4f,
	0x44, 0x56, 0x20, 0x41, 0x22, 0xf6, 0xed, 0x21, 0x89, 0x25, 0x22, 0x13, 0x9a, 0x7c, 0x99, 0xdd,
	0x2c, 0xfb, 0x7b, 0x4d, 0x6f, 0x5d, 0xc2, 0x51, 0x5f, 0x91, 0x37, 0xcb, 0xf6, 0xb4, 0x6f, 0x5d,
	0xc2, 0x50, 0x10, 0xa3, 0x79, 0xe9, 0x67, 0x40, 0xa5, 0x7b, 0x63, 0x0f, 0x7b, 0x1e, 0x19, 0x73,
	0x0c, 0xaa, 0x66, 0x38, 0x47, 0x9f, 0x42, 0xd9, 0xe1, 0x31, 0xfa, 0xcd, 0x8a, 0x02, 0x8f, 0x8c,
	0x3b, 0x90, 0x85, 0x15, 0xc7, 0xb0, 0x59, 0x92, 0x15, 0x77, 0x08, 0xd5, 0x20, 0x18, 0x3f, 0x74,
	0x37, 0x95, 0x88, 0xc1, 0x16, 0xe1, 0x2e, 0x87, 0xe1, 0x10, 0xaa, 0xcc, 0x31, 0xd3, 0x1a, 0x0f,
	0x08, 0x6a, 0x40, 0x71, 0xe8, 0xfc, 0x4c, 0x3c, 0x8e, 0x83, 0x6e, 0x8a, 0x09, 0x5b, 0x9d, 0xb0,
	0x86, 0xcb, 0x23, 0xd7, 0x4d, 0x31, 0xc1, 0x26, 0x54, 0x78, 0x7b, 0x30, 0x49, 0x1f, 0x6d, 0x41,
	0xb1, 0xc3, 0xc6, 0x12, 0x3f, 0x10, 0x1d, 0x89, 0x4b, 0x85, 0x00, 0x7d, 0x02, 0x45, 0x8f, 0x1d,
	0x21, 0x73, 0x76, 0x45, 0xec, 0x08, 0x0e, 0x36, 0x85, 0x10, 0xff, 0x0e, 0x40, 0x04, 0x1b, 0x14,
	0x85, 0x08, 0x39, 0x56, 0x14, 0x12, 0x0d, 0x29, 0x62, 0xb1, 0xf2, 0x13, 0xae, 0x3d, 0xd2, 0x97,
	0xc6, 0x97, 0x95, 0xe3, 0x49, 0xdf, 0xac, 0x74, 0xe4, 0x08, 0xff, 0x19, 0xd6, 0xde, 0xf2, 0x26,
	0xc1, 0x2b, 0x9d, 0xfc, 0x34, 0x21, 0xfe, 0xdc, 0x27, 0x20, 0xde, 0x2e, 0xf2, 0x77, 0x68, 0x17,
	0x85, 0x74, 0xbb, 0x38, 0x00, 0x74, 0x3a, 0xf6, 0x5d, 0xe6, 0xff, 0xc2, 0x1e, 0xe0, 0x97, 0xb0,
	0x7a, 0x66, 0xfb, 0x31, 0x8d, 0xb8, 0x53, 0xda, 0x0c, 0xa7, 0xf0, 0xd7, 0xb0, 0x76, 0x4c, 0x86,
	0xe4, 0x4e, 0x31, 0x37, 0xa0, 0xd8, 0x77, 0xbc, 0xae, 0xb8, 0xac, 0x8a, 0x29, 0x26, 0xf8, 0x4f,
	0x80, 0xae, 0x58, 0x87, 0x90, 0xd5, 0x2a, 0x4d, 0x3d, 0x86, 0x92, 0x68, 0x39, 0x99, 0x9d, 0x4b,
	0x88, 0xd0, 0x3a, 0x94, 0xc4, 0xbb, 0x24, 0x41, 0x91, 0xb3, 0x44, 0x4b, 0xc8, 0xcf, 0x6c, 0x09,
	0xf8, 0xef, 0x1a, 0xa0, 0xa3, 0x89, 0x3d, 0xec, 0xfd, 0x5f, 0x0e, 0xe8, 0xf7, 0x76, 0x20, 0xec,
	0x49, 0x85, 0x69, 0x3d, 0xe9, 0x39, 0x3c, 0x38, 0xe1, 0xcd, 0x30, 0xe5, 0xe1, 0xdc, 0xe6, 0x8e,
	0x5f, 0x40, 0x43, 0xa6, 0xc6, 0x3d, 0x94, 0xff, 0xa6, 0xc1, 0x1a, 0xcb, 0x91, 0xb8, 0xea, 0x9c,
	0x5b, 0xde, 0x04, 0xbd, 0xef, 0x39, 0xa3, 0x4c, 0xda, 0xc1, 0x04, 0x68, 0x03, 0xf2, 0xd4, 0x89,
	0x45, 0x2b, 0xc5, 0x79, 0xca, 0xa8, 0x51, 0x69, 0x3c, 0x19, 0x75, 0x88, 0xc7, 0x11, 0xd5, 0x4d,
	0x39, 0xc3, 0xfb, 0xc2, 0x13, 0x49, 0x47, 0x16, 0xcb, 0xf0, 0x0b, 0xa8, 0x5f, 0x91, 0x84, 0xca,
	0x42, 0x2f, 0x62, 0x74, 0xad, 0x79, 0xf5, 0x5a, 0xf1, 0x19, 0x3c, 0x10, 0x49, 0x7f, 0x17, 0x37,
	0xa6, 0x5a, 0x7b, 0x1e, 0x58, 0xbb, 0xc7, 0xcd, 0x58, 0x80, 0x4e, 0x86, 0x93, 0x64, 0x46, 0x7c,
	0x0a, 0x65, 0x21, 0xf7, 0xb3, 0x58, 0x63, 0x20, 0x43, 0x9f, 0x40, 0x85, 0x3a, 0xd7, 0xcc, 0x37,
	0x3f, 0xdd, 0x79, 0xca, 0xd4, 0x61, 0x7f, 0x7d, 0xec, 0xc2, 0xfa, 0xd5, 0xa4, 0xc3, 0x9a, 0x4c,
	0x87, 0xdc, 0x29, 0x01, 0xa6, 0xc4, 0x1b, 0x26, 0x46, 0x61, 0x4a, 0x62, 0xe0, 0x9f, 0x60, 0xe5,
	0x1d, 0xa1, 0xfc, 0x7d, 0x8c, 0x4e, 0x9a, 0xf5, 0x7e, 0x7e, 0x0c, 0x4b, 0x4e, 0xbf, 0xef, 0x13,
	0x2a, 0x5f, 0x45, 0x76, 0x5e, 0xc1, 0xac, 0x89, 0x35, 0xf1, 0x2e, 0xa6, 0x9f, 0xcd, 0x82, 0xf2,
	0x6c, 0xe2, 0xbf, 0xe4, 0x61, 0xe5, 0x72, 0x72, 0x97, 0x33, 0x1b, 0x50, 0x7c, 0x6f, 0x0d, 0x27,
	0xa2, 0x5c, 0x97, 0x4c, 0x31, 0x41, 0x75, 0x28, 0x4c, 0xbc, 0xa1, 0xa4, 0x72, 0x6c, 0x88, 0x1e,
	0x32, 0xd6, 0xd6, 0x9d, 0x78, 0xbe, 0xfd, 0x9e, 0xb1, 0x12, 0xd6, 0xf0, 0xa2, 0x05, 0xf4, 0x05,
	0x54, 0x7b, 0x64, 0x68, 0x8f, 0x6c, 0x4a, 0x3c, 0xfe, 0xe0, 0xae, 0xc8, 0xb7, 0xeb, 0x38, 0x58,
	0x35, 0xa3, 0x0d, 0xe8, 0x0b, 0x40, 0xd4, 0xf2, 0x06, 0x84, 0x5e, 0xf3, 0xf7, 0xb7, 0x67, 0xd1,
	0xc9, 0x88, 0xbd, 0xe5, 0x2c, 0x98, 0xba, 0x90, 0x30, 0x0f, 0x8f, 0xf9, 0x3a, 0xda, 0x86, 0x35,
	0x75, 0xb7, 0x88, 0xbc, 0xca, 0x37, 0xaf, 0x46, 0x9b, 0x79, 0xfc, 0xdf, 0xe8, 0x95, 0x7c, 0xbd,
	0xa0, 0xbc, 0x1f, 0x8b, 0x03, 0x81, 0xf7, 0xc4, 0xfb, 0x71, 0x07, 0x8d, 0x4b, 0x58, 0x7d, 0x37,
	0x74, 0x3a, 0xaa, 0xc6, 0x42, 0xe5, 0xd8, 0x84, 0xb2, 0x6b, 0x51, 0x4a, 0xbc, 0xb1, 0xcc, 0xa8,
	0x60, 0xca, 0xba, 0x82, 0x28, 0xa1, 0x3b, 0x78, 0x71, 0x02, 0xf5, 0xcb, 0x09, 0x95, 0x0d, 0x56,
	0xaa, 0x84, 0x97, 0xaa, 0xa9, 0x97, 0xfa, 0x10, 0x74, 0x6a, 0x0d, 0x82, 0x1a, 0xa9, 0x70, 0x43,
	0x6d, 0x6b, 0x60, 0xf2, 0x55, 0xfc, 0x47, 0x58, 0x7b, 0x47, 0xa4, 0x1d, 0x5f, 0xa9, 0xc0, 0x80,
	0x6a, 0x69, 0x33, 0xa8, 0x56, 0x56, 0xe2, 0xea, 0xf3, 0x12, 0x57, 0xe5, 0x7b, 0xf8, 0x3b, 0xa8,
	0xb7, 0xad, 0x41, 0x3c, 0x8a, 0x85, 0x88, 0xcd, 0xec, 0xa0, 0x1a, 0x80, 0xd8, 0xa5, 0xc6, 0xa3,
	0xc2, 0x2f, 0x01, 0x2b, 0xab, 0x6d, 0x6b, 0x30, 0x20, 0xbd, 0x1f, 0x6c, 0x7a, 0x73, 0xe9, 0x91,
	0xbe, 0xfd, 0x4b, 0x70, 0xfc, 0x3a, 0x94, 0x5c, 0xbe, 0x20, 0x3f, 0xcc, 0xe4, 0x0c, 0xbf, 0x82,
	0x86, 0xb8, 0xa4, 0x7b, 0x61, 0x85, 0x3f, 0x84, 0x0f, 0x12, 0xea, 0xbe, 0xeb, 0x8c, 0x7d, 0x82,
	0xff, 0x9a, 0x87, 0x5a, 0x40, 0xeb, 0x7a, 0xe4, 0x17, 0x74, 0x98, 0xb4, 0xf7, 0x48, 0xb1, 0xc7,
	0xb7, 0xc8, 0xb1, 0xdf, 0x1a, 0x53, 0xef, 0x36, 0xba, 0x8d, 0x9d, 0x18, 0x24, 0x46, 0x4a, 0xab,
	0x6d, 0x0d, 0xa4, 0x0a, 0xdf, 0x67, 0x9c, 0xc2, 0x92, 0x6a, 0x88, 0x15, 0xff, 0x8f, 0xe4, 0x56,
	0x46, 0xcd, 0x86, 0xe8, 0x71, 0x90, 0x4f, 0x99, 0xcc, 0x51, 0xc8, 0x9e, 0xe7, 0xbf, 0xd2, 0x8c,
	0x63, 0xa8, 0x86, 0xd6, 0x33, 0xec, 0x7c, 0x1c, 0xb7, 0x13, 0x03, 0x28, 0xb2, 0xb2, 0xfd, 0xb9,
	0xf8, 0xe4, 0xe0, 0xdf, 0x09, 0x4b, 0x50, 0x31, 0x5b, 0x57, 0x2d, 0xf3, 0xfb, 0xd6, 0x71, 0x3d,
	0x87, 0x2a, 0xa0, 0x9f, 0x9c, 0x9e, 0xb5, 0xea, 0x1a, 0x2a, 0x43, 0xe1, 0xf8, 0xd4, 0xac, 0xe7,
	0xb7, 0x9f, 0x42, 0x35, 0x6c, 0x32, 0x4c, 0x7e, 0x7e, 0x71, 0xde, 0x12, 0x3b, 0xbf, 0xb9, 0xba,
	0x38, 0xaf, 0x6b, 0x6c, 0x74, 0x76, 0x7a, 0xde, 0xaa, 0xe7, 0xb7, 0xcf, 0x60, 0x29, 0x28, 0xf1,
	0x6f, 0x9d, 0x1e, 0x41, 0x0f, 0xa2, 0x92, 0xbf, 0x3e, 0xbf, 0x30, 0xbf, 0x7d, 0x73, 0x56, 0xcf,
	0xa1, 0x35, 0x58, 0x0e, 0x17, 0x4f, 0xde, 0x5c, 0xb5, 0xeb, 0x1a, 0x6a, 0x40, 0x3d, 0x5c, 0x32,
	0x5b, 0x6f, 0xbf, 0x33, 0xaf, 0x5a, 0xf5, 0xfc, 0xfe, 0x3f, 0x01, 0x0a, 0x6f, 0x2e, 0x4f, 0xd1,
	0x6f, 0x01, 0x22, 0xba, 0x8c, 0xd6, 0x45, 0xc5, 0x27, 0xf9, 0xb3, 0xb1, 0x9e, 0xfa, 0x36, 0x6c,
	0x8d, 0x5c, 0x7a, 0x8b, 0x73, 0xe8, 0x10, 0x6a, 0x0a, 0xdb, 0x45, 0x1f, 0x72, 0x03, 0x69, 0xfe,
	0x6b, 0xc4, 0x3f, 0x92, 0x71, 0x0e, 0xed, 0x43, 0x25, 0x60, 0xbc, 0xa8, 0xc1, 0x85, 0x09, 0x02,
	0x6c, 0xac, 0xc4, 0x54, 0x7c, 0x9c, 0x63, 0xce, 0x46, 0x3c, 0x57, 0x3a, 0x9b, 0x22, 0xbe, 0x33,
	0x9c, 0x7d, 0x06, 0x35, 0x85, 0xdd, 0x4a, 0x67, 0xd3, 0x7c, 0xd7, 0x50, 0x1b, 0x1f, 0xce, 0xa1,
	0x23, 0x58, 0x52, 0x29, 0x1f, 0x6a, 0xca, 0x2e, 0x96, 0x62, 0x81, 0x33, 0x8e, 0x7e, 0x05, 0xcb,
	0x31, 0xea, 0x87, 0x3e, 0x52, 0x91, 0x8a, 0x5b, 0x49, 0x7e, 0xd2, 0xe2, 0x1c, 0xfa, 0x0a, 0x20,
	0xe2, 0x7e, 0x32, 0xf2, 0x14, 0x19, 0x34, 0xea, 0x09, 0x45, 0x5f, 0x38, 0xaf, 0x12, 0x1b, 0xe9,
	0x7c, 0x06, 0xd7, 0x99, 0xe1, 0xfc, 0x0b, 0xa8, 0x29, 0x04, 0x47, 0xe2, 0x96, 0xa6, 0x3c, 0x19,
	0x8e, 0xef, 0x69, 0xe8, 0x2d, 0xac, 0x26, 0xa8, 0x0b, 0xda, 0x10, 0xc0, 0x67, 0x12, 0x9a, 0x6c,
	0x23, 0xcf, 0xa0, 0xa6, 0x7c, 0x16, 0x48, 0x0f, 0xd2, 0x1f, 0x0a, 0xc9, 0x9b, 0x7b, 0x26, 0x60,
	0x93, 0xbf, 0xcb, 0x45, 0xb0, 0xc5, 0x28, 0xa3, 0xcc, 0xcd, 0xe0, 0xd7, 0x37, 0x9c, 0x43, 0x2f,
	0xa1, 0x1a, 0x72, 0x55, 0xf4, 0x81, 0x70, 0x36, 0xc1, 0x5d, 0x67, 0xa0, 0x15, 0x22, 0x2e, 0x0d,
	0xa8, 0x88, 0x2f, 0x6a, 0xe3, 0x39, 0x94, 0x25, 0x13, 0x42, 0x0f, 0xb8, 0x7a, 0x9c, 0x17, 0x4d,
	0xd7, 0x7c, 0xa2, 0xa1, 0xd7, 0x50, 0x96, 0xcc, 0x4d, 0xea, 0xc6, 0x79, 0x9c, 0xb1, 0x91, 0xd2,
	0xe5, 0xaf, 0xd8, 0xf7, 0xac, 0x83, 0x71, 0xb0, 0xa3, 0x9a, 0xe6, 0x46, 0x62, 0x35, 0xad, 0x1a,
	0x8a, 0xff, 0xde, 0x10, 0xd5, 0x34, 0xd7, 0x8a, 0x6a, 0x5a, 0x55, 0x59, 0x89, 0xa9, 0xf8, 0x42,
	0x27, 0xe0, 0x21, 0x52, 0x27, 0x41, 0x4b, 0x32, 0x74, 0xc2, 0x3e, 0xc0, 0xb5, 0xd4, 0x3e, 0xb0,
	0x10, 0x46, 0xe8, 0x15, 0xef, 0xba, 0x84, 0x92, 0x37, 0xc3, 0x21, 0x9a, 0xb2, 0x6d, 0xba, 0xfa,
	0xfe, 0x3f, 0x8a, 0x50, 0x15, 0x7d, 0x9f, 0x75, 0xd0, 0x03, 0xa8, 0x86, 0x14, 0x46, 0x26, 0x4b,
	0x92, 0xd2, 0x18, 0xea, 0x5b, 0xc1, 0xef, 0xe8, 0x37, 0x50, 0x0d, 0xf9, 0x0a, 0x52, 0xa5, 0xf3,
	0x6f, 0xa7, 0x05, 0x10, 0x51, 0x1d, 0x19, 0x7c, 0x8a, 0xfb, 0xcc, 0x37, 0xf3, 0x92, 0x3f, 0x76,
	0x31, 0xb7, 0x93, 0x1c, 0x66, 0x06, 0x82, 0xbb, 0x61, 0x3b, 0xcb, 0x8a, 0x61, 0x35, 0xf6, 0x6a,
	0xf3, 0xd4, 0x38, 0x84, 0x9a, 0xc2, 0x5a, 0x64, 0x4e, 0xa5, 0xd9, 0x4d, 0x02, 0xa9, 0x3d, 0x0d,
	0xfd, 0x00, 0x1b, 0x33, 0xe8, 0x0e, 0xfa, 0x2c, 0x69, 0x68, 0x0a, 0x21, 0x4a, 0x1b, 0xfe, 0x1a,
	0x96, 0x63, 0x54, 0x46, 0x76, 0xe4, 0x2c, 0x76, 0x64, 0x18, 0x59, 0x22, 0xc9, 0x7c, 0x72, 0xe8,
	0x00, 0x4a, 0xef, 0x08, 0x6d, 0x5b, 0x03, 0x14, 0x32, 0xb8, 0xf9, 0xf8, 0x3f, 0x05, 0x90, 0x08,
	0xc6, 0x15, 0x33, 0xb0, 0x7b, 0xc1, 0xff, 0x27, 0xc2, 0xb5, 0xba, 0xf4, 0xee, 0xc9, 0xda, 0x29,
	0xf1, 0x95, 0x83, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xb2, 0xbd, 0x27, 0xbb, 0x19, 0x00,
	0x00,
}
