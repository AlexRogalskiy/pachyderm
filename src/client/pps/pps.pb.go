// Code generated by protoc-gen-gogo.
// source: client/pps/pps.proto
// DO NOT EDIT!

/*
Package pps is a generated protocol buffer package.

It is generated from these files:
	client/pps/pps.proto

It has these top-level messages:
	Secret
	Transform
	Egress
	Job
	Service
	AtomInput
	Input
	JobInput
	ParallelismSpec
	Datum
	WorkerStatus
	ResourceSpec
	JobInfo
	Worker
	JobInfos
	Pipeline
	PipelineInput
	PipelineInfo
	PipelineInfos
	CreateJobRequest
	InspectJobRequest
	ListJobRequest
	DeleteJobRequest
	StopJobRequest
	GetLogsRequest
	LogMessage
	RestartDatumRequest
	CreatePipelineRequest
	InspectPipelineRequest
	ListPipelineRequest
	DeletePipelineRequest
	StartPipelineRequest
	StopPipelineRequest
	RerunPipelineRequest
	GarbageCollectRequest
	GarbageCollectResponse
*/
package pps

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JobState int32

const (
	JobState_JOB_STARTING JobState = 0
	JobState_JOB_RUNNING  JobState = 1
	JobState_JOB_FAILURE  JobState = 2
	JobState_JOB_SUCCESS  JobState = 3
	JobState_JOB_STOPPED  JobState = 4
)

var JobState_name = map[int32]string{
	0: "JOB_STARTING",
	1: "JOB_RUNNING",
	2: "JOB_FAILURE",
	3: "JOB_SUCCESS",
	4: "JOB_STOPPED",
}
var JobState_value = map[string]int32{
	"JOB_STARTING": 0,
	"JOB_RUNNING":  1,
	"JOB_FAILURE":  2,
	"JOB_SUCCESS":  3,
	"JOB_STOPPED":  4,
}

func (x JobState) String() string {
	return proto.EnumName(JobState_name, int32(x))
}
func (JobState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{0} }

type WorkerState int32

const (
	WorkerState_POD_RUNNING WorkerState = 0
	WorkerState_POD_SUCCESS WorkerState = 1
	WorkerState_POD_FAILED  WorkerState = 2
)

var WorkerState_name = map[int32]string{
	0: "POD_RUNNING",
	1: "POD_SUCCESS",
	2: "POD_FAILED",
}
var WorkerState_value = map[string]int32{
	"POD_RUNNING": 0,
	"POD_SUCCESS": 1,
	"POD_FAILED":  2,
}

func (x WorkerState) String() string {
	return proto.EnumName(WorkerState_name, int32(x))
}
func (WorkerState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{1} }

type PipelineState int32

const (
	// When the pipeline is not ready to be triggered by commits.
	// This happens when either 1) a pipeline has been created but not
	// yet picked up by a PPS server, or 2) the pipeline does not have
	// any inputs and is meant to be triggered manually
	PipelineState_PIPELINE_STARTING PipelineState = 0
	// After this pipeline is picked up by a pachd node.  This is the normal
	// state of a pipeline.
	PipelineState_PIPELINE_RUNNING PipelineState = 1
	// After some error caused runPipeline to exit, but before the
	// pipeline is re-run.  This is when the exponential backoff is
	// in effect.
	PipelineState_PIPELINE_RESTARTING PipelineState = 2
	// We have retried too many times and we have given up on this pipeline.
	PipelineState_PIPELINE_FAILURE PipelineState = 3
	// The pipeline has been explicitly stopped by the user.
	PipelineState_PIPELINE_STOPPED PipelineState = 4
)

var PipelineState_name = map[int32]string{
	0: "PIPELINE_STARTING",
	1: "PIPELINE_RUNNING",
	2: "PIPELINE_RESTARTING",
	3: "PIPELINE_FAILURE",
	4: "PIPELINE_STOPPED",
}
var PipelineState_value = map[string]int32{
	"PIPELINE_STARTING":   0,
	"PIPELINE_RUNNING":    1,
	"PIPELINE_RESTARTING": 2,
	"PIPELINE_FAILURE":    3,
	"PIPELINE_STOPPED":    4,
}

func (x PipelineState) String() string {
	return proto.EnumName(PipelineState_name, int32(x))
}
func (PipelineState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{2} }

// Which Parallelism strategy to use. Depending on the value of
// 'strategy', other messages in the spec will or will not be set.
type ParallelismSpec_Strategy int32

const (
	ParallelismSpec_CONSTANT    ParallelismSpec_Strategy = 0
	ParallelismSpec_COEFFICIENT ParallelismSpec_Strategy = 1
)

var ParallelismSpec_Strategy_name = map[int32]string{
	0: "CONSTANT",
	1: "COEFFICIENT",
}
var ParallelismSpec_Strategy_value = map[string]int32{
	"CONSTANT":    0,
	"COEFFICIENT": 1,
}

func (x ParallelismSpec_Strategy) String() string {
	return proto.EnumName(ParallelismSpec_Strategy_name, int32(x))
}
func (ParallelismSpec_Strategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPps, []int{8, 0}
}

type Secret struct {
	// Name must be the name of the secret in kubernetes.
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{0} }

func (m *Secret) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Secret) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

type Transform struct {
	Image            string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Cmd              []string          `protobuf:"bytes,2,rep,name=cmd" json:"cmd,omitempty"`
	Env              map[string]string `protobuf:"bytes,3,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Secrets          []*Secret         `protobuf:"bytes,4,rep,name=secrets" json:"secrets,omitempty"`
	ImagePullSecrets []string          `protobuf:"bytes,9,rep,name=image_pull_secrets,json=imagePullSecrets" json:"image_pull_secrets,omitempty"`
	Stdin            []string          `protobuf:"bytes,5,rep,name=stdin" json:"stdin,omitempty"`
	AcceptReturnCode []int64           `protobuf:"varint,6,rep,packed,name=accept_return_code,json=acceptReturnCode" json:"accept_return_code,omitempty"`
	Debug            bool              `protobuf:"varint,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (m *Transform) Reset()                    { *m = Transform{} }
func (m *Transform) String() string            { return proto.CompactTextString(m) }
func (*Transform) ProtoMessage()               {}
func (*Transform) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{1} }

func (m *Transform) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Transform) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Transform) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Transform) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *Transform) GetImagePullSecrets() []string {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

func (m *Transform) GetStdin() []string {
	if m != nil {
		return m.Stdin
	}
	return nil
}

func (m *Transform) GetAcceptReturnCode() []int64 {
	if m != nil {
		return m.AcceptReturnCode
	}
	return nil
}

func (m *Transform) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type Egress struct {
	URL string `protobuf:"bytes,1,opt,name=URL,json=uRL,proto3" json:"URL,omitempty"`
}

func (m *Egress) Reset()                    { *m = Egress{} }
func (m *Egress) String() string            { return proto.CompactTextString(m) }
func (*Egress) ProtoMessage()               {}
func (*Egress) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{2} }

func (m *Egress) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type Job struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{3} }

func (m *Job) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Service struct {
	InternalPort int32 `protobuf:"varint,1,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort int32 `protobuf:"varint,2,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{4} }

func (m *Service) GetInternalPort() int32 {
	if m != nil {
		return m.InternalPort
	}
	return 0
}

func (m *Service) GetExternalPort() int32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

type AtomInput struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repo       string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Branch     string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit     string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Glob       string `protobuf:"bytes,5,opt,name=glob,proto3" json:"glob,omitempty"`
	Lazy       bool   `protobuf:"varint,6,opt,name=lazy,proto3" json:"lazy,omitempty"`
	FromCommit string `protobuf:"bytes,7,opt,name=from_commit,json=fromCommit,proto3" json:"from_commit,omitempty"`
}

func (m *AtomInput) Reset()                    { *m = AtomInput{} }
func (m *AtomInput) String() string            { return proto.CompactTextString(m) }
func (*AtomInput) ProtoMessage()               {}
func (*AtomInput) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{5} }

func (m *AtomInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AtomInput) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *AtomInput) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *AtomInput) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *AtomInput) GetGlob() string {
	if m != nil {
		return m.Glob
	}
	return ""
}

func (m *AtomInput) GetLazy() bool {
	if m != nil {
		return m.Lazy
	}
	return false
}

func (m *AtomInput) GetFromCommit() string {
	if m != nil {
		return m.FromCommit
	}
	return ""
}

type Input struct {
	Atom  *AtomInput `protobuf:"bytes,1,opt,name=atom" json:"atom,omitempty"`
	Cross []*Input   `protobuf:"bytes,2,rep,name=cross" json:"cross,omitempty"`
	Union []*Input   `protobuf:"bytes,3,rep,name=union" json:"union,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{6} }

func (m *Input) GetAtom() *AtomInput {
	if m != nil {
		return m.Atom
	}
	return nil
}

func (m *Input) GetCross() []*Input {
	if m != nil {
		return m.Cross
	}
	return nil
}

func (m *Input) GetUnion() []*Input {
	if m != nil {
		return m.Union
	}
	return nil
}

type JobInput struct {
	Name   string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Commit *pfs.Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Glob   string      `protobuf:"bytes,2,opt,name=glob,proto3" json:"glob,omitempty"`
	Lazy   bool        `protobuf:"varint,3,opt,name=lazy,proto3" json:"lazy,omitempty"`
}

func (m *JobInput) Reset()                    { *m = JobInput{} }
func (m *JobInput) String() string            { return proto.CompactTextString(m) }
func (*JobInput) ProtoMessage()               {}
func (*JobInput) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{7} }

func (m *JobInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobInput) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *JobInput) GetGlob() string {
	if m != nil {
		return m.Glob
	}
	return ""
}

func (m *JobInput) GetLazy() bool {
	if m != nil {
		return m.Lazy
	}
	return false
}

type ParallelismSpec struct {
	Strategy ParallelismSpec_Strategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=pps.ParallelismSpec_Strategy" json:"strategy,omitempty"`
	// If 'strategy' is set to CONSTANT, then the field 'constant' is used.
	//
	// Starts the pipeline/job with a 'constant' workers, unless 'constant' is
	// zero. If 'constant' is zero (which is the zero value of ParallelismSpec),
	// then Pachyderm will choose the number of workers that is started,
	// (currently it chooses the number of workers in the cluster)
	Constant uint64 `protobuf:"varint,2,opt,name=constant,proto3" json:"constant,omitempty"`
	// If 'strategy' is set to COEFFICIENT, then the field 'coefficient' is used.
	//
	// Starts the pipeline/job with number of workers equal to 'coefficient' * N,
	// where N is the number of nodes in the kubernetes cluster.
	//
	// For example, if each Kubernetes node has four CPUs, you might set
	// 'coefficient' to four, so that there are four Pachyderm workers per
	// Kubernetes node, and each Pachyderm worker gets one CPU. If you want to
	// reserve half the nodes in your cluster for other tasks, you might set
	// 'coefficient' to 0.5.
	Coefficient float64 `protobuf:"fixed64,3,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
}

func (m *ParallelismSpec) Reset()                    { *m = ParallelismSpec{} }
func (m *ParallelismSpec) String() string            { return proto.CompactTextString(m) }
func (*ParallelismSpec) ProtoMessage()               {}
func (*ParallelismSpec) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{8} }

func (m *ParallelismSpec) GetStrategy() ParallelismSpec_Strategy {
	if m != nil {
		return m.Strategy
	}
	return ParallelismSpec_CONSTANT
}

func (m *ParallelismSpec) GetConstant() uint64 {
	if m != nil {
		return m.Constant
	}
	return 0
}

func (m *ParallelismSpec) GetCoefficient() float64 {
	if m != nil {
		return m.Coefficient
	}
	return 0
}

type Datum struct {
	// This file's absolute path within its pfs repo.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// This file's hash
	Hash []byte `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Datum) Reset()                    { *m = Datum{} }
func (m *Datum) String() string            { return proto.CompactTextString(m) }
func (*Datum) ProtoMessage()               {}
func (*Datum) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{9} }

func (m *Datum) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Datum) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type WorkerStatus struct {
	WorkerID string   `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	JobID    string   `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Data     []*Datum `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	// Started is the time processing on the current datum began.
	Started *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=started" json:"started,omitempty"`
}

func (m *WorkerStatus) Reset()                    { *m = WorkerStatus{} }
func (m *WorkerStatus) String() string            { return proto.CompactTextString(m) }
func (*WorkerStatus) ProtoMessage()               {}
func (*WorkerStatus) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{10} }

func (m *WorkerStatus) GetWorkerID() string {
	if m != nil {
		return m.WorkerID
	}
	return ""
}

func (m *WorkerStatus) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *WorkerStatus) GetData() []*Datum {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WorkerStatus) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

// ResourceSpec describes the amount of resources that pipeline pods should
// request from kubernetes, for scheduling.
type ResourceSpec struct {
	// The number of CPUs each worker needs (partial values are allowed, and
	// encouraged)
	Cpu float32 `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// The amount of memory, in bytes, each worker needs (in bytes, with allowed
	// SI suffixes (M, K, G, Mi, Ki, Gi, etc).
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// The number of GPUs each worker needs.
	Gpu int64 `protobuf:"varint,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
}

func (m *ResourceSpec) Reset()                    { *m = ResourceSpec{} }
func (m *ResourceSpec) String() string            { return proto.CompactTextString(m) }
func (*ResourceSpec) ProtoMessage()               {}
func (*ResourceSpec) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{11} }

func (m *ResourceSpec) GetCpu() float32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *ResourceSpec) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

func (m *ResourceSpec) GetGpu() int64 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

type JobInfo struct {
	Job             *Job                        `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Transform       *Transform                  `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineID      string                      `protobuf:"bytes,19,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Pipeline        *Pipeline                   `protobuf:"bytes,3,opt,name=pipeline" json:"pipeline,omitempty"`
	PipelineVersion uint64                      `protobuf:"varint,13,opt,name=pipeline_version,json=pipelineVersion,proto3" json:"pipeline_version,omitempty"`
	ParallelismSpec *ParallelismSpec            `protobuf:"bytes,12,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*JobInput                 `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	Egress          *Egress                     `protobuf:"bytes,15,opt,name=egress" json:"egress,omitempty"`
	ParentJob       *Job                        `protobuf:"bytes,6,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Started         *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=started" json:"started,omitempty"`
	Finished        *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=finished" json:"finished,omitempty"`
	OutputCommit    *pfs.Commit                 `protobuf:"bytes,9,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	State           JobState                    `protobuf:"varint,10,opt,name=state,proto3,enum=pps.JobState" json:"state,omitempty"`
	Service         *Service                    `protobuf:"bytes,14,opt,name=service" json:"service,omitempty"`
	OutputRepo      *pfs.Repo                   `protobuf:"bytes,18,opt,name=outputRepo" json:"outputRepo,omitempty"`
	OutputBranch    string                      `protobuf:"bytes,17,opt,name=outputBranch,proto3" json:"outputBranch,omitempty"`
	Restart         uint64                      `protobuf:"varint,20,opt,name=restart,proto3" json:"restart,omitempty"`
	DataProcessed   int64                       `protobuf:"varint,22,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	DataTotal       int64                       `protobuf:"varint,23,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	WorkerStatus    []*WorkerStatus             `protobuf:"bytes,24,rep,name=worker_status,json=workerStatus" json:"worker_status,omitempty"`
	ResourceSpec    *ResourceSpec               `protobuf:"bytes,25,opt,name=resource_spec,json=resourceSpec" json:"resource_spec,omitempty"`
	Input           *Input                      `protobuf:"bytes,26,opt,name=input" json:"input,omitempty"`
	NewBranch       *pfs.Branch                 `protobuf:"bytes,27,opt,name=new_branch,json=newBranch" json:"new_branch,omitempty"`
	Incremental     bool                        `protobuf:"varint,28,opt,name=incremental,proto3" json:"incremental,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{12} }

func (m *JobInfo) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobInfo) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetPipelineID() string {
	if m != nil {
		return m.PipelineID
	}
	return ""
}

func (m *JobInfo) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *JobInfo) GetPipelineVersion() uint64 {
	if m != nil {
		return m.PipelineVersion
	}
	return 0
}

func (m *JobInfo) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *JobInfo) GetInputs() []*JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobInfo) GetEgress() *Egress {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *JobInfo) GetParentJob() *Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *JobInfo) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *JobInfo) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *JobInfo) GetState() JobState {
	if m != nil {
		return m.State
	}
	return JobState_JOB_STARTING
}

func (m *JobInfo) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *JobInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *JobInfo) GetOutputBranch() string {
	if m != nil {
		return m.OutputBranch
	}
	return ""
}

func (m *JobInfo) GetRestart() uint64 {
	if m != nil {
		return m.Restart
	}
	return 0
}

func (m *JobInfo) GetDataProcessed() int64 {
	if m != nil {
		return m.DataProcessed
	}
	return 0
}

func (m *JobInfo) GetDataTotal() int64 {
	if m != nil {
		return m.DataTotal
	}
	return 0
}

func (m *JobInfo) GetWorkerStatus() []*WorkerStatus {
	if m != nil {
		return m.WorkerStatus
	}
	return nil
}

func (m *JobInfo) GetResourceSpec() *ResourceSpec {
	if m != nil {
		return m.ResourceSpec
	}
	return nil
}

func (m *JobInfo) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *JobInfo) GetNewBranch() *pfs.Branch {
	if m != nil {
		return m.NewBranch
	}
	return nil
}

func (m *JobInfo) GetIncremental() bool {
	if m != nil {
		return m.Incremental
	}
	return false
}

type Worker struct {
	Name  string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State WorkerState `protobuf:"varint,2,opt,name=state,proto3,enum=pps.WorkerState" json:"state,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{13} }

func (m *Worker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Worker) GetState() WorkerState {
	if m != nil {
		return m.State
	}
	return WorkerState_POD_RUNNING
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{14} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type Pipeline struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{15} }

func (m *Pipeline) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PipelineInput struct {
	Name   string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Repo   *pfs.Repo   `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Branch string      `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Glob   string      `protobuf:"bytes,3,opt,name=glob,proto3" json:"glob,omitempty"`
	Lazy   bool        `protobuf:"varint,4,opt,name=lazy,proto3" json:"lazy,omitempty"`
	From   *pfs.Commit `protobuf:"bytes,6,opt,name=from" json:"from,omitempty"`
}

func (m *PipelineInput) Reset()                    { *m = PipelineInput{} }
func (m *PipelineInput) String() string            { return proto.CompactTextString(m) }
func (*PipelineInput) ProtoMessage()               {}
func (*PipelineInput) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{16} }

func (m *PipelineInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PipelineInput) GetRepo() *pfs.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *PipelineInput) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *PipelineInput) GetGlob() string {
	if m != nil {
		return m.Glob
	}
	return ""
}

func (m *PipelineInput) GetLazy() bool {
	if m != nil {
		return m.Lazy
	}
	return false
}

func (m *PipelineInput) GetFrom() *pfs.Commit {
	if m != nil {
		return m.From
	}
	return nil
}

type PipelineInfo struct {
	ID                 string                      `protobuf:"bytes,17,opt,name=id,proto3" json:"id,omitempty"`
	Pipeline           *Pipeline                   `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Version            uint64                      `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	Transform          *Transform                  `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	ParallelismSpec    *ParallelismSpec            `protobuf:"bytes,10,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs             []*PipelineInput            `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Egress             *Egress                     `protobuf:"bytes,15,opt,name=egress" json:"egress,omitempty"`
	CreatedAt          *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	State              PipelineState               `protobuf:"varint,7,opt,name=state,proto3,enum=pps.PipelineState" json:"state,omitempty"`
	RecentError        string                      `protobuf:"bytes,8,opt,name=recent_error,json=recentError,proto3" json:"recent_error,omitempty"`
	JobCounts          map[int32]int32             `protobuf:"bytes,9,rep,name=job_counts,json=jobCounts" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OutputBranch       string                      `protobuf:"bytes,16,opt,name=outputBranch,proto3" json:"outputBranch,omitempty"`
	ScaleDownThreshold *google_protobuf2.Duration  `protobuf:"bytes,18,opt,name=scaleDownThreshold" json:"scaleDownThreshold,omitempty"`
	ResourceSpec       *ResourceSpec               `protobuf:"bytes,19,opt,name=resource_spec,json=resourceSpec" json:"resource_spec,omitempty"`
	Input              *Input                      `protobuf:"bytes,20,opt,name=input" json:"input,omitempty"`
	Description        string                      `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	Incremental        bool                        `protobuf:"varint,22,opt,name=incremental,proto3" json:"incremental,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{17} }

func (m *PipelineInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PipelineInfo) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *PipelineInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PipelineInfo) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *PipelineInfo) GetInputs() []*PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineInfo) GetEgress() *Egress {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineInfo) GetState() PipelineState {
	if m != nil {
		return m.State
	}
	return PipelineState_PIPELINE_STARTING
}

func (m *PipelineInfo) GetRecentError() string {
	if m != nil {
		return m.RecentError
	}
	return ""
}

func (m *PipelineInfo) GetJobCounts() map[int32]int32 {
	if m != nil {
		return m.JobCounts
	}
	return nil
}

func (m *PipelineInfo) GetOutputBranch() string {
	if m != nil {
		return m.OutputBranch
	}
	return ""
}

func (m *PipelineInfo) GetScaleDownThreshold() *google_protobuf2.Duration {
	if m != nil {
		return m.ScaleDownThreshold
	}
	return nil
}

func (m *PipelineInfo) GetResourceSpec() *ResourceSpec {
	if m != nil {
		return m.ResourceSpec
	}
	return nil
}

func (m *PipelineInfo) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PipelineInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PipelineInfo) GetIncremental() bool {
	if m != nil {
		return m.Incremental
	}
	return false
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{18} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type CreateJobRequest struct {
	Transform       *Transform       `protobuf:"bytes,1,opt,name=transform" json:"transform,omitempty"`
	Pipeline        *Pipeline        `protobuf:"bytes,2,opt,name=pipeline" json:"pipeline,omitempty"`
	PipelineVersion uint64           `protobuf:"varint,10,opt,name=pipeline_version,json=pipelineVersion,proto3" json:"pipeline_version,omitempty"`
	ParallelismSpec *ParallelismSpec `protobuf:"bytes,7,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*JobInput      `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Egress          *Egress          `protobuf:"bytes,9,opt,name=egress" json:"egress,omitempty"`
	// When service is defined, we create a long running job
	// by using a k8s RC and Service instead of a k8s Job
	Service      *Service      `protobuf:"bytes,8,opt,name=service" json:"service,omitempty"`
	OutputRepo   *pfs.Repo     `protobuf:"bytes,12,opt,name=outputRepo" json:"outputRepo,omitempty"`
	OutputBranch string        `protobuf:"bytes,11,opt,name=outputBranch,proto3" json:"outputBranch,omitempty"`
	ParentJob    *Job          `protobuf:"bytes,13,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	ResourceSpec *ResourceSpec `protobuf:"bytes,14,opt,name=resource_spec,json=resourceSpec" json:"resource_spec,omitempty"`
	Input        *Input        `protobuf:"bytes,15,opt,name=input" json:"input,omitempty"`
	NewBranch    *pfs.Branch   `protobuf:"bytes,16,opt,name=new_branch,json=newBranch" json:"new_branch,omitempty"`
	Incremental  bool          `protobuf:"varint,17,opt,name=incremental,proto3" json:"incremental,omitempty"`
}

func (m *CreateJobRequest) Reset()                    { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()               {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{19} }

func (m *CreateJobRequest) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *CreateJobRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *CreateJobRequest) GetPipelineVersion() uint64 {
	if m != nil {
		return m.PipelineVersion
	}
	return 0
}

func (m *CreateJobRequest) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *CreateJobRequest) GetInputs() []*JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreateJobRequest) GetEgress() *Egress {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *CreateJobRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *CreateJobRequest) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *CreateJobRequest) GetOutputBranch() string {
	if m != nil {
		return m.OutputBranch
	}
	return ""
}

func (m *CreateJobRequest) GetParentJob() *Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *CreateJobRequest) GetResourceSpec() *ResourceSpec {
	if m != nil {
		return m.ResourceSpec
	}
	return nil
}

func (m *CreateJobRequest) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *CreateJobRequest) GetNewBranch() *pfs.Branch {
	if m != nil {
		return m.NewBranch
	}
	return nil
}

func (m *CreateJobRequest) GetIncremental() bool {
	if m != nil {
		return m.Incremental
	}
	return false
}

type InspectJobRequest struct {
	Job        *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	BlockState bool `protobuf:"varint,2,opt,name=block_state,json=blockState,proto3" json:"block_state,omitempty"`
}

func (m *InspectJobRequest) Reset()                    { *m = InspectJobRequest{} }
func (m *InspectJobRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectJobRequest) ProtoMessage()               {}
func (*InspectJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{20} }

func (m *InspectJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *InspectJobRequest) GetBlockState() bool {
	if m != nil {
		return m.BlockState
	}
	return false
}

type ListJobRequest struct {
	Pipeline    *Pipeline     `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	InputCommit []*pfs.Commit `protobuf:"bytes,2,rep,name=input_commit,json=inputCommit" json:"input_commit,omitempty"`
}

func (m *ListJobRequest) Reset()                    { *m = ListJobRequest{} }
func (m *ListJobRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobRequest) ProtoMessage()               {}
func (*ListJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{21} }

func (m *ListJobRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *ListJobRequest) GetInputCommit() []*pfs.Commit {
	if m != nil {
		return m.InputCommit
	}
	return nil
}

type DeleteJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *DeleteJobRequest) Reset()                    { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()               {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{22} }

func (m *DeleteJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type StopJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *StopJobRequest) Reset()                    { *m = StopJobRequest{} }
func (m *StopJobRequest) String() string            { return proto.CompactTextString(m) }
func (*StopJobRequest) ProtoMessage()               {}
func (*StopJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{23} }

func (m *StopJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type GetLogsRequest struct {
	// The pipeline from which we want to get logs (required if the job in 'job'
	// was created as part of a pipeline. To get logs from a non-orphan job
	// without the pipeline that created it, you need to use ElasticSearch).
	Pipeline *Pipeline `protobuf:"bytes,2,opt,name=pipeline" json:"pipeline,omitempty"`
	// The job from which we want to get logs.
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	// Names of input files from which we want processing logs. This may contain
	// multiple files, to query pipelines that contain multiple inputs. Each
	// filter may be an absolute path of a file within a pps repo, or it may be
	// a hash for that file (to search for files at specific versions)
	DataFilters []string `protobuf:"bytes,3,rep,name=data_filters,json=dataFilters" json:"data_filters,omitempty"`
}

func (m *GetLogsRequest) Reset()                    { *m = GetLogsRequest{} }
func (m *GetLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLogsRequest) ProtoMessage()               {}
func (*GetLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{24} }

func (m *GetLogsRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *GetLogsRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *GetLogsRequest) GetDataFilters() []string {
	if m != nil {
		return m.DataFilters
	}
	return nil
}

// LogMessage is a log line from a PPS worker, annotated with metadata
// indicating when and why the line was logged.
type LogMessage struct {
	// The job and pipeline for which a PFS file is being processed (if the job
	// is an orphan job, pipeline name and ID will be unset)
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	PipelineID   string `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	JobID        string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerID     string `protobuf:"bytes,7,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// The PFS files being processed (one per pipeline/job input)
	Data []*Datum `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	// User is true if log message comes from the users code.
	User bool `protobuf:"varint,8,opt,name=user,proto3" json:"user,omitempty"`
	// The message logged, and the time at which it was logged
	Ts      *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=ts" json:"ts,omitempty"`
	Message string                      `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *LogMessage) Reset()                    { *m = LogMessage{} }
func (m *LogMessage) String() string            { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()               {}
func (*LogMessage) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{25} }

func (m *LogMessage) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *LogMessage) GetPipelineID() string {
	if m != nil {
		return m.PipelineID
	}
	return ""
}

func (m *LogMessage) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *LogMessage) GetWorkerID() string {
	if m != nil {
		return m.WorkerID
	}
	return ""
}

func (m *LogMessage) GetData() []*Datum {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogMessage) GetUser() bool {
	if m != nil {
		return m.User
	}
	return false
}

func (m *LogMessage) GetTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RestartDatumRequest struct {
	Job         *Job     `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	DataFilters []string `protobuf:"bytes,2,rep,name=data_filters,json=dataFilters" json:"data_filters,omitempty"`
}

func (m *RestartDatumRequest) Reset()                    { *m = RestartDatumRequest{} }
func (m *RestartDatumRequest) String() string            { return proto.CompactTextString(m) }
func (*RestartDatumRequest) ProtoMessage()               {}
func (*RestartDatumRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{26} }

func (m *RestartDatumRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *RestartDatumRequest) GetDataFilters() []string {
	if m != nil {
		return m.DataFilters
	}
	return nil
}

type CreatePipelineRequest struct {
	Pipeline           *Pipeline                  `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Transform          *Transform                 `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	ParallelismSpec    *ParallelismSpec           `protobuf:"bytes,7,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs             []*PipelineInput           `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Egress             *Egress                    `protobuf:"bytes,9,opt,name=egress" json:"egress,omitempty"`
	Update             bool                       `protobuf:"varint,5,opt,name=update,proto3" json:"update,omitempty"`
	OutputBranch       string                     `protobuf:"bytes,10,opt,name=outputBranch,proto3" json:"outputBranch,omitempty"`
	ScaleDownThreshold *google_protobuf2.Duration `protobuf:"bytes,11,opt,name=scaleDownThreshold" json:"scaleDownThreshold,omitempty"`
	ResourceSpec       *ResourceSpec              `protobuf:"bytes,12,opt,name=resource_spec,json=resourceSpec" json:"resource_spec,omitempty"`
	Input              *Input                     `protobuf:"bytes,13,opt,name=input" json:"input,omitempty"`
	Description        string                     `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Incremental        bool                       `protobuf:"varint,15,opt,name=incremental,proto3" json:"incremental,omitempty"`
}

func (m *CreatePipelineRequest) Reset()                    { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()               {}
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{27} }

func (m *CreatePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *CreatePipelineRequest) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *CreatePipelineRequest) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *CreatePipelineRequest) GetInputs() []*PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreatePipelineRequest) GetEgress() *Egress {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *CreatePipelineRequest) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

func (m *CreatePipelineRequest) GetOutputBranch() string {
	if m != nil {
		return m.OutputBranch
	}
	return ""
}

func (m *CreatePipelineRequest) GetScaleDownThreshold() *google_protobuf2.Duration {
	if m != nil {
		return m.ScaleDownThreshold
	}
	return nil
}

func (m *CreatePipelineRequest) GetResourceSpec() *ResourceSpec {
	if m != nil {
		return m.ResourceSpec
	}
	return nil
}

func (m *CreatePipelineRequest) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *CreatePipelineRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreatePipelineRequest) GetIncremental() bool {
	if m != nil {
		return m.Incremental
	}
	return false
}

type InspectPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *InspectPipelineRequest) Reset()                    { *m = InspectPipelineRequest{} }
func (m *InspectPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectPipelineRequest) ProtoMessage()               {}
func (*InspectPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{28} }

func (m *InspectPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type ListPipelineRequest struct {
}

func (m *ListPipelineRequest) Reset()                    { *m = ListPipelineRequest{} }
func (m *ListPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPipelineRequest) ProtoMessage()               {}
func (*ListPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{29} }

type DeletePipelineRequest struct {
	Pipeline   *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	DeleteJobs bool      `protobuf:"varint,2,opt,name=delete_jobs,json=deleteJobs,proto3" json:"delete_jobs,omitempty"`
	DeleteRepo bool      `protobuf:"varint,3,opt,name=delete_repo,json=deleteRepo,proto3" json:"delete_repo,omitempty"`
	All        bool      `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *DeletePipelineRequest) Reset()                    { *m = DeletePipelineRequest{} }
func (m *DeletePipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePipelineRequest) ProtoMessage()               {}
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{30} }

func (m *DeletePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *DeletePipelineRequest) GetDeleteJobs() bool {
	if m != nil {
		return m.DeleteJobs
	}
	return false
}

func (m *DeletePipelineRequest) GetDeleteRepo() bool {
	if m != nil {
		return m.DeleteRepo
	}
	return false
}

func (m *DeletePipelineRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type StartPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *StartPipelineRequest) Reset()                    { *m = StartPipelineRequest{} }
func (m *StartPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*StartPipelineRequest) ProtoMessage()               {}
func (*StartPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{31} }

func (m *StartPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type StopPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *StopPipelineRequest) Reset()                    { *m = StopPipelineRequest{} }
func (m *StopPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*StopPipelineRequest) ProtoMessage()               {}
func (*StopPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{32} }

func (m *StopPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type RerunPipelineRequest struct {
	Pipeline *Pipeline     `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Exclude  []*pfs.Commit `protobuf:"bytes,2,rep,name=exclude" json:"exclude,omitempty"`
	Include  []*pfs.Commit `protobuf:"bytes,3,rep,name=include" json:"include,omitempty"`
}

func (m *RerunPipelineRequest) Reset()                    { *m = RerunPipelineRequest{} }
func (m *RerunPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*RerunPipelineRequest) ProtoMessage()               {}
func (*RerunPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{33} }

func (m *RerunPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *RerunPipelineRequest) GetExclude() []*pfs.Commit {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *RerunPipelineRequest) GetInclude() []*pfs.Commit {
	if m != nil {
		return m.Include
	}
	return nil
}

type GarbageCollectRequest struct {
}

func (m *GarbageCollectRequest) Reset()                    { *m = GarbageCollectRequest{} }
func (m *GarbageCollectRequest) String() string            { return proto.CompactTextString(m) }
func (*GarbageCollectRequest) ProtoMessage()               {}
func (*GarbageCollectRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{34} }

type GarbageCollectResponse struct {
}

func (m *GarbageCollectResponse) Reset()                    { *m = GarbageCollectResponse{} }
func (m *GarbageCollectResponse) String() string            { return proto.CompactTextString(m) }
func (*GarbageCollectResponse) ProtoMessage()               {}
func (*GarbageCollectResponse) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{35} }

func init() {
	proto.RegisterType((*Secret)(nil), "pps.Secret")
	proto.RegisterType((*Transform)(nil), "pps.Transform")
	proto.RegisterType((*Egress)(nil), "pps.Egress")
	proto.RegisterType((*Job)(nil), "pps.Job")
	proto.RegisterType((*Service)(nil), "pps.Service")
	proto.RegisterType((*AtomInput)(nil), "pps.AtomInput")
	proto.RegisterType((*Input)(nil), "pps.Input")
	proto.RegisterType((*JobInput)(nil), "pps.JobInput")
	proto.RegisterType((*ParallelismSpec)(nil), "pps.ParallelismSpec")
	proto.RegisterType((*Datum)(nil), "pps.Datum")
	proto.RegisterType((*WorkerStatus)(nil), "pps.WorkerStatus")
	proto.RegisterType((*ResourceSpec)(nil), "pps.ResourceSpec")
	proto.RegisterType((*JobInfo)(nil), "pps.JobInfo")
	proto.RegisterType((*Worker)(nil), "pps.Worker")
	proto.RegisterType((*JobInfos)(nil), "pps.JobInfos")
	proto.RegisterType((*Pipeline)(nil), "pps.Pipeline")
	proto.RegisterType((*PipelineInput)(nil), "pps.PipelineInput")
	proto.RegisterType((*PipelineInfo)(nil), "pps.PipelineInfo")
	proto.RegisterType((*PipelineInfos)(nil), "pps.PipelineInfos")
	proto.RegisterType((*CreateJobRequest)(nil), "pps.CreateJobRequest")
	proto.RegisterType((*InspectJobRequest)(nil), "pps.InspectJobRequest")
	proto.RegisterType((*ListJobRequest)(nil), "pps.ListJobRequest")
	proto.RegisterType((*DeleteJobRequest)(nil), "pps.DeleteJobRequest")
	proto.RegisterType((*StopJobRequest)(nil), "pps.StopJobRequest")
	proto.RegisterType((*GetLogsRequest)(nil), "pps.GetLogsRequest")
	proto.RegisterType((*LogMessage)(nil), "pps.LogMessage")
	proto.RegisterType((*RestartDatumRequest)(nil), "pps.RestartDatumRequest")
	proto.RegisterType((*CreatePipelineRequest)(nil), "pps.CreatePipelineRequest")
	proto.RegisterType((*InspectPipelineRequest)(nil), "pps.InspectPipelineRequest")
	proto.RegisterType((*ListPipelineRequest)(nil), "pps.ListPipelineRequest")
	proto.RegisterType((*DeletePipelineRequest)(nil), "pps.DeletePipelineRequest")
	proto.RegisterType((*StartPipelineRequest)(nil), "pps.StartPipelineRequest")
	proto.RegisterType((*StopPipelineRequest)(nil), "pps.StopPipelineRequest")
	proto.RegisterType((*RerunPipelineRequest)(nil), "pps.RerunPipelineRequest")
	proto.RegisterType((*GarbageCollectRequest)(nil), "pps.GarbageCollectRequest")
	proto.RegisterType((*GarbageCollectResponse)(nil), "pps.GarbageCollectResponse")
	proto.RegisterEnum("pps.JobState", JobState_name, JobState_value)
	proto.RegisterEnum("pps.WorkerState", WorkerState_name, WorkerState_value)
	proto.RegisterEnum("pps.PipelineState", PipelineState_name, PipelineState_value)
	proto.RegisterEnum("pps.ParallelismSpec_Strategy", ParallelismSpec_Strategy_name, ParallelismSpec_Strategy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	InspectJob(ctx context.Context, in *InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RestartDatum(ctx context.Context, in *RestartDatumRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	InspectPipeline(ctx context.Context, in *InspectPipelineRequest, opts ...grpc.CallOption) (*PipelineInfo, error)
	ListPipeline(ctx context.Context, in *ListPipelineRequest, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	StartPipeline(ctx context.Context, in *StartPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	StopPipeline(ctx context.Context, in *StopPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RerunPipeline(ctx context.Context, in *RerunPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (API_GetLogsClient, error)
	// Garbage collection
	GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pps.API/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectJob(ctx context.Context, in *InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pps.API/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pps.API/ListJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/DeleteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/StopJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RestartDatum(ctx context.Context, in *RestartDatumRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/RestartDatum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectPipeline(ctx context.Context, in *InspectPipelineRequest, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pps.API/InspectPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipeline(ctx context.Context, in *ListPipelineRequest, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pps.API/ListPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/DeletePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartPipeline(ctx context.Context, in *StartPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/StartPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StopPipeline(ctx context.Context, in *StopPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/StopPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RerunPipeline(ctx context.Context, in *RerunPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/RerunPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (API_GetLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pps.API/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetLogsClient interface {
	Recv() (*LogMessage, error)
	grpc.ClientStream
}

type aPIGetLogsClient struct {
	grpc.ClientStream
}

func (x *aPIGetLogsClient) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectResponse, error) {
	out := new(GarbageCollectResponse)
	err := grpc.Invoke(ctx, "/pps.API/GarbageCollect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	InspectJob(context.Context, *InspectJobRequest) (*JobInfo, error)
	ListJob(context.Context, *ListJobRequest) (*JobInfos, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*google_protobuf.Empty, error)
	StopJob(context.Context, *StopJobRequest) (*google_protobuf.Empty, error)
	RestartDatum(context.Context, *RestartDatumRequest) (*google_protobuf.Empty, error)
	CreatePipeline(context.Context, *CreatePipelineRequest) (*google_protobuf.Empty, error)
	InspectPipeline(context.Context, *InspectPipelineRequest) (*PipelineInfo, error)
	ListPipeline(context.Context, *ListPipelineRequest) (*PipelineInfos, error)
	DeletePipeline(context.Context, *DeletePipelineRequest) (*google_protobuf.Empty, error)
	StartPipeline(context.Context, *StartPipelineRequest) (*google_protobuf.Empty, error)
	StopPipeline(context.Context, *StopPipelineRequest) (*google_protobuf.Empty, error)
	RerunPipeline(context.Context, *RerunPipelineRequest) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	GetLogs(*GetLogsRequest, API_GetLogsServer) error
	// Garbage collection
	GarbageCollect(context.Context, *GarbageCollectRequest) (*GarbageCollectResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/InspectJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectJob(ctx, req.(*InspectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListJob(ctx, req.(*ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RestartDatum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartDatumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RestartDatum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/RestartDatum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RestartDatum(ctx, req.(*RestartDatumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/InspectPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectPipeline(ctx, req.(*InspectPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/ListPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPipeline(ctx, req.(*ListPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/StartPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartPipeline(ctx, req.(*StartPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StopPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StopPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/StopPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StopPipeline(ctx, req.(*StopPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RerunPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerunPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RerunPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/RerunPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RerunPipeline(ctx, req.(*RerunPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetLogs(m, &aPIGetLogsServer{stream})
}

type API_GetLogsServer interface {
	Send(*LogMessage) error
	grpc.ServerStream
}

type aPIGetLogsServer struct {
	grpc.ServerStream
}

func (x *aPIGetLogsServer) Send(m *LogMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GarbageCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GarbageCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GarbageCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/GarbageCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GarbageCollect(ctx, req.(*GarbageCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pps.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _API_CreateJob_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _API_InspectJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _API_ListJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _API_DeleteJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _API_StopJob_Handler,
		},
		{
			MethodName: "RestartDatum",
			Handler:    _API_RestartDatum_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _API_CreatePipeline_Handler,
		},
		{
			MethodName: "InspectPipeline",
			Handler:    _API_InspectPipeline_Handler,
		},
		{
			MethodName: "ListPipeline",
			Handler:    _API_ListPipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _API_DeletePipeline_Handler,
		},
		{
			MethodName: "StartPipeline",
			Handler:    _API_StartPipeline_Handler,
		},
		{
			MethodName: "StopPipeline",
			Handler:    _API_StopPipeline_Handler,
		},
		{
			MethodName: "RerunPipeline",
			Handler:    _API_RerunPipeline_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
		{
			MethodName: "GarbageCollect",
			Handler:    _API_GarbageCollect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _API_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client/pps/pps.proto",
}

func init() { proto.RegisterFile("client/pps/pps.proto", fileDescriptorPps) }

var fileDescriptorPps = []byte{
	// 2523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x72, 0x1b, 0xc7,
	0xf1, 0x27, 0xbe, 0x81, 0xc6, 0x07, 0xc1, 0xe1, 0x87, 0xd6, 0xd0, 0xdf, 0x26, 0xbd, 0x2e, 0xf9,
	0x2f, 0xa9, 0x5c, 0xa4, 0x8b, 0x76, 0xa9, 0xec, 0xc4, 0x89, 0x43, 0x01, 0x90, 0x0a, 0x0c, 0x43,
	0xa1, 0x06, 0x54, 0x52, 0x95, 0x0b, 0xb2, 0x58, 0x0c, 0x40, 0x48, 0x8b, 0x9d, 0xcd, 0xee, 0x40,
	0xb2, 0x7c, 0xcb, 0x13, 0xa4, 0x2a, 0x87, 0xbc, 0x40, 0x4e, 0xa9, 0x4a, 0x0e, 0x39, 0xe4, 0x11,
	0xfc, 0x1a, 0x3a, 0xe8, 0x0d, 0xf2, 0x02, 0xa9, 0xd4, 0xf4, 0xcc, 0x2e, 0x76, 0x01, 0x10, 0x24,
	0xad, 0xe4, 0xc0, 0xaa, 0x99, 0xee, 0xde, 0x46, 0x77, 0x4f, 0xf7, 0xaf, 0xbb, 0x09, 0x3b, 0xb6,
	0x33, 0x61, 0xae, 0x38, 0xf2, 0xbc, 0x40, 0xfe, 0x1d, 0x7a, 0x3e, 0x17, 0x9c, 0x64, 0x3c, 0x2f,
	0x68, 0xdc, 0x1d, 0x73, 0x3e, 0x76, 0xd8, 0x11, 0x92, 0x06, 0xb3, 0xd1, 0x11, 0x9b, 0x7a, 0xe2,
	0x8d, 0x92, 0x68, 0xec, 0x2f, 0x32, 0xc5, 0x64, 0xca, 0x02, 0x61, 0x4d, 0x3d, 0x2d, 0xf0, 0xd1,
	0xa2, 0xc0, 0x70, 0xe6, 0x5b, 0x62, 0xc2, 0x5d, 0xcd, 0xdf, 0x19, 0xf3, 0x31, 0xc7, 0xe3, 0x91,
	0x3c, 0x85, 0xd4, 0xd0, 0x9c, 0x51, 0x20, 0xff, 0x14, 0xd5, 0xfc, 0x29, 0xe4, 0x7b, 0xcc, 0xf6,
	0x99, 0x20, 0x04, 0xb2, 0xae, 0x35, 0x65, 0x46, 0xea, 0x20, 0x75, 0xbf, 0x44, 0xf1, 0x4c, 0x3e,
	0x04, 0x98, 0xf2, 0x99, 0x2b, 0xfa, 0x9e, 0x25, 0x2e, 0x8d, 0x34, 0x72, 0x4a, 0x48, 0xe9, 0x5a,
	0xe2, 0xd2, 0xfc, 0x21, 0x0d, 0xa5, 0x0b, 0xdf, 0x72, 0x83, 0x11, 0xf7, 0xa7, 0x64, 0x07, 0x72,
	0x93, 0xa9, 0x35, 0x0e, 0x35, 0xa8, 0x0b, 0xa9, 0x43, 0xc6, 0x9e, 0x0e, 0x8d, 0xf4, 0x41, 0xe6,
	0x7e, 0x89, 0xca, 0x23, 0x79, 0x00, 0x19, 0xe6, 0xbe, 0x32, 0x32, 0x07, 0x99, 0xfb, 0xe5, 0xe3,
	0x3b, 0x87, 0x32, 0x34, 0x91, 0x92, 0xc3, 0xb6, 0xfb, 0xaa, 0xed, 0x0a, 0xff, 0x0d, 0x95, 0x32,
	0xe4, 0x1e, 0x14, 0x02, 0xb4, 0x2e, 0x30, 0xb2, 0x28, 0x5e, 0x46, 0x71, 0x65, 0x31, 0x0d, 0x79,
	0xe4, 0x33, 0x20, 0xf8, 0x63, 0x7d, 0x6f, 0xe6, 0x38, 0xfd, 0xf0, 0x8b, 0x12, 0xfe, 0x64, 0x1d,
	0x39, 0xdd, 0x99, 0xe3, 0xf4, 0xb4, 0xf4, 0x0e, 0xe4, 0x02, 0x31, 0x9c, 0xb8, 0x46, 0x0e, 0x05,
	0xd4, 0x45, 0xea, 0xb0, 0x6c, 0x9b, 0x79, 0xa2, 0xef, 0x33, 0x31, 0xf3, 0xdd, 0xbe, 0xcd, 0x87,
	0xcc, 0xc8, 0x1f, 0x64, 0xee, 0x67, 0x68, 0x5d, 0x71, 0x28, 0x32, 0x9a, 0x7c, 0xc8, 0xa4, 0x8e,
	0x21, 0x1b, 0xcc, 0xc6, 0x46, 0xe1, 0x20, 0x75, 0xbf, 0x48, 0xd5, 0xa5, 0xf1, 0x08, 0x8a, 0xa1,
	0xfd, 0xd2, 0xef, 0x97, 0xec, 0x8d, 0x8e, 0x85, 0x3c, 0xca, 0x6f, 0x5e, 0x59, 0xce, 0x8c, 0xe9,
	0x38, 0xaa, 0xcb, 0x4f, 0xd2, 0x5f, 0xa5, 0xcc, 0x06, 0xe4, 0xdb, 0x63, 0x9f, 0x05, 0x81, 0xfc,
	0xea, 0x39, 0x3d, 0x0b, 0xbf, 0x9a, 0xd1, 0x33, 0xf3, 0x43, 0xc8, 0x9c, 0xf2, 0x01, 0xd9, 0x83,
	0xf4, 0x64, 0xa8, 0xe8, 0x8f, 0xf3, 0xef, 0xde, 0xee, 0xa7, 0x3b, 0x2d, 0x9a, 0x9e, 0x0c, 0xcd,
	0x1e, 0x14, 0x7a, 0xcc, 0x7f, 0x35, 0xb1, 0x19, 0xf9, 0x04, 0xaa, 0x13, 0x57, 0x30, 0xdf, 0xb5,
	0x9c, 0xbe, 0xc7, 0x7d, 0x81, 0xd2, 0x39, 0x5a, 0x09, 0x89, 0x5d, 0xee, 0x0b, 0x29, 0xc4, 0xbe,
	0x8b, 0x0b, 0xa5, 0x95, 0x50, 0x48, 0x94, 0x42, 0xe6, 0xdf, 0x52, 0x50, 0x3a, 0x11, 0x7c, 0xda,
	0x71, 0xbd, 0xd9, 0xea, 0xc4, 0x20, 0x90, 0xf5, 0x99, 0xc7, 0xb5, 0x2b, 0x78, 0x26, 0x7b, 0x90,
	0x1f, 0xf8, 0x96, 0x6b, 0x5f, 0x1a, 0x19, 0xa4, 0xea, 0x9b, 0xa4, 0xdb, 0x7c, 0x3a, 0x9d, 0x08,
	0x23, 0xab, 0xe8, 0xea, 0x26, 0x75, 0x8c, 0x1d, 0x3e, 0x30, 0x72, 0x4a, 0x87, 0x3c, 0x4b, 0x9a,
	0x63, 0x7d, 0xff, 0xc6, 0xc8, 0x63, 0x58, 0xf1, 0x4c, 0xf6, 0xa1, 0x3c, 0xf2, 0xf9, 0xb4, 0xaf,
	0x95, 0x14, 0x50, 0x1c, 0x24, 0xa9, 0x89, 0x14, 0x93, 0x43, 0x4e, 0x59, 0x6a, 0x42, 0xd6, 0x12,
	0x7c, 0x8a, 0x96, 0x96, 0x8f, 0x6b, 0x98, 0x2b, 0x91, 0x1f, 0x14, 0x79, 0xe4, 0x00, 0x72, 0xb6,
	0xcf, 0x83, 0x00, 0x33, 0xb2, 0x7c, 0x0c, 0x28, 0xa4, 0x04, 0x14, 0x43, 0x4a, 0xcc, 0xdc, 0x09,
	0x77, 0x75, 0x86, 0x26, 0x24, 0x90, 0x61, 0xbe, 0x84, 0xe2, 0x29, 0x1f, 0x24, 0xa3, 0x93, 0x8d,
	0x45, 0xe7, 0x93, 0xc8, 0x63, 0x65, 0x49, 0xf9, 0x50, 0x16, 0x9c, 0xb2, 0x76, 0xc9, 0xfd, 0xf4,
	0x0a, 0xf7, 0x33, 0x73, 0xf7, 0xcd, 0x7f, 0xa6, 0x60, 0xb3, 0x6b, 0xf9, 0x96, 0xe3, 0x30, 0x67,
	0x12, 0x4c, 0x7b, 0x1e, 0xb3, 0xc9, 0xd7, 0x50, 0x0c, 0x84, 0x6f, 0x09, 0x36, 0x56, 0x19, 0x56,
	0x3b, 0xfe, 0x10, 0xad, 0x5c, 0x90, 0x3b, 0xec, 0x69, 0x21, 0x1a, 0x89, 0x93, 0x06, 0x14, 0x6d,
	0xee, 0x06, 0xc2, 0x72, 0xd5, 0xdb, 0x67, 0x69, 0x74, 0x27, 0x07, 0x50, 0xb6, 0x39, 0x1b, 0x8d,
	0x26, 0xb6, 0x44, 0x0a, 0xb4, 0x22, 0x45, 0xe3, 0x24, 0xf3, 0x01, 0x14, 0x43, 0x9d, 0xa4, 0x02,
	0xc5, 0xe6, 0xb3, 0xf3, 0xde, 0xc5, 0xc9, 0xf9, 0x45, 0x7d, 0x83, 0x6c, 0x42, 0xb9, 0xf9, 0xac,
	0xfd, 0xe4, 0x49, 0xa7, 0xd9, 0x69, 0x9f, 0x5f, 0xd4, 0x53, 0xe6, 0x11, 0xe4, 0x5a, 0x96, 0x98,
	0x4d, 0xa5, 0x53, 0x08, 0x1f, 0x3a, 0x42, 0xf2, 0x2c, 0x69, 0x97, 0x56, 0x70, 0x89, 0x6f, 0x5f,
	0xa1, 0x78, 0x36, 0xff, 0x91, 0x82, 0xca, 0x6f, 0xb8, 0xff, 0x92, 0xf9, 0x3d, 0x61, 0x89, 0x59,
	0x40, 0x1e, 0x40, 0xe9, 0x35, 0xde, 0xfb, 0x51, 0xea, 0x57, 0xde, 0xbd, 0xdd, 0x2f, 0x2a, 0xa1,
	0x4e, 0x8b, 0x16, 0x15, 0xbb, 0x33, 0x24, 0x07, 0x90, 0x7f, 0xc1, 0x07, 0x52, 0x0e, 0xc3, 0xf9,
	0xb8, 0xf4, 0xee, 0xed, 0x7e, 0x4e, 0xbe, 0x51, 0x8b, 0xe6, 0x5e, 0xf0, 0x41, 0x67, 0x48, 0x3e,
	0x82, 0xec, 0xd0, 0x12, 0x56, 0xe2, 0x51, 0xd1, 0x3e, 0x8a, 0x74, 0xf2, 0x25, 0x14, 0x02, 0x61,
	0xf9, 0x82, 0x0d, 0xd1, 0xd0, 0xf2, 0x71, 0xe3, 0x50, 0xc1, 0xec, 0x61, 0x08, 0xb3, 0x87, 0x17,
	0x21, 0x0e, 0xd3, 0x50, 0xd4, 0x3c, 0x85, 0x0a, 0x65, 0x01, 0x9f, 0xf9, 0x36, 0xc3, 0x87, 0x91,
	0x68, 0xe7, 0xcd, 0xd0, 0xd8, 0x34, 0x95, 0x47, 0x99, 0xfd, 0x53, 0x36, 0xe5, 0xfe, 0x1b, 0xfd,
	0xd0, 0xfa, 0x26, 0x25, 0xc7, 0xde, 0x0c, 0x63, 0x9c, 0xa1, 0xf2, 0x68, 0xfe, 0xa9, 0x08, 0x05,
	0x4c, 0xab, 0x11, 0x27, 0x0d, 0xc8, 0xbc, 0xe0, 0x03, 0x9d, 0x3e, 0x45, 0x34, 0xf6, 0x94, 0x0f,
	0xa8, 0x24, 0x92, 0xcf, 0xa0, 0x24, 0x42, 0xbc, 0x44, 0xa5, 0x61, 0xaa, 0x47, 0x28, 0x4a, 0xe7,
	0x02, 0xe4, 0x08, 0xca, 0xde, 0xc4, 0x63, 0xce, 0xc4, 0x65, 0x32, 0x3c, 0xdb, 0x18, 0x9e, 0xda,
	0xbb, 0xb7, 0xfb, 0xd0, 0xd5, 0xe4, 0x4e, 0x8b, 0x42, 0x28, 0xd2, 0x91, 0xf0, 0x5c, 0x0c, 0x6f,
	0x68, 0x5d, 0xf9, 0xb8, 0xaa, 0x72, 0x4b, 0x13, 0x69, 0xc4, 0x26, 0x0f, 0xa0, 0x1e, 0xe9, 0x7e,
	0xc5, 0xfc, 0x40, 0x16, 0x4d, 0x15, 0x73, 0x6a, 0x33, 0xa4, 0xff, 0x5a, 0x91, 0xc9, 0xb7, 0x50,
	0xf7, 0xe6, 0xc9, 0xd9, 0x0f, 0x3c, 0x66, 0x1b, 0x15, 0xd4, 0xbe, 0xb3, 0x2a, 0x73, 0xe9, 0xa6,
	0xb7, 0x90, 0xf2, 0xf7, 0x20, 0x3f, 0x91, 0x05, 0x17, 0x20, 0x6c, 0x87, 0x46, 0x85, 0x65, 0x48,
	0x35, 0x53, 0x96, 0x1e, 0x43, 0x28, 0x35, 0x36, 0xc3, 0xd2, 0xf3, 0x82, 0x43, 0x85, 0xae, 0x54,
	0xb3, 0xc8, 0xff, 0x03, 0x78, 0x96, 0xcf, 0x5c, 0xd1, 0x97, 0x41, 0xce, 0x2f, 0x04, 0xb9, 0xa4,
	0x78, 0x12, 0x75, 0x63, 0x49, 0x51, 0xb8, 0x71, 0x52, 0x90, 0x47, 0x50, 0x1c, 0x4d, 0xdc, 0x49,
	0x70, 0xc9, 0x86, 0x46, 0xf1, 0xda, 0xcf, 0x22, 0x59, 0xf2, 0x39, 0x54, 0xf9, 0x4c, 0x78, 0x33,
	0x11, 0x42, 0x5d, 0x69, 0x19, 0x3d, 0x2a, 0x4a, 0x42, 0xdd, 0xc8, 0x27, 0xb2, 0x95, 0x59, 0x82,
	0x19, 0x80, 0x20, 0x10, 0xc5, 0x44, 0x16, 0x10, 0xa3, 0x8a, 0x47, 0x3e, 0x95, 0x4d, 0x14, 0x5b,
	0x84, 0x51, 0x43, 0x85, 0x15, 0xdd, 0x44, 0x91, 0x46, 0x43, 0x26, 0x79, 0x00, 0xa0, 0x94, 0x53,
	0x89, 0xec, 0x04, 0x45, 0x4b, 0xf8, 0xdb, 0x92, 0x40, 0x63, 0x4c, 0x62, 0x82, 0xb6, 0xe3, 0xb1,
	0x02, 0xfc, 0x2d, 0x4c, 0xed, 0x04, 0x8d, 0x18, 0x50, 0xf0, 0x19, 0x86, 0xc4, 0xd8, 0xc1, 0x9c,
	0x08, 0xaf, 0xe4, 0x1e, 0xd4, 0x64, 0xc9, 0xf5, 0x3d, 0x9f, 0xdb, 0x2c, 0x08, 0xd8, 0xd0, 0xd8,
	0xc3, 0x2a, 0xa8, 0x4a, 0x6a, 0x37, 0x24, 0xca, 0xe1, 0x03, 0xc5, 0x04, 0x17, 0x96, 0x63, 0xdc,
	0x41, 0x91, 0x92, 0xa4, 0x5c, 0x48, 0x02, 0x79, 0x04, 0x55, 0x8d, 0x0e, 0x01, 0xc2, 0x85, 0x61,
	0x60, 0x5e, 0x6c, 0xa1, 0x73, 0x71, 0x1c, 0xa1, 0x95, 0xd7, 0x71, 0x54, 0x79, 0x04, 0x55, 0x5f,
	0x97, 0xac, 0x4a, 0xc3, 0x0f, 0xd0, 0x53, 0xf5, 0x5d, 0xbc, 0x98, 0x69, 0xc5, 0x8f, 0x97, 0xf6,
	0x01, 0xe4, 0x30, 0xc7, 0x8c, 0x06, 0xca, 0x27, 0xda, 0x02, 0x32, 0xc8, 0x43, 0x00, 0x97, 0xbd,
	0xee, 0xeb, 0x26, 0x78, 0x37, 0xf6, 0x78, 0x2a, 0x24, 0xb4, 0xe4, 0xb2, 0xd7, 0x3a, 0x3a, 0x07,
	0x50, 0x9e, 0xb8, 0xb6, 0xcf, 0xa6, 0xcc, 0x95, 0xde, 0xfd, 0x1f, 0x02, 0x7e, 0x9c, 0x74, 0x9a,
	0x2d, 0x66, 0xeb, 0x39, 0xb3, 0x05, 0x79, 0xe5, 0xcb, 0xca, 0x36, 0xfc, 0x69, 0xf8, 0xfe, 0x69,
	0x7c, 0xff, 0xfa, 0x82, 0xef, 0x61, 0x0a, 0x98, 0x5f, 0xe8, 0x86, 0x35, 0xe2, 0x32, 0xf9, 0x8b,
	0x08, 0x95, 0xee, 0x88, 0x1b, 0x29, 0x0c, 0x59, 0x65, 0x5e, 0x4a, 0x23, 0x4e, 0x0b, 0x2f, 0xd4,
	0xc1, 0xfc, 0x08, 0x8a, 0x61, 0xcd, 0xaf, 0xfa, 0x71, 0xf3, 0x2f, 0x29, 0xa8, 0x46, 0x18, 0x92,
	0xe8, 0x85, 0xb9, 0xc4, 0x08, 0xa9, 0x26, 0x85, 0xd4, 0x62, 0x3e, 0x2d, 0x0e, 0x0d, 0xe9, 0xc4,
	0xd0, 0x10, 0x76, 0xc7, 0xcc, 0x8a, 0xee, 0x98, 0x4d, 0x0c, 0x07, 0x59, 0x39, 0x09, 0xe8, 0x22,
	0x4e, 0x94, 0x0a, 0x32, 0xcc, 0x1f, 0xf2, 0x50, 0x99, 0x5b, 0x39, 0xe2, 0x7a, 0x92, 0xda, 0x5a,
	0x9c, 0xa4, 0x12, 0xb8, 0x97, 0x5a, 0x8f, 0x7b, 0x06, 0x14, 0x42, 0xb8, 0x2b, 0xab, 0xd4, 0xd6,
	0xd7, 0x5b, 0x62, 0xf3, 0x2a, 0x50, 0x84, 0xdb, 0x80, 0xe2, 0xc3, 0x08, 0x14, 0xd5, 0x78, 0x4c,
	0x12, 0x16, 0xff, 0x08, 0x64, 0xfc, 0x1a, 0xc0, 0xf6, 0x99, 0x25, 0xd8, 0xb0, 0x6f, 0x09, 0x1d,
	0xd4, 0x75, 0xe0, 0x55, 0xd2, 0xd2, 0x27, 0x82, 0xdc, 0x0f, 0x73, 0xb1, 0x80, 0xb9, 0x98, 0x34,
	0x25, 0x01, 0x48, 0x1f, 0x43, 0xc5, 0x67, 0xb6, 0x84, 0x5f, 0xe6, 0xfb, 0xdc, 0x47, 0x8c, 0x2c,
	0xd1, 0xb2, 0xa2, 0xb5, 0x25, 0x89, 0x7c, 0x0b, 0x20, 0x93, 0xd4, 0x96, 0xab, 0x86, 0x9a, 0xe4,
	0xcb, 0xc7, 0x07, 0x0b, 0xce, 0x8d, 0xb8, 0xcc, 0xd9, 0x26, 0x8a, 0xa8, 0x9d, 0xa1, 0xf4, 0x22,
	0xbc, 0x2f, 0x21, 0x54, 0x7d, 0x05, 0x42, 0x75, 0x80, 0x04, 0xb6, 0xe5, 0xb0, 0x16, 0x7f, 0xed,
	0x5e, 0x5c, 0xfa, 0x2c, 0xb8, 0xe4, 0xce, 0x50, 0x03, 0xdf, 0x07, 0x4b, 0x4e, 0xb7, 0xf4, 0x92,
	0x45, 0x57, 0x7c, 0xb4, 0x0c, 0x2a, 0xdb, 0xb7, 0x04, 0x95, 0x9d, 0xab, 0x40, 0xe5, 0x00, 0xca,
	0x43, 0x16, 0xd8, 0xfe, 0xc4, 0x93, 0x3f, 0x6e, 0xec, 0xaa, 0x58, 0xc5, 0x48, 0x8b, 0x50, 0xb2,
	0xb7, 0x04, 0x25, 0x8d, 0x6f, 0xa0, 0x96, 0x8c, 0x54, 0x7c, 0x3b, 0xc9, 0xad, 0xd8, 0x4e, 0x72,
	0xb1, 0xed, 0xe4, 0x34, 0x5b, 0xcc, 0xd4, 0xb3, 0xe6, 0xd3, 0x78, 0xb1, 0x4b, 0x1c, 0x79, 0x04,
	0xd5, 0xf9, 0x60, 0x31, 0x07, 0x93, 0xad, 0xa5, 0x57, 0xa2, 0x15, 0x2f, 0x76, 0x33, 0xff, 0x95,
	0x85, 0x7a, 0x13, 0xb3, 0x46, 0x36, 0x5b, 0xf6, 0xfb, 0x19, 0x0b, 0x44, 0xb2, 0x6e, 0x52, 0xd7,
	0xd5, 0x4d, 0xbc, 0x54, 0xd3, 0xb7, 0x1f, 0x51, 0xe0, 0xe6, 0x23, 0x4a, 0xe1, 0xc7, 0x8d, 0x28,
	0xd9, 0x9b, 0x8d, 0x28, 0xa5, 0xab, 0x0b, 0x31, 0xd6, 0xb4, 0x8b, 0x37, 0x6f, 0xda, 0x95, 0xdb,
	0x34, 0xed, 0xf2, 0x8a, 0x92, 0x48, 0x4e, 0x46, 0xd5, 0xab, 0x27, 0xa3, 0xa5, 0x84, 0xaf, 0xdd,
	0x32, 0xe1, 0x37, 0x6f, 0xd6, 0x45, 0xeb, 0xb7, 0xe9, 0xa2, 0x5b, 0xab, 0xba, 0xa8, 0x4c, 0xde,
	0x2e, 0x6c, 0x75, 0x5c, 0x69, 0xa6, 0x88, 0xe5, 0xdc, 0xba, 0x19, 0x7b, 0x1f, 0xca, 0x03, 0x87,
	0xdb, 0x2f, 0xfb, 0xf3, 0xf6, 0x5a, 0xa4, 0x80, 0x24, 0x84, 0x32, 0xf3, 0x25, 0xd4, 0xce, 0x26,
	0x41, 0x5c, 0xdd, 0x2d, 0xfa, 0xc7, 0x21, 0x54, 0xd0, 0xd7, 0x70, 0xce, 0x4b, 0x87, 0xff, 0xdb,
	0x98, 0x37, 0xaf, 0x32, 0x0a, 0xe8, 0x05, 0xf7, 0x10, 0xea, 0x2d, 0xe6, 0xb0, 0x44, 0xc5, 0xac,
	0xb1, 0xde, 0xfc, 0x0c, 0x6a, 0x3d, 0xc1, 0xbd, 0x1b, 0x4a, 0x7f, 0x0f, 0xb5, 0xa7, 0x4c, 0x9c,
	0xf1, 0x71, 0xb0, 0xca, 0x95, 0x6b, 0xea, 0x6b, 0x5d, 0x10, 0x3f, 0x86, 0x0a, 0x0e, 0x70, 0xa3,
	0x89, 0x23, 0x98, 0x1f, 0xe0, 0xea, 0x25, 0xb1, 0xcb, 0x12, 0xd6, 0x13, 0x45, 0x32, 0xff, 0x9a,
	0x06, 0x38, 0xe3, 0xe3, 0x5f, 0xb1, 0x20, 0xb0, 0xc6, 0xf8, 0x2f, 0x8c, 0xa8, 0x5a, 0x63, 0xf3,
	0x46, 0x04, 0x20, 0xe7, 0x72, 0xa2, 0x58, 0xd8, 0x68, 0xd2, 0xd7, 0x6e, 0x34, 0xf3, 0xe5, 0x30,
	0x73, 0xc5, 0x72, 0x98, 0xd8, 0x34, 0x0b, 0x6b, 0x37, 0xcd, 0x70, 0x8f, 0xcc, 0x5e, 0xb1, 0x47,
	0x12, 0xc8, 0xce, 0x02, 0xa6, 0x9a, 0x5a, 0x91, 0xe2, 0x99, 0x3c, 0x84, 0x34, 0xee, 0x2d, 0xd7,
	0x75, 0xd3, 0xb4, 0x08, 0xe4, 0x6c, 0x31, 0x55, 0xd1, 0xc0, 0xf6, 0x5b, 0xa2, 0xe1, 0xd5, 0xbc,
	0x80, 0x6d, 0xaa, 0x26, 0x68, 0xf5, 0x7b, 0x37, 0x48, 0xe3, 0xc5, 0x17, 0x48, 0x2f, 0xbf, 0xc0,
	0xdf, 0xb3, 0xb0, 0xab, 0xe0, 0x38, 0x7a, 0xdd, 0xdb, 0x27, 0xf4, 0xfb, 0x8f, 0x3d, 0x85, 0xff,
	0xfd, 0xd8, 0xb3, 0x06, 0x6d, 0xf7, 0x20, 0x3f, 0xf3, 0x86, 0xb2, 0xd2, 0x73, 0xf8, 0x6c, 0xfa,
	0xb6, 0x04, 0x99, 0x70, 0xe3, 0x29, 0xa2, 0xfc, 0x5f, 0x99, 0x22, 0x2a, 0xb7, 0x04, 0xd5, 0xea,
	0x0d, 0xa7, 0x88, 0xda, 0xb5, 0x53, 0xc4, 0xe6, 0x55, 0x50, 0xda, 0x84, 0x3d, 0x0d, 0xa5, 0x3f,
	0x3e, 0x5f, 0xcc, 0x5d, 0xd8, 0x96, 0xe8, 0xb9, 0xa0, 0xc1, 0xfc, 0x73, 0x0a, 0x76, 0x15, 0xd0,
	0xbd, 0x47, 0x2e, 0xee, 0x4b, 0x57, 0xa5, 0x0e, 0xd9, 0xc2, 0x82, 0x10, 0xba, 0x87, 0x21, 0x7e,
	0x06, 0x31, 0x01, 0x5c, 0x4c, 0x32, 0x71, 0x01, 0x6c, 0x94, 0x75, 0xc8, 0x58, 0x8e, 0xa3, 0xd7,
	0x0c, 0x79, 0x34, 0x4f, 0x60, 0xa7, 0x27, 0x0b, 0xef, 0x3d, 0x5c, 0xfe, 0x05, 0x6c, 0x4b, 0x4c,
	0x7e, 0x0f, 0x0d, 0x7f, 0x4c, 0xc1, 0x0e, 0x65, 0xfe, 0xcc, 0x7d, 0x8f, 0xe0, 0xdc, 0x83, 0x02,
	0xfb, 0xce, 0x76, 0x66, 0x43, 0xb6, 0xaa, 0xe9, 0x84, 0x3c, 0x29, 0x36, 0x71, 0x95, 0x58, 0x66,
	0x85, 0x98, 0xe6, 0x99, 0x77, 0x60, 0xf7, 0xa9, 0xe5, 0x0f, 0xac, 0x31, 0x6b, 0x72, 0xc7, 0x61,
	0xb6, 0x08, 0x1f, 0xd2, 0x80, 0xbd, 0x45, 0x46, 0xe0, 0x71, 0x37, 0x60, 0x0f, 0x7f, 0x87, 0x9b,
	0x28, 0xf6, 0x50, 0x52, 0x87, 0xca, 0xe9, 0xb3, 0xc7, 0xfd, 0xde, 0xc5, 0x09, 0xbd, 0xe8, 0x9c,
	0x3f, 0x55, 0xff, 0x44, 0x94, 0x14, 0xfa, 0xfc, 0xfc, 0x5c, 0x12, 0x52, 0x21, 0xe1, 0xc9, 0x49,
	0xe7, 0xec, 0x39, 0x6d, 0xd7, 0xd3, 0x21, 0xa1, 0xf7, 0xbc, 0xd9, 0x6c, 0xf7, 0x7a, 0xf5, 0x4c,
	0x44, 0xb8, 0x78, 0xd6, 0xed, 0xb6, 0x5b, 0xf5, 0xec, 0xc3, 0x6f, 0xa1, 0x1c, 0xdb, 0x80, 0x25,
	0xbf, 0xfb, 0xac, 0x15, 0xa9, 0xdc, 0x08, 0x09, 0xa1, 0x86, 0x14, 0xa9, 0x01, 0x48, 0x82, 0xfc,
	0x8d, 0x76, 0xab, 0x9e, 0x7e, 0xf8, 0x87, 0xd8, 0x5e, 0xab, 0x74, 0xec, 0xc2, 0x56, 0xb7, 0xd3,
	0x6d, 0x9f, 0x75, 0xce, 0xdb, 0x71, 0x6b, 0x77, 0xa0, 0x1e, 0x91, 0xe7, 0x26, 0xdf, 0x81, 0xed,
	0x39, 0xb5, 0x1d, 0x89, 0xa7, 0x13, 0xe2, 0xa1, 0x43, 0x99, 0x04, 0x35, 0x72, 0xe2, 0xf8, 0xdf,
	0x05, 0xc8, 0x9c, 0x74, 0x3b, 0xe4, 0x10, 0x4a, 0xd1, 0xac, 0x4c, 0x76, 0xf1, 0x55, 0x17, 0x67,
	0xe7, 0x46, 0x84, 0xf9, 0xe6, 0x06, 0xf9, 0x12, 0x60, 0x3e, 0xe8, 0x90, 0x3d, 0x0d, 0x04, 0x0b,
	0x93, 0x4f, 0x23, 0xb1, 0xf0, 0x9b, 0x1b, 0xe4, 0x08, 0x0a, 0x7a, 0x98, 0x21, 0xdb, 0xc8, 0x4a,
	0x8e, 0x36, 0x8d, 0x6a, 0x5c, 0x3e, 0x30, 0x37, 0xc8, 0x37, 0x50, 0x8a, 0x06, 0x12, 0x6d, 0xd6,
	0xe2, 0x80, 0xd2, 0xd8, 0x5b, 0xc2, 0xbe, 0xf6, 0xd4, 0x13, 0x6f, 0xcc, 0x0d, 0xf2, 0x15, 0x14,
	0xf4, 0x78, 0xa2, 0x7f, 0x2e, 0x39, 0xac, 0xac, 0xf9, 0xf2, 0x31, 0xfe, 0xbb, 0x35, 0x6a, 0x81,
	0xc4, 0x08, 0x91, 0x71, 0xb1, 0x2b, 0xae, 0xd1, 0xf1, 0x04, 0x6a, 0xc9, 0x7e, 0x47, 0x1a, 0xb1,
	0xb8, 0x2e, 0xd4, 0xd6, 0x1a, 0x3d, 0x4d, 0xd8, 0x5c, 0x00, 0x42, 0x72, 0x37, 0x1e, 0xef, 0x45,
	0x4d, 0xcb, 0x8b, 0x91, 0xb9, 0x41, 0x7e, 0x0e, 0x95, 0x38, 0x10, 0x6a, 0x87, 0x56, 0x60, 0x63,
	0x83, 0x2c, 0x7d, 0x1e, 0x28, 0x67, 0x92, 0x80, 0xa9, 0x9d, 0x59, 0x89, 0xa2, 0x6b, 0x9c, 0x69,
	0x41, 0x35, 0x01, 0x70, 0xe4, 0x03, 0xfd, 0x30, 0xcb, 0xa0, 0xb7, 0xfe, 0x79, 0xe2, 0x18, 0xa7,
	0xbd, 0x59, 0x01, 0x7b, 0xeb, 0x2d, 0x49, 0x80, 0x9c, 0xb6, 0x64, 0x15, 0xf0, 0xad, 0xd1, 0xf2,
	0xb3, 0x30, 0x41, 0x4f, 0x1c, 0x87, 0x5c, 0x21, 0xb6, 0xe6, 0xf3, 0x2f, 0xa0, 0xa0, 0x47, 0x62,
	0x9d, 0xa1, 0xc9, 0x01, 0xb9, 0xb1, 0xa9, 0x9e, 0x29, 0x1a, 0x5c, 0xcd, 0x8d, 0xcf, 0x53, 0xe4,
	0x97, 0x50, 0x4b, 0x82, 0x9e, 0x7e, 0x8b, 0x95, 0x10, 0xd9, 0xb8, 0xbb, 0x92, 0xa7, 0x50, 0xd2,
	0xdc, 0x78, 0x9c, 0xfb, 0x6d, 0xc6, 0xf3, 0x82, 0x41, 0x1e, 0x4d, 0xfb, 0xe2, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0x23, 0x0e, 0x7c, 0x4c, 0x1e, 0x00, 0x00,
}
