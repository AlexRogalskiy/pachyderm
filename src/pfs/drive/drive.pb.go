// Code generated by protoc-gen-go.
// source: pfs/drive/drive.proto
// DO NOT EDIT!

/*
Package drive is a generated protocol buffer package.

It is generated from these files:
	pfs/drive/drive.proto

It has these top-level messages:
	BlockRef
	Index
	Commit
*/
package drive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import google_api1 "google/api"
// discarding unused import google_protobuf1 "go.pedge.io/google-protobuf"
// discarding unused import google_protobuf2 "go.pedge.io/google-protobuf"
import pfs "github.com/pachyderm/pachyderm/src/pfs"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BlockRef struct {
	SizeBytes uint64     `protobuf:"varint,1,opt,name=size_bytes" json:"size_bytes,omitempty"`
	Block     *pfs.Block `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
}

func (m *BlockRef) Reset()         { *m = BlockRef{} }
func (m *BlockRef) String() string { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()    {}

func (m *BlockRef) GetBlock() *pfs.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Index struct {
	BlockRefs []*BlockRef `protobuf:"bytes,1,rep,name=block_refs" json:"block_refs,omitempty"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}

func (m *Index) GetBlockRefs() []*BlockRef {
	if m != nil {
		return m.BlockRefs
	}
	return nil
}

type Commit struct {
	Appends map[string]*Index `protobuf:"bytes,1,rep,name=Appends" json:"Appends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Deletes map[string]bool   `protobuf:"bytes,2,rep,name=Deletes" json:"Deletes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}

func (m *Commit) GetAppends() map[string]*Index {
	if m != nil {
		return m.Appends
	}
	return nil
}

func (m *Commit) GetDeletes() map[string]bool {
	if m != nil {
		return m.Deletes
	}
	return nil
}
