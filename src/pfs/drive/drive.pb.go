// Code generated by protoc-gen-go.
// source: pfs/drive/drive.proto
// DO NOT EDIT!

/*
Package drive is a generated protocol buffer package.

It is generated from these files:
	pfs/drive/drive.proto

It has these top-level messages:
	Block
	Diff
	ByteRange
	BlockRef
	BlockRefs
	BlockInfo
	BlockInfos
	DiffInfo
	DiffInfos
	GetBlockRequest
	PutBlockRequest
	InspectBlockRequest
	ListBlockRequest
	CreateDiffRequest
	InspectDiffRequest
	ListDiffRequest
*/
package drive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "go.pedge.io/google-protobuf"
import google_protobuf2 "go.pedge.io/google-protobuf"
import google_protobuf3 "go.pedge.io/google-protobuf"
import pfs "github.com/pachyderm/pachyderm/src/pfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}

type Diff struct {
	Commit *pfs.Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64      `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *Diff) Reset()         { *m = Diff{} }
func (m *Diff) String() string { return proto.CompactTextString(m) }
func (*Diff) ProtoMessage()    {}

func (m *Diff) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ByteRange struct {
	Lower uint64 `protobuf:"varint,1,opt,name=lower" json:"lower,omitempty"`
	Upper uint64 `protobuf:"varint,2,opt,name=upper" json:"upper,omitempty"`
}

func (m *ByteRange) Reset()         { *m = ByteRange{} }
func (m *ByteRange) String() string { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()    {}

type BlockRef struct {
	Block *Block     `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Range *ByteRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (m *BlockRef) Reset()         { *m = BlockRef{} }
func (m *BlockRef) String() string { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()    {}

func (m *BlockRef) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockRef) GetRange() *ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type BlockRefs struct {
	BlockRef []*BlockRef `protobuf:"bytes,1,rep,name=block_ref" json:"block_ref,omitempty"`
}

func (m *BlockRefs) Reset()         { *m = BlockRefs{} }
func (m *BlockRefs) String() string { return proto.CompactTextString(m) }
func (*BlockRefs) ProtoMessage()    {}

func (m *BlockRefs) GetBlockRef() []*BlockRef {
	if m != nil {
		return m.BlockRef
	}
	return nil
}

type BlockInfo struct {
	Block     *Block                      `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}

func (m *BlockInfo) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type BlockInfos struct {
	BlockInfo []*BlockInfo `protobuf:"bytes,1,rep,name=block_info" json:"block_info,omitempty"`
}

func (m *BlockInfos) Reset()         { *m = BlockInfos{} }
func (m *BlockInfos) String() string { return proto.CompactTextString(m) }
func (*BlockInfos) ProtoMessage()    {}

func (m *BlockInfos) GetBlockInfo() []*BlockInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

type DiffInfo struct {
	Diff         *Diff                 `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
	ParentCommit *pfs.Commit           `protobuf:"bytes,2,opt,name=parent_commit" json:"parent_commit,omitempty"`
	Appends      map[string]*BlockRefs `protobuf:"bytes,3,rep,name=appends" json:"appends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastRef      map[string]*Diff      `protobuf:"bytes,4,rep,name=last_ref" json:"last_ref,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DiffInfo) Reset()         { *m = DiffInfo{} }
func (m *DiffInfo) String() string { return proto.CompactTextString(m) }
func (*DiffInfo) ProtoMessage()    {}

func (m *DiffInfo) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func (m *DiffInfo) GetParentCommit() *pfs.Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *DiffInfo) GetAppends() map[string]*BlockRefs {
	if m != nil {
		return m.Appends
	}
	return nil
}

func (m *DiffInfo) GetLastRef() map[string]*Diff {
	if m != nil {
		return m.LastRef
	}
	return nil
}

type DiffInfos struct {
	DiffInfo []*DiffInfo `protobuf:"bytes,1,rep,name=diff_info" json:"diff_info,omitempty"`
}

func (m *DiffInfos) Reset()         { *m = DiffInfos{} }
func (m *DiffInfos) String() string { return proto.CompactTextString(m) }
func (*DiffInfos) ProtoMessage()    {}

func (m *DiffInfos) GetDiffInfo() []*DiffInfo {
	if m != nil {
		return m.DiffInfo
	}
	return nil
}

type GetBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *GetBlockRequest) Reset()         { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()    {}

func (m *GetBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type PutBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutBlockRequest) Reset()         { *m = PutBlockRequest{} }
func (m *PutBlockRequest) String() string { return proto.CompactTextString(m) }
func (*PutBlockRequest) ProtoMessage()    {}

func (m *PutBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type InspectBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *InspectBlockRequest) Reset()         { *m = InspectBlockRequest{} }
func (m *InspectBlockRequest) String() string { return proto.CompactTextString(m) }
func (*InspectBlockRequest) ProtoMessage()    {}

func (m *InspectBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ListBlockRequest struct {
}

func (m *ListBlockRequest) Reset()         { *m = ListBlockRequest{} }
func (m *ListBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ListBlockRequest) ProtoMessage()    {}

type CreateDiffRequest struct {
	Diff         *Diff                 `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
	ParentCommit *pfs.Commit           `protobuf:"bytes,2,opt,name=parent_commit" json:"parent_commit,omitempty"`
	Appends      map[string]*BlockRefs `protobuf:"bytes,3,rep,name=appends" json:"appends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastRef      map[string]*Diff      `protobuf:"bytes,4,rep,name=last_ref" json:"last_ref,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateDiffRequest) Reset()         { *m = CreateDiffRequest{} }
func (m *CreateDiffRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDiffRequest) ProtoMessage()    {}

func (m *CreateDiffRequest) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func (m *CreateDiffRequest) GetParentCommit() *pfs.Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CreateDiffRequest) GetAppends() map[string]*BlockRefs {
	if m != nil {
		return m.Appends
	}
	return nil
}

func (m *CreateDiffRequest) GetLastRef() map[string]*Diff {
	if m != nil {
		return m.LastRef
	}
	return nil
}

type InspectDiffRequest struct {
	Diff *Diff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *InspectDiffRequest) Reset()         { *m = InspectDiffRequest{} }
func (m *InspectDiffRequest) String() string { return proto.CompactTextString(m) }
func (*InspectDiffRequest) ProtoMessage()    {}

func (m *InspectDiffRequest) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type ListDiffRequest struct {
	Commit *pfs.Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64      `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListDiffRequest) Reset()         { *m = ListDiffRequest{} }
func (m *ListDiffRequest) String() string { return proto.CompactTextString(m) }
func (*ListDiffRequest) ProtoMessage()    {}

func (m *ListDiffRequest) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "Block")
	proto.RegisterType((*Diff)(nil), "Diff")
	proto.RegisterType((*ByteRange)(nil), "ByteRange")
	proto.RegisterType((*BlockRef)(nil), "BlockRef")
	proto.RegisterType((*BlockRefs)(nil), "BlockRefs")
	proto.RegisterType((*BlockInfo)(nil), "BlockInfo")
	proto.RegisterType((*BlockInfos)(nil), "BlockInfos")
	proto.RegisterType((*DiffInfo)(nil), "DiffInfo")
	proto.RegisterType((*DiffInfos)(nil), "DiffInfos")
	proto.RegisterType((*GetBlockRequest)(nil), "GetBlockRequest")
	proto.RegisterType((*PutBlockRequest)(nil), "PutBlockRequest")
	proto.RegisterType((*InspectBlockRequest)(nil), "InspectBlockRequest")
	proto.RegisterType((*ListBlockRequest)(nil), "ListBlockRequest")
	proto.RegisterType((*CreateDiffRequest)(nil), "CreateDiffRequest")
	proto.RegisterType((*InspectDiffRequest)(nil), "InspectDiffRequest")
	proto.RegisterType((*ListDiffRequest)(nil), "ListDiffRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	PutBlock(ctx context.Context, in *PutBlockRequest, opts ...grpc.CallOption) (*Block, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (API_GetBlockClient, error)
	InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*BlockInfo, error)
	ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*BlockInfos, error)
	CreateDiff(ctx context.Context, in *CreateDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	InspectDiff(ctx context.Context, in *InspectDiffRequest, opts ...grpc.CallOption) (*DiffInfo, error)
	ListDiff(ctx context.Context, in *ListDiffRequest, opts ...grpc.CallOption) (*DiffInfos, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) PutBlock(ctx context.Context, in *PutBlockRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/.API/PutBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (API_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/.API/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetBlockClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type aPIGetBlockClient struct {
	grpc.ClientStream
}

func (x *aPIGetBlockClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := grpc.Invoke(ctx, "/.API/InspectBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*BlockInfos, error) {
	out := new(BlockInfos)
	err := grpc.Invoke(ctx, "/.API/ListBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateDiff(ctx context.Context, in *CreateDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/.API/CreateDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectDiff(ctx context.Context, in *InspectDiffRequest, opts ...grpc.CallOption) (*DiffInfo, error) {
	out := new(DiffInfo)
	err := grpc.Invoke(ctx, "/.API/InspectDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListDiff(ctx context.Context, in *ListDiffRequest, opts ...grpc.CallOption) (*DiffInfos, error) {
	out := new(DiffInfos)
	err := grpc.Invoke(ctx, "/.API/ListDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	PutBlock(context.Context, *PutBlockRequest) (*Block, error)
	GetBlock(*GetBlockRequest, API_GetBlockServer) error
	InspectBlock(context.Context, *InspectBlockRequest) (*BlockInfo, error)
	ListBlock(context.Context, *ListBlockRequest) (*BlockInfos, error)
	CreateDiff(context.Context, *CreateDiffRequest) (*google_protobuf1.Empty, error)
	InspectDiff(context.Context, *InspectDiffRequest) (*DiffInfo, error)
	ListDiff(context.Context, *ListDiffRequest) (*DiffInfos, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_PutBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).PutBlock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetBlock(m, &aPIGetBlockServer{stream})
}

type API_GetBlockServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type aPIGetBlockServer struct {
	grpc.ServerStream
}

func (x *aPIGetBlockServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _API_InspectBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).InspectBlock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListBlock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreateDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_InspectDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).InspectDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutBlock",
			Handler:    _API_PutBlock_Handler,
		},
		{
			MethodName: "InspectBlock",
			Handler:    _API_InspectBlock_Handler,
		},
		{
			MethodName: "ListBlock",
			Handler:    _API_ListBlock_Handler,
		},
		{
			MethodName: "CreateDiff",
			Handler:    _API_CreateDiff_Handler,
		},
		{
			MethodName: "InspectDiff",
			Handler:    _API_InspectDiff_Handler,
		},
		{
			MethodName: "ListDiff",
			Handler:    _API_ListDiff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlock",
			Handler:       _API_GetBlock_Handler,
			ServerStreams: true,
		},
	},
}
