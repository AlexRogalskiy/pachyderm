// Code generated by protoc-gen-go.
// source: pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	pfs/pfs.proto

It has these top-level messages:
	Repo
	Commit
	File
	RepoInfo
	RepoInfos
	CommitInfo
	CommitInfos
	FileInfo
	FileInfos
	Shard
	Change
	CreateRepoRequest
	InspectRepoRequest
	ListRepoRequest
	DeleteRepoRequest
	StartCommitRequest
	FinishCommitRequest
	InspectCommitRequest
	ListCommitRequest
	DeleteCommitRequest
	GetFileRequest
	PutFileRequest
	InspectFileRequest
	MakeDirectoryRequest
	ListFileRequest
	DeleteFileRequest
	PullDiffRequest
	PushDiffRequest
*/
package pfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import google_api1 "google/api"
import google_protobuf1 "go.pedge.io/google-protobuf"
import google_protobuf2 "go.pedge.io/google-protobuf"
import google_protobuf3 "go.pedge.io/google-protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CommitType represents the type of commit.
type CommitType int32

const (
	CommitType_COMMIT_TYPE_NONE  CommitType = 0
	CommitType_COMMIT_TYPE_READ  CommitType = 1
	CommitType_COMMIT_TYPE_WRITE CommitType = 2
)

var CommitType_name = map[int32]string{
	0: "COMMIT_TYPE_NONE",
	1: "COMMIT_TYPE_READ",
	2: "COMMIT_TYPE_WRITE",
}
var CommitType_value = map[string]int32{
	"COMMIT_TYPE_NONE":  0,
	"COMMIT_TYPE_READ":  1,
	"COMMIT_TYPE_WRITE": 2,
}

func (x CommitType) String() string {
	return proto.EnumName(CommitType_name, int32(x))
}

// FileType represents a type of file from ListFiles.
type FileType int32

const (
	FileType_FILE_TYPE_REGULAR FileType = 0
	FileType_FILE_TYPE_DIR     FileType = 1
)

var FileType_name = map[int32]string{
	0: "FILE_TYPE_REGULAR",
	1: "FILE_TYPE_DIR",
}
var FileType_value = map[string]int32{
	"FILE_TYPE_REGULAR": 0,
	"FILE_TYPE_DIR":     1,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}

// Repo represents a repo.
type Repo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Repo) Reset()         { *m = Repo{} }
func (m *Repo) String() string { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()    {}

// Commit represents a specific commit in a repo.
type Commit struct {
	Repo *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}

func (m *Commit) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

// File represents the full path to a file or directory within pfs.
type File struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}

func (m *File) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

// RepoInfo represent information about a repo.
type RepoInfo struct {
	Repo      *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
}

func (m *RepoInfo) Reset()         { *m = RepoInfo{} }
func (m *RepoInfo) String() string { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()    {}

func (m *RepoInfo) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type RepoInfos struct {
	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info" json:"repo_info,omitempty"`
}

func (m *RepoInfos) Reset()         { *m = RepoInfos{} }
func (m *RepoInfos) String() string { return proto.CompactTextString(m) }
func (*RepoInfos) ProtoMessage()    {}

func (m *RepoInfos) GetRepoInfo() []*RepoInfo {
	if m != nil {
		return m.RepoInfo
	}
	return nil
}

// CommitInfo represents information about a commit.
type CommitInfo struct {
	Commit       *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	CommitType   CommitType                  `protobuf:"varint,2,opt,name=commit_type,enum=pfs.CommitType" json:"commit_type,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,3,opt,name=parent_commit" json:"parent_commit,omitempty"`
	Opened       *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=opened" json:"opened,omitempty"`
	Closed       *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=closed" json:"closed,omitempty"`
	CommitBytes  uint64                      `protobuf:"varint,6,opt,name=commit_bytes" json:"commit_bytes,omitempty"`
	TotalBytes   uint64                      `protobuf:"varint,7,opt,name=total_bytes" json:"total_bytes,omitempty"`
}

func (m *CommitInfo) Reset()         { *m = CommitInfo{} }
func (m *CommitInfo) String() string { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()    {}

func (m *CommitInfo) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CommitInfo) GetOpened() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Opened
	}
	return nil
}

func (m *CommitInfo) GetClosed() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Closed
	}
	return nil
}

type CommitInfos struct {
	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info" json:"commit_info,omitempty"`
}

func (m *CommitInfos) Reset()         { *m = CommitInfos{} }
func (m *CommitInfos) String() string { return proto.CompactTextString(m) }
func (*CommitInfos) ProtoMessage()    {}

func (m *CommitInfos) GetCommitInfo() []*CommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

// FileInfo represents information about a file.
type FileInfo struct {
	File         *File                       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType     FileType                    `protobuf:"varint,2,opt,name=file_type,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes    uint64                      `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
	Perm         uint32                      `protobuf:"varint,4,opt,name=perm" json:"perm,omitempty"`
	LastModified *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=last_modified" json:"last_modified,omitempty"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetLastModified() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type FileInfos struct {
	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info" json:"file_info,omitempty"`
}

func (m *FileInfos) Reset()         { *m = FileInfos{} }
func (m *FileInfos) String() string { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()    {}

func (m *FileInfos) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

// Shard represents a dynamic shard within pfs.
// number must always be less than modulo.
type Shard struct {
	Number uint64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Modulo uint64 `protobuf:"varint,2,opt,name=modulo" json:"modulo,omitempty"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}

// Change represents a change to a file.
type Change struct {
	Path        *File  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	SizeBytes   uint64 `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
	OffsetBytes uint64 `protobuf:"varint,4,opt,name=offset_bytes" json:"offset_bytes,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}

func (m *Change) GetPath() *File {
	if m != nil {
		return m.Path
	}
	return nil
}

type CreateRepoRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *CreateRepoRequest) Reset()         { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()    {}

func (m *CreateRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type InspectRepoRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *InspectRepoRequest) Reset()         { *m = InspectRepoRequest{} }
func (m *InspectRepoRequest) String() string { return proto.CompactTextString(m) }
func (*InspectRepoRequest) ProtoMessage()    {}

func (m *InspectRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type ListRepoRequest struct {
}

func (m *ListRepoRequest) Reset()         { *m = ListRepoRequest{} }
func (m *ListRepoRequest) String() string { return proto.CompactTextString(m) }
func (*ListRepoRequest) ProtoMessage()    {}

type DeleteRepoRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *DeleteRepoRequest) Reset()         { *m = DeleteRepoRequest{} }
func (m *DeleteRepoRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRepoRequest) ProtoMessage()    {}

func (m *DeleteRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type StartCommitRequest struct {
	Parent *Commit `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Commit *Commit `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
}

func (m *StartCommitRequest) Reset()         { *m = StartCommitRequest{} }
func (m *StartCommitRequest) String() string { return proto.CompactTextString(m) }
func (*StartCommitRequest) ProtoMessage()    {}

func (m *StartCommitRequest) GetParent() *Commit {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *StartCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type FinishCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *FinishCommitRequest) Reset()         { *m = FinishCommitRequest{} }
func (m *FinishCommitRequest) String() string { return proto.CompactTextString(m) }
func (*FinishCommitRequest) ProtoMessage()    {}

func (m *FinishCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type InspectCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *InspectCommitRequest) Reset()         { *m = InspectCommitRequest{} }
func (m *InspectCommitRequest) String() string { return proto.CompactTextString(m) }
func (*InspectCommitRequest) ProtoMessage()    {}

func (m *InspectCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ListCommitRequest struct {
	Repo *Repo   `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	From *Commit `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
}

func (m *ListCommitRequest) Reset()         { *m = ListCommitRequest{} }
func (m *ListCommitRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitRequest) ProtoMessage()    {}

func (m *ListCommitRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ListCommitRequest) GetFrom() *Commit {
	if m != nil {
		return m.From
	}
	return nil
}

type DeleteCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *DeleteCommitRequest) Reset()         { *m = DeleteCommitRequest{} }
func (m *DeleteCommitRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommitRequest) ProtoMessage()    {}

func (m *DeleteCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type GetFileRequest struct {
	File        *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	OffsetBytes int64 `protobuf:"varint,2,opt,name=offset_bytes" json:"offset_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
}

func (m *GetFileRequest) Reset()         { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()    {}

func (m *GetFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type PutFileRequest struct {
	File        *File    `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType    FileType `protobuf:"varint,2,opt,name=file_type,enum=pfs.FileType" json:"file_type,omitempty"`
	OffsetBytes int64    `protobuf:"varint,3,opt,name=offset_bytes" json:"offset_bytes,omitempty"`
	Value       []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutFileRequest) Reset()         { *m = PutFileRequest{} }
func (m *PutFileRequest) String() string { return proto.CompactTextString(m) }
func (*PutFileRequest) ProtoMessage()    {}

func (m *PutFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type InspectFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *InspectFileRequest) Reset()         { *m = InspectFileRequest{} }
func (m *InspectFileRequest) String() string { return proto.CompactTextString(m) }
func (*InspectFileRequest) ProtoMessage()    {}

func (m *InspectFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type MakeDirectoryRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *MakeDirectoryRequest) Reset()         { *m = MakeDirectoryRequest{} }
func (m *MakeDirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*MakeDirectoryRequest) ProtoMessage()    {}

func (m *MakeDirectoryRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type ListFileRequest struct {
	File  *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard *Shard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListFileRequest) Reset()         { *m = ListFileRequest{} }
func (m *ListFileRequest) String() string { return proto.CompactTextString(m) }
func (*ListFileRequest) ProtoMessage()    {}

func (m *ListFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *ListFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type DeleteFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *DeleteFileRequest) Reset()         { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()    {}

func (m *DeleteFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type PullDiffRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *PullDiffRequest) Reset()         { *m = PullDiffRequest{} }
func (m *PullDiffRequest) String() string { return proto.CompactTextString(m) }
func (*PullDiffRequest) ProtoMessage()    {}

func (m *PullDiffRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type PushDiffRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
	Value  []byte  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PushDiffRequest) Reset()         { *m = PushDiffRequest{} }
func (m *PushDiffRequest) String() string { return proto.CompactTextString(m) }
func (*PushDiffRequest) ProtoMessage()    {}

func (m *PushDiffRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func init() {
	proto.RegisterEnum("pfs.CommitType", CommitType_name, CommitType_value)
	proto.RegisterEnum("pfs.FileType", FileType_name, FileType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Api service

type ApiClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	// An error is returned if the parent commit is not a read commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	// An error is returned if the commit is not a write commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	// An error is returned if the specified commit is not a write commit.
	PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Api_GetFileClient, error)
	// InspectFile returns a info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.Api/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.Api/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.Api/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.Api/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.Api/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/PutFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Api_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[0], c.cc, "/pfs.Api/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type apiGetFileClient struct {
	grpc.ClientStream
}

func (x *apiGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.Api/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.Api/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	// An error is returned if the parent commit is not a read commit.
	StartCommit(context.Context, *StartCommitRequest) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	// An error is returned if the commit is not a write commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	// An error is returned if the specified commit is not a write commit.
	PutFile(context.Context, *PutFileRequest) (*google_protobuf1.Empty, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, Api_GetFileServer) error
	// InspectFile returns a info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_CreateRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CreateRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_InspectRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).InspectRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_ListRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).ListRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_DeleteRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).DeleteRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_StartCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).StartCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FinishCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FinishCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_InspectCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).InspectCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_ListCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).ListCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_DeleteCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).DeleteCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_PutFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PutFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).PutFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).GetFile(m, &apiGetFileServer{stream})
}

type Api_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type apiGetFileServer struct {
	grpc.ServerStream
}

func (x *apiGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_InspectFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).InspectFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_ListFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).ListFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_DeleteFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).DeleteFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _Api_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _Api_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _Api_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _Api_DeleteRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _Api_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _Api_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _Api_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _Api_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _Api_DeleteCommit_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _Api_PutFile_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _Api_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _Api_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Api_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _Api_GetFile_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for InternalApi service

type InternalApiClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	// An error is returned if the parent commit is not a read commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	// An error is returned if the commit is not a write commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	// An error is returned if the specified commit is not a write commit.
	PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (InternalApi_GetFileClient, error)
	// InspectFile returns a info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Diff rpcs
	// PullDiff pulls a binary stream of the diff from the specified
	// commit to the commit's parent.
	PullDiff(ctx context.Context, in *PullDiffRequest, opts ...grpc.CallOption) (InternalApi_PullDiffClient, error)
	// Push diff pushes a diff from the specified commit.
	PushDiff(ctx context.Context, in *PushDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type internalApiClient struct {
	cc *grpc.ClientConn
}

func NewInternalApiClient(cc *grpc.ClientConn) InternalApiClient {
	return &internalApiClient{cc}
}

func (c *internalApiClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/PutFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (InternalApi_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalApi_serviceDesc.Streams[0], c.cc, "/pfs.InternalApi/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalApiGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalApi_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type internalApiGetFileClient struct {
	grpc.ClientStream
}

func (x *internalApiGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalApiClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) PullDiff(ctx context.Context, in *PullDiffRequest, opts ...grpc.CallOption) (InternalApi_PullDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalApi_serviceDesc.Streams[1], c.cc, "/pfs.InternalApi/PullDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalApiPullDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalApi_PullDiffClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type internalApiPullDiffClient struct {
	grpc.ClientStream
}

func (x *internalApiPullDiffClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalApiClient) PushDiff(ctx context.Context, in *PushDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/PushDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalApi service

type InternalApiServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	// An error is returned if the parent commit is not a read commit.
	StartCommit(context.Context, *StartCommitRequest) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	// An error is returned if the commit is not a write commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	// An error is returned if the specified commit is not a write commit.
	PutFile(context.Context, *PutFileRequest) (*google_protobuf1.Empty, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, InternalApi_GetFileServer) error
	// InspectFile returns a info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
	// Diff rpcs
	// PullDiff pulls a binary stream of the diff from the specified
	// commit to the commit's parent.
	PullDiff(*PullDiffRequest, InternalApi_PullDiffServer) error
	// Push diff pushes a diff from the specified commit.
	PushDiff(context.Context, *PushDiffRequest) (*google_protobuf1.Empty, error)
}

func RegisterInternalApiServer(s *grpc.Server, srv InternalApiServer) {
	s.RegisterService(&_InternalApi_serviceDesc, srv)
}

func _InternalApi_CreateRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).CreateRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_InspectRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).InspectRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_ListRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).ListRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_DeleteRepo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).DeleteRepo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_StartCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).StartCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_FinishCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).FinishCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_InspectCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).InspectCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_ListCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).ListCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_DeleteCommit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).DeleteCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_PutFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PutFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).PutFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalApiServer).GetFile(m, &internalApiGetFileServer{stream})
}

type InternalApi_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type internalApiGetFileServer struct {
	grpc.ServerStream
}

func (x *internalApiGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalApi_InspectFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).InspectFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_ListFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).ListFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_DeleteFile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).DeleteFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalApi_PullDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalApiServer).PullDiff(m, &internalApiPullDiffServer{stream})
}

type InternalApi_PullDiffServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type internalApiPullDiffServer struct {
	grpc.ServerStream
}

func (x *internalApiPullDiffServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalApi_PushDiff_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PushDiffRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).PushDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _InternalApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.InternalApi",
	HandlerType: (*InternalApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _InternalApi_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _InternalApi_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _InternalApi_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _InternalApi_DeleteRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _InternalApi_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _InternalApi_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _InternalApi_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _InternalApi_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _InternalApi_DeleteCommit_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _InternalApi_PutFile_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _InternalApi_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _InternalApi_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _InternalApi_DeleteFile_Handler,
		},
		{
			MethodName: "PushDiff",
			Handler:    _InternalApi_PushDiff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _InternalApi_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullDiff",
			Handler:       _InternalApi_PullDiff_Handler,
			ServerStreams: true,
		},
	},
}
