// Code generated by protoc-gen-go.
// source: pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	pfs/pfs.proto

It has these top-level messages:
	Repo
	Commit
	File
	RepoInfo
	RepoInfos
	CommitInfo
	CommitInfos
	FileInfo
	FileInfos
	Shard
	Change
	RepoCreateRequest
	RepoInspectRequest
	RepoListRequest
	RepoDeleteRequest
	CommitStartRequest
	CommitFinishRequest
	CommitInspectRequest
	CommitListRequest
	CommitDeleteRequest
	FileGetRequest
	FilePutRequest
	FileInspectRequest
	MakeDirectoryRequest
	FileListRequest
	FileDeleteRequest
	PullDiffRequest
	PushDiffRequest
*/
package pfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import google_api1 "google/api"
import google_protobuf1 "go.pedge.io/google-protobuf"
import google_protobuf2 "go.pedge.io/google-protobuf"
import google_protobuf3 "go.pedge.io/google-protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CommitType represents the type of commit.
type CommitType int32

const (
	CommitType_COMMIT_TYPE_NONE  CommitType = 0
	CommitType_COMMIT_TYPE_READ  CommitType = 1
	CommitType_COMMIT_TYPE_WRITE CommitType = 2
)

var CommitType_name = map[int32]string{
	0: "COMMIT_TYPE_NONE",
	1: "COMMIT_TYPE_READ",
	2: "COMMIT_TYPE_WRITE",
}
var CommitType_value = map[string]int32{
	"COMMIT_TYPE_NONE":  0,
	"COMMIT_TYPE_READ":  1,
	"COMMIT_TYPE_WRITE": 2,
}

func (x CommitType) String() string {
	return proto.EnumName(CommitType_name, int32(x))
}

// FileType represents a type of file from ListFiles.
type FileType int32

const (
	FileType_FILE_TYPE_REGULAR FileType = 0
	FileType_FILE_TYPE_DIR     FileType = 1
)

var FileType_name = map[int32]string{
	0: "FILE_TYPE_REGULAR",
	1: "FILE_TYPE_DIR",
}
var FileType_value = map[string]int32{
	"FILE_TYPE_REGULAR": 0,
	"FILE_TYPE_DIR":     1,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}

// Repo represents a repo.
type Repo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Repo) Reset()         { *m = Repo{} }
func (m *Repo) String() string { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()    {}

// Commit represents a specific commit in a repo.
type Commit struct {
	Repo *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}

func (m *Commit) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

// File represents the full path to a file or directory within pfs.
type File struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}

func (m *File) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

// RepoInfo represent information about a repo.
type RepoInfo struct {
	Repo      *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
}

func (m *RepoInfo) Reset()         { *m = RepoInfo{} }
func (m *RepoInfo) String() string { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()    {}

func (m *RepoInfo) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type RepoInfos struct {
	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info" json:"repo_info,omitempty"`
}

func (m *RepoInfos) Reset()         { *m = RepoInfos{} }
func (m *RepoInfos) String() string { return proto.CompactTextString(m) }
func (*RepoInfos) ProtoMessage()    {}

func (m *RepoInfos) GetRepoInfo() []*RepoInfo {
	if m != nil {
		return m.RepoInfo
	}
	return nil
}

// CommitInfo represents information about a commit.
type CommitInfo struct {
	Commit       *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	CommitType   CommitType                  `protobuf:"varint,2,opt,name=commit_type,enum=pfs.CommitType" json:"commit_type,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,3,opt,name=parent_commit" json:"parent_commit,omitempty"`
	Opened       *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=opened" json:"opened,omitempty"`
	Closed       *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=closed" json:"closed,omitempty"`
	CommitBytes  uint64                      `protobuf:"varint,6,opt,name=commit_bytes" json:"commit_bytes,omitempty"`
	TotalBytes   uint64                      `protobuf:"varint,7,opt,name=total_bytes" json:"total_bytes,omitempty"`
}

func (m *CommitInfo) Reset()         { *m = CommitInfo{} }
func (m *CommitInfo) String() string { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()    {}

func (m *CommitInfo) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CommitInfo) GetOpened() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Opened
	}
	return nil
}

func (m *CommitInfo) GetClosed() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Closed
	}
	return nil
}

type CommitInfos struct {
	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info" json:"commit_info,omitempty"`
}

func (m *CommitInfos) Reset()         { *m = CommitInfos{} }
func (m *CommitInfos) String() string { return proto.CompactTextString(m) }
func (*CommitInfos) ProtoMessage()    {}

func (m *CommitInfos) GetCommitInfo() []*CommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

// FileInfo represents information about a file.
type FileInfo struct {
	File         *File                       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType     FileType                    `protobuf:"varint,2,opt,name=file_type,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes    uint64                      `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
	Perm         uint32                      `protobuf:"varint,4,opt,name=perm" json:"perm,omitempty"`
	LastModified *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=last_modified" json:"last_modified,omitempty"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetLastModified() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type FileInfos struct {
	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info" json:"file_info,omitempty"`
}

func (m *FileInfos) Reset()         { *m = FileInfos{} }
func (m *FileInfos) String() string { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()    {}

func (m *FileInfos) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

// Shard represents a dynamic shard within pfs.
// number must always be less than modulo.
type Shard struct {
	Number uint64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Modulo uint64 `protobuf:"varint,2,opt,name=modulo" json:"modulo,omitempty"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}

// Change represents a change to a file.
type Change struct {
	Path        *File  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	SizeBytes   uint64 `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
	OffsetBytes uint64 `protobuf:"varint,4,opt,name=offset_bytes" json:"offset_bytes,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}

func (m *Change) GetPath() *File {
	if m != nil {
		return m.Path
	}
	return nil
}

type RepoCreateRequest struct {
	Repo     *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Redirect bool  `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *RepoCreateRequest) Reset()         { *m = RepoCreateRequest{} }
func (m *RepoCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RepoCreateRequest) ProtoMessage()    {}

func (m *RepoCreateRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type RepoInspectRequest struct {
	Repo     *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Redirect bool  `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *RepoInspectRequest) Reset()         { *m = RepoInspectRequest{} }
func (m *RepoInspectRequest) String() string { return proto.CompactTextString(m) }
func (*RepoInspectRequest) ProtoMessage()    {}

func (m *RepoInspectRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type RepoListRequest struct {
	Redirect bool `protobuf:"varint,1,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *RepoListRequest) Reset()         { *m = RepoListRequest{} }
func (m *RepoListRequest) String() string { return proto.CompactTextString(m) }
func (*RepoListRequest) ProtoMessage()    {}

type RepoDeleteRequest struct {
	Repo     *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Redirect bool  `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *RepoDeleteRequest) Reset()         { *m = RepoDeleteRequest{} }
func (m *RepoDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RepoDeleteRequest) ProtoMessage()    {}

func (m *RepoDeleteRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type CommitStartRequest struct {
	Parent   *Commit `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Commit   *Commit `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Redirect bool    `protobuf:"varint,3,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *CommitStartRequest) Reset()         { *m = CommitStartRequest{} }
func (m *CommitStartRequest) String() string { return proto.CompactTextString(m) }
func (*CommitStartRequest) ProtoMessage()    {}

func (m *CommitStartRequest) GetParent() *Commit {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CommitStartRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type CommitFinishRequest struct {
	Commit   *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Redirect bool    `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *CommitFinishRequest) Reset()         { *m = CommitFinishRequest{} }
func (m *CommitFinishRequest) String() string { return proto.CompactTextString(m) }
func (*CommitFinishRequest) ProtoMessage()    {}

func (m *CommitFinishRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type CommitInspectRequest struct {
	Commit   *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Redirect bool    `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *CommitInspectRequest) Reset()         { *m = CommitInspectRequest{} }
func (m *CommitInspectRequest) String() string { return proto.CompactTextString(m) }
func (*CommitInspectRequest) ProtoMessage()    {}

func (m *CommitInspectRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type CommitListRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *CommitListRequest) Reset()         { *m = CommitListRequest{} }
func (m *CommitListRequest) String() string { return proto.CompactTextString(m) }
func (*CommitListRequest) ProtoMessage()    {}

func (m *CommitListRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type CommitDeleteRequest struct {
	Commit   *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Redirect bool    `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *CommitDeleteRequest) Reset()         { *m = CommitDeleteRequest{} }
func (m *CommitDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CommitDeleteRequest) ProtoMessage()    {}

func (m *CommitDeleteRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type FileGetRequest struct {
	File        *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	OffsetBytes int64 `protobuf:"varint,2,opt,name=offset_bytes" json:"offset_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes" json:"size_bytes,omitempty"`
}

func (m *FileGetRequest) Reset()         { *m = FileGetRequest{} }
func (m *FileGetRequest) String() string { return proto.CompactTextString(m) }
func (*FileGetRequest) ProtoMessage()    {}

func (m *FileGetRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FilePutRequest struct {
	File        *File    `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType    FileType `protobuf:"varint,2,opt,name=file_type,enum=pfs.FileType" json:"file_type,omitempty"`
	OffsetBytes int64    `protobuf:"varint,3,opt,name=offset_bytes" json:"offset_bytes,omitempty"`
	Value       []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Redirect    bool     `protobuf:"varint,5,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *FilePutRequest) Reset()         { *m = FilePutRequest{} }
func (m *FilePutRequest) String() string { return proto.CompactTextString(m) }
func (*FilePutRequest) ProtoMessage()    {}

func (m *FilePutRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FileInspectRequest struct {
	File *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *FileInspectRequest) Reset()         { *m = FileInspectRequest{} }
func (m *FileInspectRequest) String() string { return proto.CompactTextString(m) }
func (*FileInspectRequest) ProtoMessage()    {}

func (m *FileInspectRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type MakeDirectoryRequest struct {
	File     *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Redirect bool  `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *MakeDirectoryRequest) Reset()         { *m = MakeDirectoryRequest{} }
func (m *MakeDirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*MakeDirectoryRequest) ProtoMessage()    {}

func (m *MakeDirectoryRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FileListRequest struct {
	File     *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard    *Shard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	Redirect bool   `protobuf:"varint,3,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *FileListRequest) Reset()         { *m = FileListRequest{} }
func (m *FileListRequest) String() string { return proto.CompactTextString(m) }
func (*FileListRequest) ProtoMessage()    {}

func (m *FileListRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileListRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type FileDeleteRequest struct {
	File     *File `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Redirect bool  `protobuf:"varint,2,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *FileDeleteRequest) Reset()         { *m = FileDeleteRequest{} }
func (m *FileDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*FileDeleteRequest) ProtoMessage()    {}

func (m *FileDeleteRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type PullDiffRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *PullDiffRequest) Reset()         { *m = PullDiffRequest{} }
func (m *PullDiffRequest) String() string { return proto.CompactTextString(m) }
func (*PullDiffRequest) ProtoMessage()    {}

func (m *PullDiffRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type PushDiffRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
	Value  []byte  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PushDiffRequest) Reset()         { *m = PushDiffRequest{} }
func (m *PushDiffRequest) String() string { return proto.CompactTextString(m) }
func (*PushDiffRequest) ProtoMessage()    {}

func (m *PushDiffRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func init() {
	proto.RegisterEnum("pfs.CommitType", CommitType_name, CommitType_value)
	proto.RegisterEnum("pfs.FileType", FileType_name, FileType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Api service

type ApiClient interface {
	// Repo rpcs
	// RepoCreate creates a new repo.
	// An error is returned if the repo already exists.
	RepoCreate(ctx context.Context, in *RepoCreateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// RepoInspect returns info about a repo.
	RepoInspect(ctx context.Context, in *RepoInspectRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// RepoList returns info about all repos.
	RepoList(ctx context.Context, in *RepoListRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// RepoDelete deletes a repo.
	RepoDelete(ctx context.Context, in *RepoDeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// CommitStart creates a new write commit from a parent commit.
	// An error is returned if the parent commit is not a read commit.
	CommitStart(ctx context.Context, in *CommitStartRequest, opts ...grpc.CallOption) (*Commit, error)
	// CommitFinish turns a write commit into a read commit.
	// An error is returned if the commit is not a write commit.
	CommitFinish(ctx context.Context, in *CommitFinishRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// CommitInspect returns the info about a commit.
	CommitInspect(ctx context.Context, in *CommitInspectRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// CommitList returns info about all commits.
	CommitList(ctx context.Context, in *CommitListRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// CommitDelete deletes a commit.
	CommitDelete(ctx context.Context, in *CommitDeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// File rpcs
	// FilePut writes the specified file to pfs.
	// An error is returned if the specified commit is not a write commit.
	FilePut(ctx context.Context, in *FilePutRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FileGet returns a byte stream of the contents of the file.
	FileGet(ctx context.Context, in *FileGetRequest, opts ...grpc.CallOption) (Api_FileGetClient, error)
	// FileInspect returns a info about a file.
	FileInspect(ctx context.Context, in *FileInspectRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// FileList returns info about all files.
	FileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// FileDelete deletes a file.
	FileDelete(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) RepoCreate(ctx context.Context, in *RepoCreateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/RepoCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RepoInspect(ctx context.Context, in *RepoInspectRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.Api/RepoInspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RepoList(ctx context.Context, in *RepoListRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.Api/RepoList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RepoDelete(ctx context.Context, in *RepoDeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/RepoDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommitStart(ctx context.Context, in *CommitStartRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.Api/CommitStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommitFinish(ctx context.Context, in *CommitFinishRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/CommitFinish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommitInspect(ctx context.Context, in *CommitInspectRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.Api/CommitInspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommitList(ctx context.Context, in *CommitListRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.Api/CommitList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommitDelete(ctx context.Context, in *CommitDeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/CommitDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FilePut(ctx context.Context, in *FilePutRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/FilePut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FileGet(ctx context.Context, in *FileGetRequest, opts ...grpc.CallOption) (Api_FileGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[0], c.cc, "/pfs.Api/FileGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiFileGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_FileGetClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type apiFileGetClient struct {
	grpc.ClientStream
}

func (x *apiFileGetClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) FileInspect(ctx context.Context, in *FileInspectRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.Api/FileInspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.Api/FileList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FileDelete(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.Api/FileDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	// Repo rpcs
	// RepoCreate creates a new repo.
	// An error is returned if the repo already exists.
	RepoCreate(context.Context, *RepoCreateRequest) (*google_protobuf1.Empty, error)
	// RepoInspect returns info about a repo.
	RepoInspect(context.Context, *RepoInspectRequest) (*RepoInfo, error)
	// RepoList returns info about all repos.
	RepoList(context.Context, *RepoListRequest) (*RepoInfos, error)
	// RepoDelete deletes a repo.
	RepoDelete(context.Context, *RepoDeleteRequest) (*google_protobuf1.Empty, error)
	// Commit rpcs
	// CommitStart creates a new write commit from a parent commit.
	// An error is returned if the parent commit is not a read commit.
	CommitStart(context.Context, *CommitStartRequest) (*Commit, error)
	// CommitFinish turns a write commit into a read commit.
	// An error is returned if the commit is not a write commit.
	CommitFinish(context.Context, *CommitFinishRequest) (*google_protobuf1.Empty, error)
	// CommitInspect returns the info about a commit.
	CommitInspect(context.Context, *CommitInspectRequest) (*CommitInfo, error)
	// CommitList returns info about all commits.
	CommitList(context.Context, *CommitListRequest) (*CommitInfos, error)
	// CommitDelete deletes a commit.
	CommitDelete(context.Context, *CommitDeleteRequest) (*google_protobuf1.Empty, error)
	// File rpcs
	// FilePut writes the specified file to pfs.
	// An error is returned if the specified commit is not a write commit.
	FilePut(context.Context, *FilePutRequest) (*google_protobuf1.Empty, error)
	// FileGet returns a byte stream of the contents of the file.
	FileGet(*FileGetRequest, Api_FileGetServer) error
	// FileInspect returns a info about a file.
	FileInspect(context.Context, *FileInspectRequest) (*FileInfo, error)
	// FileList returns info about all files.
	FileList(context.Context, *FileListRequest) (*FileInfos, error)
	// FileDelete deletes a file.
	FileDelete(context.Context, *FileDeleteRequest) (*google_protobuf1.Empty, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_RepoCreate_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RepoCreateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).RepoCreate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_RepoInspect_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RepoInspectRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).RepoInspect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_RepoList_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RepoListRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).RepoList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_RepoDelete_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RepoDeleteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).RepoDelete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_CommitStart_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommitStartRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CommitStart(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_CommitFinish_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommitFinishRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CommitFinish(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_CommitInspect_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommitInspectRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CommitInspect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_CommitList_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommitListRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CommitList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_CommitDelete_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommitDeleteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).CommitDelete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FilePut_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FilePutRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FilePut(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FileGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).FileGet(m, &apiFileGetServer{stream})
}

type Api_FileGetServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type apiFileGetServer struct {
	grpc.ServerStream
}

func (x *apiFileGetServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_FileInspect_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FileInspectRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FileInspect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FileList_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FileListRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FileList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Api_FileDelete_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FileDeleteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServer).FileDelete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepoCreate",
			Handler:    _Api_RepoCreate_Handler,
		},
		{
			MethodName: "RepoInspect",
			Handler:    _Api_RepoInspect_Handler,
		},
		{
			MethodName: "RepoList",
			Handler:    _Api_RepoList_Handler,
		},
		{
			MethodName: "RepoDelete",
			Handler:    _Api_RepoDelete_Handler,
		},
		{
			MethodName: "CommitStart",
			Handler:    _Api_CommitStart_Handler,
		},
		{
			MethodName: "CommitFinish",
			Handler:    _Api_CommitFinish_Handler,
		},
		{
			MethodName: "CommitInspect",
			Handler:    _Api_CommitInspect_Handler,
		},
		{
			MethodName: "CommitList",
			Handler:    _Api_CommitList_Handler,
		},
		{
			MethodName: "CommitDelete",
			Handler:    _Api_CommitDelete_Handler,
		},
		{
			MethodName: "FilePut",
			Handler:    _Api_FilePut_Handler,
		},
		{
			MethodName: "FileInspect",
			Handler:    _Api_FileInspect_Handler,
		},
		{
			MethodName: "FileList",
			Handler:    _Api_FileList_Handler,
		},
		{
			MethodName: "FileDelete",
			Handler:    _Api_FileDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileGet",
			Handler:       _Api_FileGet_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for InternalApi service

type InternalApiClient interface {
	// PullDiff pulls a binary stream of the diff from the specified
	// commit to the commit's parent.
	PullDiff(ctx context.Context, in *PullDiffRequest, opts ...grpc.CallOption) (InternalApi_PullDiffClient, error)
	// Push diff pushes a diff from the specified commit.
	PushDiff(ctx context.Context, in *PushDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type internalApiClient struct {
	cc *grpc.ClientConn
}

func NewInternalApiClient(cc *grpc.ClientConn) InternalApiClient {
	return &internalApiClient{cc}
}

func (c *internalApiClient) PullDiff(ctx context.Context, in *PullDiffRequest, opts ...grpc.CallOption) (InternalApi_PullDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalApi_serviceDesc.Streams[0], c.cc, "/pfs.InternalApi/PullDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalApiPullDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalApi_PullDiffClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type internalApiPullDiffClient struct {
	grpc.ClientStream
}

func (x *internalApiPullDiffClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalApiClient) PushDiff(ctx context.Context, in *PushDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalApi/PushDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalApi service

type InternalApiServer interface {
	// PullDiff pulls a binary stream of the diff from the specified
	// commit to the commit's parent.
	PullDiff(*PullDiffRequest, InternalApi_PullDiffServer) error
	// Push diff pushes a diff from the specified commit.
	PushDiff(context.Context, *PushDiffRequest) (*google_protobuf1.Empty, error)
}

func RegisterInternalApiServer(s *grpc.Server, srv InternalApiServer) {
	s.RegisterService(&_InternalApi_serviceDesc, srv)
}

func _InternalApi_PullDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalApiServer).PullDiff(m, &internalApiPullDiffServer{stream})
}

type InternalApi_PullDiffServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type internalApiPullDiffServer struct {
	grpc.ServerStream
}

func (x *internalApiPullDiffServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalApi_PushDiff_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PushDiffRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalApiServer).PushDiff(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _InternalApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.InternalApi",
	HandlerType: (*InternalApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushDiff",
			Handler:    _InternalApi_PushDiff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDiff",
			Handler:       _InternalApi_PullDiff_Handler,
			ServerStreams: true,
		},
	},
}
