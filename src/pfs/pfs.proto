syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "pkg/shard/proto/shard.proto";

package pfs;

// CommitType represents the type of commit.
enum CommitType {
  COMMIT_TYPE_NONE = 0;
  COMMIT_TYPE_READ = 1;
  COMMIT_TYPE_WRITE = 2;
}

// FileType represents a type of file from ListFiles.
enum FileType {
  FILE_TYPE_REGULAR = 0;
  FILE_TYPE_DIR = 1;
}

// Repo represents a repo.
message Repo {
  string name = 1;
}

// Commit represents a specific commit in a repo.
message Commit {
  Repo repo = 1;
  string id = 2;
}

// Block represents a block in the block store.
message Block {
    string hash = 1;
}

// File represents the full path to a file or directory within pfs.
message File {
  Commit commit = 1;
  string path = 2;
}

// Server represents a server in the pfs cluster.
message Server {
    string id = 1;
}

// RepoInfo represent information about a repo.
message RepoInfo {
    Repo repo = 1;
    google.protobuf.Timestamp created = 2;
    uint64 size_bytes = 3;
}

message RepoInfos {
  repeated RepoInfo repo_info = 1;
}

// CommitInfo represents information about a commit.
message CommitInfo {
  Commit commit = 1;
  CommitType commit_type = 2;
  Commit parent_commit = 3;
  google.protobuf.Timestamp started = 4;
  google.protobuf.Timestamp finished = 5;
  uint64 commit_bytes = 6;
  uint64 total_bytes = 7;
}

message CommitInfos {
  repeated CommitInfo commit_info = 1;
}

// BlockInfo represents information about a block.
message BlockInfo {
    Block block = 1;
    google.protobuf.Timestamp created = 2;
    uint64 size_bytes = 3;
}

message BlockInfos {
    repeated BlockInfo block_info = 1;
}

// FileInfo represents information about a file.
message FileInfo {
  File file = 1;
  FileType file_type = 2;
  uint64 size_bytes = 3;
  uint32 perm = 4;
  google.protobuf.Timestamp modified = 5;
}

message FileInfos {
  repeated FileInfo file_info = 1;
}

// ServerInfo represents information about a server.
message ServerInfo {
    Server server = 1;
    shardproto.ServerState server_state = 2;
    map<int64, shardproto.ServerRole> server_role = 3;
}

message ServerInfos {
    repeated ServerInfo server_info = 1;
}

// Shard represents a dynamic shard within pfs.
// number must always be less than modulo.
message Shard {
  uint64 number = 1;
  uint64 modulo = 2;
}

// Change represents a change to a file.
message Change {
    File file = 2;
    uint64 size_bytes = 3;
    uint64 offset_bytes = 4;
}

message Changes {
	repeated Change change = 1;
}

message CreateRepoRequest {
  Repo repo = 1;
}

message InspectRepoRequest {
    Repo repo = 1;
}

message ListRepoRequest {
}

message DeleteRepoRequest {
    Repo repo = 1;
}

message StartCommitRequest {
  Commit parent = 1;
  Commit commit = 2;
}

message FinishCommitRequest {
  Commit commit = 1;
}

message InspectCommitRequest {
  Commit commit = 1;
}

message ListCommitRequest {
  Repo repo = 1;
  CommitType commit_type = 2;
  Commit from = 3;
  bool block = 4;
}

message DeleteCommitRequest {
    Commit commit = 1;
}

message GetBlockRequest {
    Block block = 1;
}

message PutBlockRequest {
    File file = 1;
    bytes value = 2;
}

message InspectBlockRequest {
    Block block = 1;
}

message ListBlockRequest {
    Shard shard = 1;
}

message GetFileRequest {
  File file = 1;
  int64 offset_bytes = 2;
  int64 size_bytes = 3;
}

message PutFileRequest {
  File file = 1;
  FileType file_type = 2;
  int64 offset_bytes = 3;
  bytes value = 4;
}

message InspectFileRequest {
  File file = 1;
}

message MakeDirectoryRequest {
  File file = 1;
}

message ListFileRequest {
  File file = 1;
  Shard shard = 2; // can be left nil
}

message DeleteFileRequest {
    File file = 1;
}

message ListChangeRequest {
	File file = 1;
	Commit from = 2;
	Shard shard = 3; // can be left nil
}

message InspectServerRequest {
    Server server = 1;
}

message ListServerRequest {
}

service API {
  // Repo rpcs
  // CreateRepo creates a new repo.
  // An error is returned if the repo already exists.
  rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { put: "/repos/{repo.name}" };
  }
  // InspectRepo returns info about a repo.
  rpc InspectRepo(InspectRepoRequest) returns (RepoInfo) {}
  // ListRepo returns info about all repos.
  rpc ListRepo(ListRepoRequest) returns (RepoInfos) {}
  // DeleteRepo deletes a repo.
  rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {}

  // Commit rpcs
  // StartCommit creates a new write commit from a parent commit.
  rpc StartCommit(StartCommitRequest) returns (Commit) {}
  // FinishCommit turns a write commit into a read commit.
  rpc FinishCommit(FinishCommitRequest) returns (google.protobuf.Empty) {}
  // InspectCommit returns the info about a commit.
  rpc InspectCommit(InspectCommitRequest) returns (CommitInfo) {}
  // ListCommit returns info about all commits.
  rpc ListCommit(ListCommitRequest) returns (CommitInfos) {}
  // DeleteCommit deletes a commit.
  rpc DeleteCommit(DeleteCommitRequest) returns (google.protobuf.Empty) {}

  // Block rpcs
  // PutBlock writes the specified block to the block store.
  rpc PutBlock(PutBlockRequest) returns (Block) {}
  // GetBlock returns a byte stream of the contents of the block.
  rpc GetBlock(GetBlockRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectBlock returns info about a block.
  rpc InspectBlock(InspectBlockRequest) returns (BlockInfo) {}
  // ListBlock returns info about all blocks.
  rpc ListBlock(ListBlockRequest) returns (BlockInfos) {}

  // File rpcs
  // PutFile writes the specified file to pfs.
  rpc PutFile(stream PutFileRequest) returns (google.protobuf.Empty) {}
  // GetFile returns a byte stream of the contents of the file.
  rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectFile returns info about a file.
  rpc InspectFile(InspectFileRequest) returns (FileInfo) {}
  // ListFile returns info about all files.
  rpc ListFile(ListFileRequest) returns (FileInfos) {}
  // DeleteFile deletes a file.
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}
  // ListChange returns changes to the filesystem.
  rpc ListChange(ListChangeRequest) returns (Changes) {}

  // Server rpcs
  // InspectServer returns info about a server.
  rpc InspectServer(InspectServerRequest) returns (ServerInfo) {}
  // ListServer returns info about all servers.
  rpc ListServer(ListServerRequest) returns (ServerInfos) {}
}

message PullDiffRequest {
  Commit commit = 1;
  uint64 shard = 2;
}

message PushDiffRequest {
  Commit commit = 1;
  uint64 shard = 2;
  bytes value = 3;
}

service InternalAPI {
  // Repo rpcs
  // CreateRepo creates a new repo.
  rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {}
  // InspectRepo returns info about a repo.
  rpc InspectRepo(InspectRepoRequest) returns (RepoInfo) {}
  // ListRepo returns info about all repos.
  rpc ListRepo(ListRepoRequest) returns (RepoInfos) {}
  // DeleteRepo deletes a repo.
  rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {}

  // Commit rpcs
  // StartCommit creates a new write commit from a parent commit.
  rpc StartCommit(StartCommitRequest) returns (google.protobuf.Empty) {}
  // FinishCommit turns a write commit into a read commit.
  rpc FinishCommit(FinishCommitRequest) returns (google.protobuf.Empty) {}
  // InspectCommit returns the info about a commit.
  rpc InspectCommit(InspectCommitRequest) returns (CommitInfo) {}
  // ListCommit returns info about all commits.
  rpc ListCommit(ListCommitRequest) returns (CommitInfos) {}
  // DeleteCommit deletes a commit.
  rpc DeleteCommit(DeleteCommitRequest) returns (google.protobuf.Empty) {}

  // File rpcs
  // PutFile writes the specified file to pfs.
  rpc PutFile(stream PutFileRequest) returns (google.protobuf.Empty) {}
  // GetFile returns a byte stream of the contents of the file.
  rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectFile returns a info about a file.
  rpc InspectFile(InspectFileRequest) returns (FileInfo) {}
  // ListFile returns info about all files.
  rpc ListFile(ListFileRequest) returns (FileInfos) {}
  // DeleteFile deletes a file.
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}
  // ListChange returns changes to the filesystem.
  rpc ListChange(ListChangeRequest) returns (Changes) {}

  // Block rpcs
  // PutBlock writes the specified block to the block store.
  rpc PutBlock(PutBlockRequest) returns (google.protobuf.Empty) {}
  // GetBlock returns a byte stream of the contents of the block.
  rpc GetBlock(GetBlockRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectBlock returns info about a block.
  rpc InspectBlock(InspectBlockRequest) returns (BlockInfo) {}
  // ListBlock returns info about all blocks.
  rpc ListBlock(ListBlockRequest) returns (BlockInfos) {}

  // Diff rpcs
  // PullDiff pulls a binary stream of the diff from the specified
  // commit to the commit's parent.
  rpc PullDiff(PullDiffRequest) returns (stream google.protobuf.BytesValue) {}
  // Push diff pushes a diff from the specified commit.
  rpc PushDiff(PushDiffRequest) returns (google.protobuf.Empty) {}
}
