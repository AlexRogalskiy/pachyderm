syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

package pfs;

// CommitType represents the type of commit.
enum CommitType {
  COMMIT_TYPE_NONE = 0;
  COMMIT_TYPE_READ = 1;
  COMMIT_TYPE_WRITE = 2;
}

// FileType represents a type of file from ListFiles.
enum FileType {
  FILE_TYPE_REGULAR = 0;
  FILE_TYPE_DIR = 1;
}

// Repo represents a repo.
message Repo {
  string name = 1;
}

// Commit represents a specific commit in a repo.
message Commit {
  Repo repo = 1;
  string id = 2;
}

// File represents the full path to a file or directory within pfs.
message File {
  Commit commit = 1;
  string path = 2;
}

// RepoInfo represent information about a repo.
message RepoInfo {
    Repo repo = 1;
    google.protobuf.Timestamp created = 2;
    uint64 size_bytes = 3;
}

message RepoInfos {
  repeated RepoInfo repo_info = 1;
}

// CommitInfo represents information about a commit.
message CommitInfo {
  Commit commit = 1;
  CommitType commit_type = 2;
  Commit parent_commit = 3;
  google.protobuf.Timestamp opened = 4;
  google.protobuf.Timestamp closed = 5;
  uint64 commit_bytes = 6;
  uint64 total_bytes = 7;
}

message CommitInfos {
  repeated CommitInfo commit_info = 1;
}

// FileInfo represents information about a file.
message FileInfo {
  File file = 1;
  FileType file_type = 2;
  uint64 size_bytes = 3;
  uint32 perm = 4;
  google.protobuf.Timestamp last_modified = 5;
}

message FileInfos {
  repeated FileInfo file_info = 1;
}

// Shard represents a dynamic shard within pfs.
// number must always be less than modulo.
message Shard {
  uint64 number = 1;
  uint64 modulo = 2;
}

// Change represents a change to a file.
message Change {
    File path = 2;
    uint64 size_bytes = 3;
    uint64 offset_bytes = 4;
}

message RepoCreateRequest {
  Repo repo = 1;
  bool redirect = 2;
}

message RepoInspectRequest {
    Repo repo = 1;
    bool redirect = 2;
}

message RepoListRequest {
    bool redirect = 1;
}

message RepoDeleteRequest {
    Repo repo = 1;
    bool redirect = 2;
}

message CommitStartRequest {
  Commit parent = 1;
  Commit commit = 2;
  bool redirect = 3;
}

message CommitFinishRequest {
  Commit commit = 1;
  bool redirect = 2;
}

message CommitInspectRequest {
  Commit commit = 1;
  bool redirect = 2;
}

message CommitListRequest {
  Repo repo = 1;
}

message CommitDeleteRequest {
    Commit commit = 1;
    bool redirect = 2;
}

message FileGetRequest {
  File file = 1;
  int64 offset_bytes = 2;
  int64 size_bytes = 3;
}

message FilePutRequest {
  File file = 1;
  FileType file_type = 2;
  int64 offset_bytes = 3;
  bytes value = 4;
  bool redirect = 5;
}

message FileInspectRequest {
  File file = 1;
}

message MakeDirectoryRequest {
  File file = 1;
  bool redirect = 2;
}

message FileListRequest {
  File file = 1;
  Shard shard = 2; // can be left nil
  bool redirect = 3;
}

message FileDeleteRequest {
    File file = 1;
    bool redirect = 2;
}

service Api {
  // Repo rpcs
  // RepoCreate creates a new repo.
  // An error is returned if the repo already exists.
  rpc RepoCreate(RepoCreateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { put: "/repos/{repo.name}" };
  }
  // RepoInspect returns info about a repo.
  rpc RepoInspect(RepoInspectRequest) returns (RepoInfo) {}
  // RepoList returns info about all repos.
  rpc RepoList(RepoListRequest) returns (RepoInfos) {}
  // RepoDelete deletes a repo.
  rpc RepoDelete(RepoDeleteRequest) returns (google.protobuf.Empty) {}

  // Commit rpcs
  // CommitStart creates a new write commit from a parent commit.
  // An error is returned if the parent commit is not a read commit.
  rpc CommitStart(CommitStartRequest) returns (Commit) {}
  // CommitFinish turns a write commit into a read commit.
  // An error is returned if the commit is not a write commit.
  rpc CommitFinish(CommitFinishRequest) returns (google.protobuf.Empty) {}
  // CommitInspect returns the info about a commit.
  rpc CommitInspect(CommitInspectRequest) returns (CommitInfo) {}
  // CommitList returns info about all commits.
  rpc CommitList(CommitListRequest) returns (CommitInfos) {}
  // CommitDelete deletes a commit.
  rpc CommitDelete(CommitDeleteRequest) returns (google.protobuf.Empty) {}

  // File rpcs
  // FilePut writes the specified file to pfs.
  // An error is returned if the specified commit is not a write commit.
  rpc FilePut(FilePutRequest) returns (google.protobuf.Empty) {}
  // FileGet returns a byte stream of the contents of the file.
  rpc FileGet(FileGetRequest) returns (stream google.protobuf.BytesValue) {}
  // FileInspect returns a info about a file.
  rpc FileInspect(FileInspectRequest) returns (FileInfo) {}
  // FileList returns info about all files.
  rpc FileList(FileListRequest) returns (FileInfos) {}
  // FileDelete deletes a file.
  rpc FileDelete(FileDeleteRequest) returns (google.protobuf.Empty) {}
}

message PullDiffRequest {
  Commit commit = 1;
  uint64 shard = 2;
}

message PushDiffRequest {
  Commit commit = 1;
  uint64 shard = 2;
  bytes value = 3;
}

service InternalApi {
  // PullDiff pulls a binary stream of the diff from the specified
  // commit to the commit's parent.
  rpc PullDiff(PullDiffRequest) returns (stream google.protobuf.BytesValue) {}
  // Push diff pushes a diff from the specified commit.
  rpc PushDiff(PushDiffRequest) returns (google.protobuf.Empty) {}
}
