// Code generated by protoc-gen-go.
// source: pps/pps.proto
// DO NOT EDIT!

/*
Package pps is a generated protocol buffer package.

It is generated from these files:
	pps/pps.proto

It has these top-level messages:
	Transform
	Job
	JobInfo
	JobInfos
	Pipeline
	PipelineInfo
	PipelineInfos
	CreateJobRequest
	InspectJobRequest
	ListJobRequest
	CreatePipelineRequest
	InspectPipelineRequest
	ListPipelineRequest
	DeletePipelineRequest
	StartJobRequest
	StartJobResponse
	FinishJobRequest
*/
package pps

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"
import pfs "github.com/pachyderm/pachyderm/src/pfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OutputStream int32

const (
	OutputStream_OUTPUT_STREAM_NONE   OutputStream = 0
	OutputStream_OUTPUT_STREAM_STDOUT OutputStream = 1
	OutputStream_OUTPUT_STREAM_STDERR OutputStream = 2
	OutputStream_OUTPUT_STREAM_ALL    OutputStream = 3
)

var OutputStream_name = map[int32]string{
	0: "OUTPUT_STREAM_NONE",
	1: "OUTPUT_STREAM_STDOUT",
	2: "OUTPUT_STREAM_STDERR",
	3: "OUTPUT_STREAM_ALL",
}
var OutputStream_value = map[string]int32{
	"OUTPUT_STREAM_NONE":   0,
	"OUTPUT_STREAM_STDOUT": 1,
	"OUTPUT_STREAM_STDERR": 2,
	"OUTPUT_STREAM_ALL":    3,
}

func (x OutputStream) String() string {
	return proto.EnumName(OutputStream_name, int32(x))
}
func (OutputStream) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Transform struct {
	Image string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Cmd   []string `protobuf:"bytes,2,rep,name=cmd" json:"cmd,omitempty"`
	Stdin string   `protobuf:"bytes,3,opt,name=stdin" json:"stdin,omitempty"`
}

func (m *Transform) Reset()                    { *m = Transform{} }
func (m *Transform) String() string            { return proto.CompactTextString(m) }
func (*Transform) ProtoMessage()               {}
func (*Transform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Job struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// TODO: add created at?
type JobInfo struct {
	Job          *Job          `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Transform    *Transform    `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Pipeline     *Pipeline     `protobuf:"bytes,3,opt,name=pipeline" json:"pipeline,omitempty"`
	Shards       uint64        `protobuf:"varint,4,opt,name=shards" json:"shards,omitempty"`
	InputCommit  []*pfs.Commit `protobuf:"bytes,5,rep,name=input_commit" json:"input_commit,omitempty"`
	OutputCommit *pfs.Commit   `protobuf:"bytes,6,opt,name=output_commit" json:"output_commit,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobInfo) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobInfo) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *JobInfo) GetInputCommit() []*pfs.Commit {
	if m != nil {
		return m.InputCommit
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type Pipeline struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// TODO: add created at?
type PipelineInfo struct {
	Pipeline   *Pipeline   `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Transform  *Transform  `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Shards     uint64      `protobuf:"varint,3,opt,name=shards" json:"shards,omitempty"`
	InputRepo  []*pfs.Repo `protobuf:"bytes,4,rep,name=input_repo" json:"input_repo,omitempty"`
	OutputRepo *pfs.Repo   `protobuf:"bytes,5,opt,name=output_repo" json:"output_repo,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PipelineInfo) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *PipelineInfo) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetInputRepo() []*pfs.Repo {
	if m != nil {
		return m.InputRepo
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type CreateJobRequest struct {
	Transform    *Transform    `protobuf:"bytes,1,opt,name=transform" json:"transform,omitempty"`
	Pipeline     *Pipeline     `protobuf:"bytes,2,opt,name=pipeline" json:"pipeline,omitempty"`
	Shards       uint64        `protobuf:"varint,3,opt,name=shards" json:"shards,omitempty"`
	InputCommit  []*pfs.Commit `protobuf:"bytes,4,rep,name=input_commit" json:"input_commit,omitempty"`
	OutputParent *pfs.Commit   `protobuf:"bytes,5,opt,name=output_parent" json:"output_parent,omitempty"`
}

func (m *CreateJobRequest) Reset()                    { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()               {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateJobRequest) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *CreateJobRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *CreateJobRequest) GetInputCommit() []*pfs.Commit {
	if m != nil {
		return m.InputCommit
	}
	return nil
}

func (m *CreateJobRequest) GetOutputParent() *pfs.Commit {
	if m != nil {
		return m.OutputParent
	}
	return nil
}

type InspectJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *InspectJobRequest) Reset()                    { *m = InspectJobRequest{} }
func (m *InspectJobRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectJobRequest) ProtoMessage()               {}
func (*InspectJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InspectJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type ListJobRequest struct {
	Pipeline *Pipeline   `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Input    *pfs.Commit `protobuf:"bytes,2,opt,name=input" json:"input,omitempty"`
}

func (m *ListJobRequest) Reset()                    { *m = ListJobRequest{} }
func (m *ListJobRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobRequest) ProtoMessage()               {}
func (*ListJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListJobRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *ListJobRequest) GetInput() *pfs.Commit {
	if m != nil {
		return m.Input
	}
	return nil
}

type CreatePipelineRequest struct {
	Pipeline   *Pipeline   `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Transform  *Transform  `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Shards     uint64      `protobuf:"varint,3,opt,name=shards" json:"shards,omitempty"`
	InputRepo  []*pfs.Repo `protobuf:"bytes,4,rep,name=input_repo" json:"input_repo,omitempty"`
	OutputRepo *pfs.Repo   `protobuf:"bytes,5,opt,name=output_repo" json:"output_repo,omitempty"`
}

func (m *CreatePipelineRequest) Reset()                    { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()               {}
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreatePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *CreatePipelineRequest) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *CreatePipelineRequest) GetInputRepo() []*pfs.Repo {
	if m != nil {
		return m.InputRepo
	}
	return nil
}

func (m *CreatePipelineRequest) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

type InspectPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *InspectPipelineRequest) Reset()                    { *m = InspectPipelineRequest{} }
func (m *InspectPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectPipelineRequest) ProtoMessage()               {}
func (*InspectPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *InspectPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type ListPipelineRequest struct {
}

func (m *ListPipelineRequest) Reset()                    { *m = ListPipelineRequest{} }
func (m *ListPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPipelineRequest) ProtoMessage()               {}
func (*ListPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type DeletePipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *DeletePipelineRequest) Reset()                    { *m = DeletePipelineRequest{} }
func (m *DeletePipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePipelineRequest) ProtoMessage()               {}
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeletePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type StartJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *StartJobRequest) Reset()                    { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string            { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()               {}
func (*StartJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *StartJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type StartJobResponse struct {
	Transform    *Transform    `protobuf:"bytes,1,opt,name=transform" json:"transform,omitempty"`
	InputCommit  []*pfs.Commit `protobuf:"bytes,2,rep,name=input_commit" json:"input_commit,omitempty"`
	OutputCommit *pfs.Commit   `protobuf:"bytes,3,opt,name=output_commit" json:"output_commit,omitempty"`
	Shard        *pfs.Shard    `protobuf:"bytes,4,opt,name=shard" json:"shard,omitempty"`
}

func (m *StartJobResponse) Reset()                    { *m = StartJobResponse{} }
func (m *StartJobResponse) String() string            { return proto.CompactTextString(m) }
func (*StartJobResponse) ProtoMessage()               {}
func (*StartJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *StartJobResponse) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *StartJobResponse) GetInputCommit() []*pfs.Commit {
	if m != nil {
		return m.InputCommit
	}
	return nil
}

func (m *StartJobResponse) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *StartJobResponse) GetShard() *pfs.Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type FinishJobRequest struct {
	Job   *Job       `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Shard *pfs.Shard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *FinishJobRequest) Reset()                    { *m = FinishJobRequest{} }
func (m *FinishJobRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishJobRequest) ProtoMessage()               {}
func (*FinishJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FinishJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *FinishJobRequest) GetShard() *pfs.Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func init() {
	proto.RegisterType((*Transform)(nil), "pachyderm.pps.Transform")
	proto.RegisterType((*Job)(nil), "pachyderm.pps.Job")
	proto.RegisterType((*JobInfo)(nil), "pachyderm.pps.JobInfo")
	proto.RegisterType((*JobInfos)(nil), "pachyderm.pps.JobInfos")
	proto.RegisterType((*Pipeline)(nil), "pachyderm.pps.Pipeline")
	proto.RegisterType((*PipelineInfo)(nil), "pachyderm.pps.PipelineInfo")
	proto.RegisterType((*PipelineInfos)(nil), "pachyderm.pps.PipelineInfos")
	proto.RegisterType((*CreateJobRequest)(nil), "pachyderm.pps.CreateJobRequest")
	proto.RegisterType((*InspectJobRequest)(nil), "pachyderm.pps.InspectJobRequest")
	proto.RegisterType((*ListJobRequest)(nil), "pachyderm.pps.ListJobRequest")
	proto.RegisterType((*CreatePipelineRequest)(nil), "pachyderm.pps.CreatePipelineRequest")
	proto.RegisterType((*InspectPipelineRequest)(nil), "pachyderm.pps.InspectPipelineRequest")
	proto.RegisterType((*ListPipelineRequest)(nil), "pachyderm.pps.ListPipelineRequest")
	proto.RegisterType((*DeletePipelineRequest)(nil), "pachyderm.pps.DeletePipelineRequest")
	proto.RegisterType((*StartJobRequest)(nil), "pachyderm.pps.StartJobRequest")
	proto.RegisterType((*StartJobResponse)(nil), "pachyderm.pps.StartJobResponse")
	proto.RegisterType((*FinishJobRequest)(nil), "pachyderm.pps.FinishJobRequest")
	proto.RegisterEnum("pachyderm.pps.OutputStream", OutputStream_name, OutputStream_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for JobAPI service

type JobAPIClient interface {
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	InspectJob(ctx context.Context, in *InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
}

type jobAPIClient struct {
	cc *grpc.ClientConn
}

func NewJobAPIClient(cc *grpc.ClientConn) JobAPIClient {
	return &jobAPIClient{cc}
}

func (c *jobAPIClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) InspectJob(ctx context.Context, in *InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/ListJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobAPI service

type JobAPIServer interface {
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	InspectJob(context.Context, *InspectJobRequest) (*JobInfo, error)
	ListJob(context.Context, *ListJobRequest) (*JobInfos, error)
}

func RegisterJobAPIServer(s *grpc.Server, srv JobAPIServer) {
	s.RegisterService(&_JobAPI_serviceDesc, srv)
}

func _JobAPI_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).CreateJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).InspectJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).ListJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _JobAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.JobAPI",
	HandlerType: (*JobAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobAPI_CreateJob_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _JobAPI_InspectJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _JobAPI_ListJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for PipelineAPI service

type PipelineAPIClient interface {
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	InspectPipeline(ctx context.Context, in *InspectPipelineRequest, opts ...grpc.CallOption) (*PipelineInfo, error)
	ListPipeline(ctx context.Context, in *ListPipelineRequest, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type pipelineAPIClient struct {
	cc *grpc.ClientConn
}

func NewPipelineAPIClient(cc *grpc.ClientConn) PipelineAPIClient {
	return &pipelineAPIClient{cc}
}

func (c *pipelineAPIClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineAPIClient) InspectPipeline(ctx context.Context, in *InspectPipelineRequest, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/InspectPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineAPIClient) ListPipeline(ctx context.Context, in *ListPipelineRequest, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/ListPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineAPIClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/DeletePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PipelineAPI service

type PipelineAPIServer interface {
	CreatePipeline(context.Context, *CreatePipelineRequest) (*google_protobuf.Empty, error)
	InspectPipeline(context.Context, *InspectPipelineRequest) (*PipelineInfo, error)
	ListPipeline(context.Context, *ListPipelineRequest) (*PipelineInfos, error)
	DeletePipeline(context.Context, *DeletePipelineRequest) (*google_protobuf.Empty, error)
}

func RegisterPipelineAPIServer(s *grpc.Server, srv PipelineAPIServer) {
	s.RegisterService(&_PipelineAPI_serviceDesc, srv)
}

func _PipelineAPI_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).CreatePipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PipelineAPI_InspectPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InspectPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).InspectPipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PipelineAPI_ListPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).ListPipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PipelineAPI_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).DeletePipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PipelineAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.PipelineAPI",
	HandlerType: (*PipelineAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelineAPI_CreatePipeline_Handler,
		},
		{
			MethodName: "InspectPipeline",
			Handler:    _PipelineAPI_InspectPipeline_Handler,
		},
		{
			MethodName: "ListPipeline",
			Handler:    _PipelineAPI_ListPipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _PipelineAPI_DeletePipeline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for InternalJobAPI service

type InternalJobAPIClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type internalJobAPIClient struct {
	cc *grpc.ClientConn
}

func NewInternalJobAPIClient(cc *grpc.ClientConn) InternalJobAPIClient {
	return &internalJobAPIClient{cc}
}

func (c *internalJobAPIClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := grpc.Invoke(ctx, "/pachyderm.pps.InternalJobAPI/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalJobAPIClient) FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.InternalJobAPI/FinishJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalJobAPI service

type InternalJobAPIServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	FinishJob(context.Context, *FinishJobRequest) (*google_protobuf.Empty, error)
}

func RegisterInternalJobAPIServer(s *grpc.Server, srv InternalJobAPIServer) {
	s.RegisterService(&_InternalJobAPI_serviceDesc, srv)
}

func _InternalJobAPI_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalJobAPIServer).StartJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalJobAPI_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FinishJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalJobAPIServer).FinishJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _InternalJobAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.InternalJobAPI",
	HandlerType: (*InternalJobAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _InternalJobAPI_StartJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _InternalJobAPI_FinishJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0xcd, 0x6e, 0xda, 0x4a,
	0x14, 0xc6, 0x18, 0x08, 0x1c, 0x03, 0x21, 0x73, 0x2f, 0x89, 0x2f, 0xb9, 0xf9, 0xb9, 0xa3, 0x5b,
	0x29, 0x6d, 0x25, 0x22, 0xb9, 0x55, 0xf7, 0x09, 0x21, 0x2a, 0x55, 0x7e, 0x10, 0x10, 0x45, 0xea,
	0x06, 0x19, 0x18, 0x12, 0x57, 0xf8, 0x27, 0xb6, 0x59, 0xe4, 0x71, 0xba, 0xea, 0x13, 0x74, 0x5b,
	0xa9, 0x8f, 0x51, 0x55, 0xea, 0xb3, 0x74, 0x66, 0x30, 0xc1, 0x1e, 0x0c, 0x0d, 0xe9, 0xa2, 0x0b,
	0x16, 0x9c, 0x73, 0xe6, 0xcc, 0xf7, 0x7d, 0xf3, 0x9d, 0x23, 0x43, 0xc1, 0x71, 0xbc, 0x43, 0xfa,
	0xab, 0x3a, 0xae, 0xed, 0xdb, 0xa8, 0xe0, 0xe8, 0xfd, 0xdb, 0xfb, 0x01, 0x71, 0xcd, 0x2a, 0x0d,
	0x56, 0xb6, 0x6f, 0x6c, 0xfb, 0x66, 0x44, 0x0e, 0x79, 0xb2, 0x37, 0x1e, 0x1e, 0x12, 0xd3, 0xf1,
	0xef, 0x27, 0xb5, 0x95, 0x82, 0x33, 0xa4, 0x47, 0x87, 0xc1, 0x51, 0xfc, 0x06, 0x72, 0x1d, 0x57,
	0xb7, 0xbc, 0xa1, 0xed, 0x9a, 0xa8, 0x00, 0x69, 0xc3, 0xd4, 0x6f, 0x88, 0x2a, 0xed, 0x4b, 0x07,
	0x39, 0xa4, 0x80, 0xdc, 0x37, 0x07, 0x6a, 0x72, 0x5f, 0xa6, 0x7f, 0x68, 0xce, 0xf3, 0x07, 0x86,
	0xa5, 0xca, 0x2c, 0x87, 0x37, 0x40, 0x7e, 0x67, 0xf7, 0x10, 0x40, 0xd2, 0x18, 0x4c, 0xca, 0xf1,
	0x37, 0x09, 0xd6, 0x68, 0xac, 0x61, 0x0d, 0x6d, 0xb4, 0x07, 0xf2, 0x07, 0xbb, 0xc7, 0x13, 0x8a,
	0x86, 0xaa, 0x11, 0x7c, 0x55, 0x76, 0xf0, 0x25, 0xe4, 0xfc, 0xe9, 0xbd, 0xf4, 0x06, 0x56, 0xa6,
	0x0a, 0x65, 0x33, 0x5c, 0xcf, 0x21, 0xeb, 0x18, 0x0e, 0x19, 0x19, 0x16, 0xe1, 0xd7, 0x2b, 0xda,
	0x96, 0x50, 0xdb, 0x0c, 0xd2, 0xa8, 0x08, 0x19, 0xef, 0x56, 0x77, 0x07, 0x9e, 0x9a, 0xa2, 0x85,
	0x29, 0xf4, 0x1f, 0xe4, 0x0d, 0xcb, 0x19, 0xfb, 0xdd, 0xbe, 0x6d, 0x9a, 0x86, 0xaf, 0xa6, 0x29,
	0x19, 0x45, 0x53, 0xaa, 0x4c, 0x81, 0x1a, 0x0f, 0x21, 0x0c, 0x05, 0x7b, 0xec, 0x87, 0x6a, 0x32,
	0xfc, 0x8a, 0x70, 0x0d, 0x7e, 0x0d, 0xd9, 0x80, 0x9a, 0x87, 0x0e, 0x20, 0x4b, 0xb9, 0x75, 0x0d,
	0xfa, 0x87, 0x12, 0x64, 0xed, 0x36, 0xe7, 0x09, 0xb2, 0x52, 0xac, 0x42, 0xf6, 0x01, 0x58, 0x1e,
	0x52, 0x96, 0x6e, 0x06, 0xd2, 0xe2, 0xcf, 0x12, 0xe4, 0xa7, 0x29, 0x2e, 0x58, 0x98, 0xa2, 0xb4,
	0x9c, 0xe2, 0x4a, 0xd2, 0xcd, 0xf4, 0x90, 0xb9, 0x1e, 0x3b, 0x00, 0x13, 0x3d, 0x5c, 0xe2, 0xd8,
	0x54, 0x23, 0x06, 0x3f, 0xc7, 0x99, 0xb6, 0x68, 0x00, 0xed, 0x82, 0x12, 0x68, 0xc1, 0xf3, 0x69,
	0xde, 0x7d, 0x96, 0xc7, 0x35, 0x28, 0x84, 0x61, 0x7b, 0x48, 0xa3, 0x5e, 0x0c, 0x02, 0x61, 0x45,
	0xb6, 0x17, 0x80, 0xe7, 0xb2, 0x7c, 0x95, 0xa0, 0x54, 0x73, 0x89, 0xee, 0x13, 0x2a, 0x54, 0x8b,
	0xdc, 0x8d, 0x89, 0xe7, 0x47, 0x59, 0x49, 0x2b, 0x18, 0x22, 0xf9, 0x58, 0x43, 0xc8, 0xb1, 0x86,
	0x48, 0x2d, 0x33, 0x84, 0xa3, 0xbb, 0xc4, 0xf2, 0x03, 0x19, 0x04, 0x43, 0x6c, 0x34, 0x2c, 0xcf,
	0x21, 0x7d, 0x3f, 0xc4, 0xe1, 0x57, 0xae, 0xc7, 0xd7, 0x50, 0x3c, 0x33, 0xbc, 0xf0, 0x91, 0x15,
	0xde, 0xbd, 0x42, 0xa7, 0x93, 0x21, 0x0f, 0x18, 0x47, 0xe0, 0x7c, 0x91, 0xa0, 0x3c, 0x91, 0x74,
	0x5a, 0xfe, 0x84, 0x0b, 0xfe, 0xac, 0xb1, 0x36, 0x03, 0x3d, 0x9f, 0x4e, 0x00, 0x97, 0xe1, 0x2f,
	0x26, 0xaf, 0xd0, 0x01, 0x1f, 0x43, 0xf9, 0x84, 0x8c, 0xc8, 0xef, 0x68, 0x83, 0x35, 0x58, 0x6f,
	0xfb, 0xba, 0xbb, 0xd2, 0x6b, 0x7f, 0xa4, 0x3e, 0x9f, 0x1d, 0xf2, 0x1c, 0xdb, 0xf2, 0xc8, 0x6a,
	0x3e, 0x17, 0xcd, 0x9a, 0x7c, 0xc4, 0xf6, 0x92, 0xe7, 0xdc, 0x81, 0xfe, 0xa1, 0xbb, 0x9b, 0xbd,
	0x15, 0xdf, 0x89, 0x8a, 0x06, 0x3c, 0xd7, 0x66, 0x11, 0x7c, 0x01, 0xa5, 0x53, 0xc3, 0x32, 0xbc,
	0xdb, 0x15, 0x88, 0xcd, 0xfa, 0x25, 0xc5, 0x7e, 0x2f, 0xee, 0x20, 0x7f, 0xc9, 0xe1, 0xb4, 0x7d,
	0x6a, 0x47, 0x13, 0x6d, 0x02, 0xba, 0xbc, 0xea, 0x34, 0xaf, 0x3a, 0xdd, 0x76, 0xa7, 0x55, 0x3f,
	0x3a, 0xef, 0x5e, 0x5c, 0x5e, 0xd4, 0x4b, 0x09, 0xa4, 0xc2, 0xdf, 0xd1, 0x78, 0xbb, 0x73, 0x42,
	0x03, 0x25, 0x29, 0x36, 0x53, 0x6f, 0xb5, 0x4a, 0x49, 0x54, 0x86, 0x8d, 0x68, 0xe6, 0xe8, 0xec,
	0xac, 0x24, 0x6b, 0xdf, 0x25, 0xc8, 0x50, 0x54, 0x47, 0xcd, 0x06, 0x3a, 0x86, 0xdc, 0xc3, 0x62,
	0x41, 0x7b, 0x02, 0x72, 0x71, 0xe5, 0x54, 0xe2, 0xde, 0x2c, 0x81, 0xde, 0x02, 0xcc, 0x26, 0x1b,
	0xed, 0x0b, 0x35, 0x73, 0x43, 0x5f, 0x59, 0xb4, 0xfc, 0x13, 0xa8, 0x06, 0x6b, 0xc1, 0xb4, 0xa3,
	0x1d, 0xa1, 0x28, 0xba, 0x05, 0x2a, 0x5b, 0xf1, 0x3d, 0x3c, 0x9c, 0xd0, 0x7e, 0x24, 0x41, 0x99,
	0xba, 0x90, 0x51, 0x6c, 0x42, 0x31, 0x3a, 0xe8, 0xe8, 0xff, 0x58, 0x9e, 0x82, 0xd7, 0x29, 0xcc,
	0xc9, 0x57, 0x41, 0x75, 0xfa, 0x55, 0x50, 0xad, 0xb3, 0xaf, 0x02, 0x0a, 0xf3, 0x1a, 0xd6, 0x85,
	0xd1, 0x43, 0xcf, 0xe2, 0x59, 0x8b, 0x3d, 0x97, 0x6e, 0xf9, 0x04, 0x6a, 0x41, 0x3e, 0x3c, 0x8e,
	0x08, 0xc7, 0x88, 0x20, 0xb6, 0xfc, 0x77, 0x49, 0x4b, 0x2a, 0x07, 0xa3, 0x1f, 0x9d, 0xe5, 0x39,
	0xfa, 0xb1, 0xa3, 0xbe, 0x98, 0xbe, 0xf6, 0x49, 0x82, 0x62, 0xc3, 0xf2, 0x89, 0x6b, 0xe9, 0xa3,
	0xc0, 0x46, 0xe7, 0x90, 0x9d, 0xce, 0x2d, 0xda, 0x15, 0xda, 0x0b, 0x5b, 0xa0, 0xb2, 0xb7, 0x30,
	0x3f, 0x19, 0x78, 0x8a, 0xf9, 0x14, 0x72, 0x0f, 0x33, 0x36, 0xe7, 0x4a, 0x71, 0xfa, 0x16, 0x23,
	0x3d, 0x4e, 0xbf, 0x97, 0xe9, 0x89, 0x5e, 0x86, 0x27, 0x5e, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x2a, 0x56, 0x1b, 0x99, 0x05, 0x0a, 0x00, 0x00,
}
