// Code generated by protoc-gen-go.
// source: pps/pps.proto
// DO NOT EDIT!

/*
Package pps is a generated protocol buffer package.

It is generated from these files:
	pps/pps.proto

It has these top-level messages:
	Transform
	JobInput
	JobOutput
	Job
	Jobs
	JobStatus
	JobInfo
	PipelineInput
	PipelineOutput
	Pipeline
	Pipelines
	CreateJobRequest
	GetJobRequest
	GetJobsByPipelineNameRequest
	StartJobRequest
	GetJobStatusRequest
	GetJobLogsRequest
	CreatePipelineRequest
	GetPipelineRequest
*/
package pps

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"
import google_protobuf1 "go.pedge.io/google-protobuf"
import google_protobuf2 "go.pedge.io/google-protobuf"
import pfs "go.pachyderm.com/pachyderm/src/pfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobStatusType int32

const (
	JobStatusType_JOB_STATUS_TYPE_NONE    JobStatusType = 0
	JobStatusType_JOB_STATUS_TYPE_CREATED JobStatusType = 1
	JobStatusType_JOB_STATUS_TYPE_STARTED JobStatusType = 2
	JobStatusType_JOB_STATUS_TYPE_ERROR   JobStatusType = 3
	JobStatusType_JOB_STATUS_TYPE_SUCCESS JobStatusType = 4
)

var JobStatusType_name = map[int32]string{
	0: "JOB_STATUS_TYPE_NONE",
	1: "JOB_STATUS_TYPE_CREATED",
	2: "JOB_STATUS_TYPE_STARTED",
	3: "JOB_STATUS_TYPE_ERROR",
	4: "JOB_STATUS_TYPE_SUCCESS",
}
var JobStatusType_value = map[string]int32{
	"JOB_STATUS_TYPE_NONE":    0,
	"JOB_STATUS_TYPE_CREATED": 1,
	"JOB_STATUS_TYPE_STARTED": 2,
	"JOB_STATUS_TYPE_ERROR":   3,
	"JOB_STATUS_TYPE_SUCCESS": 4,
}

func (x JobStatusType) String() string {
	return proto.EnumName(JobStatusType_name, int32(x))
}

type OutputStream int32

const (
	OutputStream_OUTPUT_STREAM_NONE   OutputStream = 0
	OutputStream_OUTPUT_STREAM_STDOUT OutputStream = 1
	OutputStream_OUTPUT_STREAM_STDERR OutputStream = 2
)

var OutputStream_name = map[int32]string{
	0: "OUTPUT_STREAM_NONE",
	1: "OUTPUT_STREAM_STDOUT",
	2: "OUTPUT_STREAM_STDERR",
}
var OutputStream_value = map[string]int32{
	"OUTPUT_STREAM_NONE":   0,
	"OUTPUT_STREAM_STDOUT": 1,
	"OUTPUT_STREAM_STDERR": 2,
}

func (x OutputStream) String() string {
	return proto.EnumName(OutputStream_name, int32(x))
}

type Transform struct {
	Image      string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Build      string   `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
	Dockerfile string   `protobuf:"bytes,3,opt,name=dockerfile" json:"dockerfile,omitempty"`
	Cmd        []string `protobuf:"bytes,4,rep,name=cmd" json:"cmd,omitempty"`
}

func (m *Transform) Reset()         { *m = Transform{} }
func (m *Transform) String() string { return proto.CompactTextString(m) }
func (*Transform) ProtoMessage()    {}

type JobInput struct {
	// Types that are valid to be assigned to Input:
	//	*JobInput_HostDir
	//	*JobInput_Commit
	Input isJobInput_Input `protobuf_oneof:"input"`
}

func (m *JobInput) Reset()         { *m = JobInput{} }
func (m *JobInput) String() string { return proto.CompactTextString(m) }
func (*JobInput) ProtoMessage()    {}

type isJobInput_Input interface {
	isJobInput_Input()
}

type JobInput_HostDir struct {
	HostDir string `protobuf:"bytes,1,opt,name=host_dir,oneof"`
}
type JobInput_Commit struct {
	Commit *pfs.Commit `protobuf:"bytes,2,opt,name=commit,oneof"`
}

func (*JobInput_HostDir) isJobInput_Input() {}
func (*JobInput_Commit) isJobInput_Input()  {}

func (m *JobInput) GetInput() isJobInput_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *JobInput) GetHostDir() string {
	if x, ok := m.GetInput().(*JobInput_HostDir); ok {
		return x.HostDir
	}
	return ""
}

func (m *JobInput) GetCommit() *pfs.Commit {
	if x, ok := m.GetInput().(*JobInput_Commit); ok {
		return x.Commit
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JobInput) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _JobInput_OneofMarshaler, _JobInput_OneofUnmarshaler, []interface{}{
		(*JobInput_HostDir)(nil),
		(*JobInput_Commit)(nil),
	}
}

func _JobInput_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JobInput)
	// input
	switch x := m.Input.(type) {
	case *JobInput_HostDir:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.HostDir)
	case *JobInput_Commit:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JobInput.Input has unexpected type %T", x)
	}
	return nil
}

func _JobInput_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JobInput)
	switch tag {
	case 1: // input.host_dir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Input = &JobInput_HostDir{x}
		return true, err
	case 2: // input.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.Commit)
		err := b.DecodeMessage(msg)
		m.Input = &JobInput_Commit{msg}
		return true, err
	default:
		return false, nil
	}
}

type JobOutput struct {
	// Types that are valid to be assigned to Output:
	//	*JobOutput_HostDir
	//	*JobOutput_ParentCommit
	Output isJobOutput_Output `protobuf_oneof:"output"`
}

func (m *JobOutput) Reset()         { *m = JobOutput{} }
func (m *JobOutput) String() string { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()    {}

type isJobOutput_Output interface {
	isJobOutput_Output()
}

type JobOutput_HostDir struct {
	HostDir string `protobuf:"bytes,1,opt,name=host_dir,oneof"`
}
type JobOutput_ParentCommit struct {
	ParentCommit *pfs.Commit `protobuf:"bytes,2,opt,name=parent_commit,oneof"`
}

func (*JobOutput_HostDir) isJobOutput_Output()      {}
func (*JobOutput_ParentCommit) isJobOutput_Output() {}

func (m *JobOutput) GetOutput() isJobOutput_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *JobOutput) GetHostDir() string {
	if x, ok := m.GetOutput().(*JobOutput_HostDir); ok {
		return x.HostDir
	}
	return ""
}

func (m *JobOutput) GetParentCommit() *pfs.Commit {
	if x, ok := m.GetOutput().(*JobOutput_ParentCommit); ok {
		return x.ParentCommit
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JobOutput) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _JobOutput_OneofMarshaler, _JobOutput_OneofUnmarshaler, []interface{}{
		(*JobOutput_HostDir)(nil),
		(*JobOutput_ParentCommit)(nil),
	}
}

func _JobOutput_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JobOutput)
	// output
	switch x := m.Output.(type) {
	case *JobOutput_HostDir:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.HostDir)
	case *JobOutput_ParentCommit:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParentCommit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JobOutput.Output has unexpected type %T", x)
	}
	return nil
}

func _JobOutput_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JobOutput)
	switch tag {
	case 1: // output.host_dir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Output = &JobOutput_HostDir{x}
		return true, err
	case 2: // output.parent_commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.Commit)
		err := b.DecodeMessage(msg)
		m.Output = &JobOutput_ParentCommit{msg}
		return true, err
	default:
		return false, nil
	}
}

type Job struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to Spec:
	//	*Job_Transform
	//	*Job_PipelineId
	Spec      isJob_Spec   `protobuf_oneof:"spec"`
	JobInput  []*JobInput  `protobuf:"bytes,4,rep,name=job_input" json:"job_input,omitempty"`
	JobOutput []*JobOutput `protobuf:"bytes,5,rep,name=job_output" json:"job_output,omitempty"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}

type isJob_Spec interface {
	isJob_Spec()
}

type Job_Transform struct {
	Transform *Transform `protobuf:"bytes,2,opt,name=transform,oneof"`
}
type Job_PipelineId struct {
	PipelineId string `protobuf:"bytes,3,opt,name=pipeline_id,oneof"`
}

func (*Job_Transform) isJob_Spec()  {}
func (*Job_PipelineId) isJob_Spec() {}

func (m *Job) GetSpec() isJob_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Job) GetTransform() *Transform {
	if x, ok := m.GetSpec().(*Job_Transform); ok {
		return x.Transform
	}
	return nil
}

func (m *Job) GetPipelineId() string {
	if x, ok := m.GetSpec().(*Job_PipelineId); ok {
		return x.PipelineId
	}
	return ""
}

func (m *Job) GetJobInput() []*JobInput {
	if m != nil {
		return m.JobInput
	}
	return nil
}

func (m *Job) GetJobOutput() []*JobOutput {
	if m != nil {
		return m.JobOutput
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Job) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Job_OneofMarshaler, _Job_OneofUnmarshaler, []interface{}{
		(*Job_Transform)(nil),
		(*Job_PipelineId)(nil),
	}
}

func _Job_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Job)
	// spec
	switch x := m.Spec.(type) {
	case *Job_Transform:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transform); err != nil {
			return err
		}
	case *Job_PipelineId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PipelineId)
	case nil:
	default:
		return fmt.Errorf("Job.Spec has unexpected type %T", x)
	}
	return nil
}

func _Job_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Job)
	switch tag {
	case 2: // spec.transform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transform)
		err := b.DecodeMessage(msg)
		m.Spec = &Job_Transform{msg}
		return true, err
	case 3: // spec.pipeline_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Spec = &Job_PipelineId{x}
		return true, err
	default:
		return false, nil
	}
}

type Jobs struct {
	Job []*Job `protobuf:"bytes,1,rep,name=job" json:"job,omitempty"`
}

func (m *Jobs) Reset()         { *m = Jobs{} }
func (m *Jobs) String() string { return proto.CompactTextString(m) }
func (*Jobs) ProtoMessage()    {}

func (m *Jobs) GetJob() []*Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type JobStatus struct {
	Type      JobStatusType               `protobuf:"varint,1,opt,name=type,enum=pachyderm.pps.JobStatusType" json:"type,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message   string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}

func (m *JobStatus) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type JobInfo struct {
	JobId     string       `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
	JobStatus []*JobStatus `protobuf:"bytes,2,rep,name=job_status" json:"job_status,omitempty"`
}

func (m *JobInfo) Reset()         { *m = JobInfo{} }
func (m *JobInfo) String() string { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()    {}

func (m *JobInfo) GetJobStatus() []*JobStatus {
	if m != nil {
		return m.JobStatus
	}
	return nil
}

type PipelineInput struct {
	// Types that are valid to be assigned to Input:
	//	*PipelineInput_HostDir
	//	*PipelineInput_Repo
	Input isPipelineInput_Input `protobuf_oneof:"input"`
}

func (m *PipelineInput) Reset()         { *m = PipelineInput{} }
func (m *PipelineInput) String() string { return proto.CompactTextString(m) }
func (*PipelineInput) ProtoMessage()    {}

type isPipelineInput_Input interface {
	isPipelineInput_Input()
}

type PipelineInput_HostDir struct {
	HostDir string `protobuf:"bytes,1,opt,name=host_dir,oneof"`
}
type PipelineInput_Repo struct {
	Repo *pfs.Repo `protobuf:"bytes,2,opt,name=repo,oneof"`
}

func (*PipelineInput_HostDir) isPipelineInput_Input() {}
func (*PipelineInput_Repo) isPipelineInput_Input()    {}

func (m *PipelineInput) GetInput() isPipelineInput_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PipelineInput) GetHostDir() string {
	if x, ok := m.GetInput().(*PipelineInput_HostDir); ok {
		return x.HostDir
	}
	return ""
}

func (m *PipelineInput) GetRepo() *pfs.Repo {
	if x, ok := m.GetInput().(*PipelineInput_Repo); ok {
		return x.Repo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PipelineInput) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _PipelineInput_OneofMarshaler, _PipelineInput_OneofUnmarshaler, []interface{}{
		(*PipelineInput_HostDir)(nil),
		(*PipelineInput_Repo)(nil),
	}
}

func _PipelineInput_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PipelineInput)
	// input
	switch x := m.Input.(type) {
	case *PipelineInput_HostDir:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.HostDir)
	case *PipelineInput_Repo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PipelineInput.Input has unexpected type %T", x)
	}
	return nil
}

func _PipelineInput_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PipelineInput)
	switch tag {
	case 1: // input.host_dir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Input = &PipelineInput_HostDir{x}
		return true, err
	case 2: // input.repo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.Repo)
		err := b.DecodeMessage(msg)
		m.Input = &PipelineInput_Repo{msg}
		return true, err
	default:
		return false, nil
	}
}

type PipelineOutput struct {
	// Types that are valid to be assigned to Output:
	//	*PipelineOutput_HostDir
	//	*PipelineOutput_Repo
	Output isPipelineOutput_Output `protobuf_oneof:"output"`
}

func (m *PipelineOutput) Reset()         { *m = PipelineOutput{} }
func (m *PipelineOutput) String() string { return proto.CompactTextString(m) }
func (*PipelineOutput) ProtoMessage()    {}

type isPipelineOutput_Output interface {
	isPipelineOutput_Output()
}

type PipelineOutput_HostDir struct {
	HostDir string `protobuf:"bytes,1,opt,name=host_dir,oneof"`
}
type PipelineOutput_Repo struct {
	Repo *pfs.Repo `protobuf:"bytes,2,opt,name=repo,oneof"`
}

func (*PipelineOutput_HostDir) isPipelineOutput_Output() {}
func (*PipelineOutput_Repo) isPipelineOutput_Output()    {}

func (m *PipelineOutput) GetOutput() isPipelineOutput_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *PipelineOutput) GetHostDir() string {
	if x, ok := m.GetOutput().(*PipelineOutput_HostDir); ok {
		return x.HostDir
	}
	return ""
}

func (m *PipelineOutput) GetRepo() *pfs.Repo {
	if x, ok := m.GetOutput().(*PipelineOutput_Repo); ok {
		return x.Repo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PipelineOutput) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _PipelineOutput_OneofMarshaler, _PipelineOutput_OneofUnmarshaler, []interface{}{
		(*PipelineOutput_HostDir)(nil),
		(*PipelineOutput_Repo)(nil),
	}
}

func _PipelineOutput_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PipelineOutput)
	// output
	switch x := m.Output.(type) {
	case *PipelineOutput_HostDir:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.HostDir)
	case *PipelineOutput_Repo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PipelineOutput.Output has unexpected type %T", x)
	}
	return nil
}

func _PipelineOutput_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PipelineOutput)
	switch tag {
	case 1: // output.host_dir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Output = &PipelineOutput_HostDir{x}
		return true, err
	case 2: // output.repo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pfs.Repo)
		err := b.DecodeMessage(msg)
		m.Output = &PipelineOutput_Repo{msg}
		return true, err
	default:
		return false, nil
	}
}

type Pipeline struct {
	Name           string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Transform      *Transform        `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineInput  []*PipelineInput  `protobuf:"bytes,3,rep,name=pipeline_input" json:"pipeline_input,omitempty"`
	PipelineOutput []*PipelineOutput `protobuf:"bytes,4,rep,name=pipeline_output" json:"pipeline_output,omitempty"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}

func (m *Pipeline) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *Pipeline) GetPipelineInput() []*PipelineInput {
	if m != nil {
		return m.PipelineInput
	}
	return nil
}

func (m *Pipeline) GetPipelineOutput() []*PipelineOutput {
	if m != nil {
		return m.PipelineOutput
	}
	return nil
}

type Pipelines struct {
	Pipeline []*Pipeline `protobuf:"bytes,1,rep,name=pipeline" json:"pipeline,omitempty"`
}

func (m *Pipelines) Reset()         { *m = Pipelines{} }
func (m *Pipelines) String() string { return proto.CompactTextString(m) }
func (*Pipelines) ProtoMessage()    {}

func (m *Pipelines) GetPipeline() []*Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type CreateJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *CreateJobRequest) Reset()         { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()    {}

func (m *CreateJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type GetJobRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}

type GetJobsByPipelineNameRequest struct {
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name" json:"pipeline_name,omitempty"`
}

func (m *GetJobsByPipelineNameRequest) Reset()         { *m = GetJobsByPipelineNameRequest{} }
func (m *GetJobsByPipelineNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobsByPipelineNameRequest) ProtoMessage()    {}

type StartJobRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
}

func (m *StartJobRequest) Reset()         { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()    {}

type GetJobStatusRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
}

func (m *GetJobStatusRequest) Reset()         { *m = GetJobStatusRequest{} }
func (m *GetJobStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobStatusRequest) ProtoMessage()    {}

type GetJobLogsRequest struct {
	JobId        string       `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
	OutputStream OutputStream `protobuf:"varint,2,opt,name=output_stream,enum=pachyderm.pps.OutputStream" json:"output_stream,omitempty"`
}

func (m *GetJobLogsRequest) Reset()         { *m = GetJobLogsRequest{} }
func (m *GetJobLogsRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobLogsRequest) ProtoMessage()    {}

type CreatePipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *CreatePipelineRequest) Reset()         { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()    {}

func (m *CreatePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type GetPipelineRequest struct {
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name" json:"pipeline_name,omitempty"`
}

func (m *GetPipelineRequest) Reset()         { *m = GetPipelineRequest{} }
func (m *GetPipelineRequest) String() string { return proto.CompactTextString(m) }
func (*GetPipelineRequest) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("pachyderm.pps.JobStatusType", JobStatusType_name, JobStatusType_value)
	proto.RegisterEnum("pachyderm.pps.OutputStream", OutputStream_name, OutputStream_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for JobAPI service

type JobAPIClient interface {
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	GetJobsByPipelineName(ctx context.Context, in *GetJobsByPipelineNameRequest, opts ...grpc.CallOption) (*Jobs, error)
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobStatus, error)
	GetJobLogs(ctx context.Context, in *GetJobLogsRequest, opts ...grpc.CallOption) (JobAPI_GetJobLogsClient, error)
}

type jobAPIClient struct {
	cc *grpc.ClientConn
}

func NewJobAPIClient(cc *grpc.ClientConn) JobAPIClient {
	return &jobAPIClient{cc}
}

func (c *jobAPIClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) GetJobsByPipelineName(ctx context.Context, in *GetJobsByPipelineNameRequest, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/GetJobsByPipelineName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := grpc.Invoke(ctx, "/pachyderm.pps.JobAPI/GetJobStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) GetJobLogs(ctx context.Context, in *GetJobLogsRequest, opts ...grpc.CallOption) (JobAPI_GetJobLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_JobAPI_serviceDesc.Streams[0], c.cc, "/pachyderm.pps.JobAPI/GetJobLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobAPIGetJobLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobAPI_GetJobLogsClient interface {
	Recv() (*google_protobuf2.BytesValue, error)
	grpc.ClientStream
}

type jobAPIGetJobLogsClient struct {
	grpc.ClientStream
}

func (x *jobAPIGetJobLogsClient) Recv() (*google_protobuf2.BytesValue, error) {
	m := new(google_protobuf2.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for JobAPI service

type JobAPIServer interface {
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	GetJobsByPipelineName(context.Context, *GetJobsByPipelineNameRequest) (*Jobs, error)
	StartJob(context.Context, *StartJobRequest) (*google_protobuf.Empty, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*JobStatus, error)
	GetJobLogs(*GetJobLogsRequest, JobAPI_GetJobLogsServer) error
}

func RegisterJobAPIServer(s *grpc.Server, srv JobAPIServer) {
	s.RegisterService(&_JobAPI_serviceDesc, srv)
}

func _JobAPI_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).CreateJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).GetJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_GetJobsByPipelineName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetJobsByPipelineNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).GetJobsByPipelineName(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).StartJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(JobAPIServer).GetJobStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _JobAPI_GetJobLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobAPIServer).GetJobLogs(m, &jobAPIGetJobLogsServer{stream})
}

type JobAPI_GetJobLogsServer interface {
	Send(*google_protobuf2.BytesValue) error
	grpc.ServerStream
}

type jobAPIGetJobLogsServer struct {
	grpc.ServerStream
}

func (x *jobAPIGetJobLogsServer) Send(m *google_protobuf2.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

var _JobAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.JobAPI",
	HandlerType: (*JobAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobAPI_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobAPI_GetJob_Handler,
		},
		{
			MethodName: "GetJobsByPipelineName",
			Handler:    _JobAPI_GetJobsByPipelineName_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _JobAPI_StartJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _JobAPI_GetJobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobLogs",
			Handler:       _JobAPI_GetJobLogs_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for PipelineAPI service

type PipelineAPIClient interface {
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	GetAllPipelines(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Pipelines, error)
}

type pipelineAPIClient struct {
	cc *grpc.ClientConn
}

func NewPipelineAPIClient(cc *grpc.ClientConn) PipelineAPIClient {
	return &pipelineAPIClient{cc}
}

func (c *pipelineAPIClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineAPIClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/GetPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineAPIClient) GetAllPipelines(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Pipelines, error) {
	out := new(Pipelines)
	err := grpc.Invoke(ctx, "/pachyderm.pps.PipelineAPI/GetAllPipelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PipelineAPI service

type PipelineAPIServer interface {
	CreatePipeline(context.Context, *CreatePipelineRequest) (*Pipeline, error)
	GetPipeline(context.Context, *GetPipelineRequest) (*Pipeline, error)
	GetAllPipelines(context.Context, *google_protobuf.Empty) (*Pipelines, error)
}

func RegisterPipelineAPIServer(s *grpc.Server, srv PipelineAPIServer) {
	s.RegisterService(&_PipelineAPI_serviceDesc, srv)
}

func _PipelineAPI_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).CreatePipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PipelineAPI_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).GetPipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PipelineAPI_GetAllPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PipelineAPIServer).GetAllPipelines(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PipelineAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.PipelineAPI",
	HandlerType: (*PipelineAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelineAPI_CreatePipeline_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _PipelineAPI_GetPipeline_Handler,
		},
		{
			MethodName: "GetAllPipelines",
			Handler:    _PipelineAPI_GetAllPipelines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
