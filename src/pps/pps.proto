syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package pps;

enum PipelineRunStatusType {
  PIPELINE_RUN_STATUS_TYPE_NONE = 0;
  PIPELINE_RUN_STATUS_TYPE_ADDED = 1;
  PIPELINE_RUN_STATUS_TYPE_STARTED = 2;
  PIPELINE_RUN_STATUS_TYPE_ERROR = 3;
  PIPELINE_RUN_STATUS_TYPE_SUCCESS = 4;
}

message PipelineRunStatus {
  PipelineRunStatusType pipeline_run_status_type = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message Input {
  repeated string node = 1;
  map<string, string> host = 2;
  map<string, string> pfs = 3;
}

message Output {
  map<string, string> host = 1;
  map<string, string> pfs = 2;
}

message Node {
  string service = 1;
  Input input = 2;
  Output output = 3;
  repeated string run = 4;
}

message DockerService {
  string image = 1;
  string build = 2;
  string dockerfile = 3;
}

message Element {
  string name = 1;
  oneof typed_element {
    Node node = 2;
    DockerService docker_service = 3;
  }
}

message Pipeline {
  map<string, Element> name_to_element = 1;
}

message GithubPipelineSource {
  string context_dir = 1;
  string user = 2;
  string repository = 3;
  string branch = 4;
  string access_token = 5;
}

message PipelineSource {
  oneof typed_pipeline_source {
    GithubPipelineSource github_pipeline_source = 1;
  }
}

message Version {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 micro = 3;
  string additional = 4;
}

message GetVersionResponse {
  Version version = 1;
}

message GetPipelineRequest {
  PipelineSource pipeline_source = 1;
}

message GetPipelineResponse {
  Pipeline pipeline = 1;
}

message StartPipelineRunRequest {
  PipelineSource pipeline_source = 1;
}

message StartPipelineRunResponse {
  string pipeline_run_id = 1;
}

message GetPipelineRunStatusRequest {
  string pipeline_run_id = 1;
}

message GetPipelineRunStatusResponse {
  PipelineRunStatus pipeline_run_status = 1;
}

service Api {
  rpc GetVersion(google.protobuf.Empty) returns (GetVersionResponse) {}
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {} 
  rpc StartPipelineRun(StartPipelineRunRequest) returns (StartPipelineRunResponse) {}
  rpc GetPipelineRunStatus(GetPipelineRunStatusRequest) returns (GetPipelineRunStatusResponse) {}
}
