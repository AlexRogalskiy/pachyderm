syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "pfs/pfs.proto";

package pachyderm.pps;

option go_package = "pps";

enum JobStatusType {
  JOB_STATUS_TYPE_NONE = 0;
  JOB_STATUS_TYPE_CREATED = 1;
  JOB_STATUS_TYPE_STARTED = 2;
  JOB_STATUS_TYPE_ERROR = 3;
  JOB_STATUS_TYPE_SUCCESS = 4;
}

enum OutputStream {
  OUTPUT_STREAM_NONE = 0;
  OUTPUT_STREAM_STDOUT = 1;
  OUTPUT_STREAM_STDERR = 2;
}

message Transform {
  string image = 1;
  string build = 2;
  string dockerfile = 3;
  repeated string cmd = 4;
}

message JobInput {
  oneof input {
    string host_dir = 1;
    pfs.Commit commit = 2;
  }
}

message JobOutput {
  oneof input {
    string host_dir = 1;
    pfs.Commit parent_commit = 2;
  }
}

message Job {
  string id = 1;
  oneof spec {
    Transform transform = 2;
    string pipeline_id = 3;
  }
  repeated JobInput job_input = 4;
  repeated JobOutput job_output = 5;
}

message Jobs {
  repeated Job job = 1;
}

message JobStatus {
  JobStatusType type = 1;
  google.protobuf.Timestamp timestamp = 2;
  string message = 3;
}

message JobInfo {
  string job_id = 1;
  repeated JobStatus job_status = 2;
}

message PipelineInput {
  oneof input {
    string host_dir = 1;
    pfs.Repo repo = 2;
  }
}

message PipelineOutput {
  oneof output {
    string host_dir = 1;
    pfs.Repo repo = 2;
  }
}

message Pipeline {
  string name = 1;
  Transform transform = 2;
  repeated PipelineInput pipeline_input = 3;
  repeated PipelineOutput pipeline_output = 4;
}

message Pipelines {
  repeated Pipeline pipeline = 1;
}

message CreateJobRequest {
  Job job = 1;
}

message GetJobRequest {
  string job_id = 1;
}

message GetJobsByPipelineNameRequest {
  string pipeline_name = 1;
}

message StartJobRequest {
  string job_id = 1;
}

message GetJobStatusRequest {
  string job_id = 1;
}

message GetJobLogsRequest {
  string job_id = 1;
  OutputStream output_stream = 2;
}

message CreatePipelineRequest {
  Pipeline pipeline = 1;
}

message GetPipelineRequest {
  string pipeline_name = 1;
}

service API {
  rpc CreateJob(CreateJobRequest) returns (Job) {}
  rpc GetJob(GetJobRequest) returns (Job) {}
  rpc GetJobsByPipelineName(GetJobsByPipelineNameRequest) returns (Jobs) {}
  rpc StartJob(StartJobRequest) returns (google.protobuf.Empty) {}
  rpc GetJobStatus(GetJobStatusRequest) returns (JobStatus) {}
  rpc GetJobLogs(GetJobLogsRequest) returns (stream google.protobuf.BytesValue) {}
  rpc CreatePipeline(CreatePipelineRequest) returns (Pipeline) {}
  rpc GetPipeline(GetPipelineRequest) returns (Pipeline) {}
  rpc GetAllPipelines(google.protobuf.Empty) returns (Pipelines) {}
}
