syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "pfs/pfs.proto";
import "pps/pps.proto";

package pachyderm.pps.persist;

option go_package = "persist";

message JobInfo {
  string job_id = 1;
  pps.Transform transform = 2;
  string pipeline_name = 3;
  uint64 shards = 4;
  repeated pfs.Commit input_commit = 5;
  pps.Job parent_job = 6;
  google.protobuf.Timestamp created_at = 7;
  string commit_index = 8;
}

message JobInfos {
  repeated JobInfo job_info = 1;
}

message JobOutput {
  string job_id = 1;
  pfs.Commit output_commit = 2;
}

message PipelineInfo {
  string pipeline_name = 1;
  pachyderm.pps.Transform transform = 2;
  uint64 shards = 3;
  repeated pfs.Repo input_repo = 4;
  pfs.Repo output_repo = 5;
  google.protobuf.Timestamp created_at = 6;
}

message PipelineInfos {
  repeated PipelineInfo pipeline_info = 1;
}

service API {
  // job_id cannot be set
  // timestamp cannot be set
  rpc CreateJobInfo(JobInfo) returns (JobInfo) {}
  rpc GetJobInfo(pachyderm.pps.Job) returns (JobInfo) {}
  // ordered by time, latest to earliest
  rpc ListJobInfos(pachyderm.pps.ListJobRequest) returns (JobInfos) {}
  // should only be called when rolling back if a Job does not start!
  rpc DeleteJobInfo(pachyderm.pps.Job) returns (google.protobuf.Empty) {}
  rpc CreateJobOutput(JobOutput) returns (JobOutput) {}
  rpc GetJobOutput(pachyderm.pps.Job) returns (JobOutput) {}
  rpc CreatePipelineInfo(PipelineInfo) returns (PipelineInfo) {}
  rpc GetPipelineInfo(pachyderm.pps.Pipeline) returns (PipelineInfo) {}
  // ordered by time, latest to earliest
  rpc ListPipelineInfos(google.protobuf.Empty) returns (PipelineInfos) {}
  rpc DeletePipelineInfo(pachyderm.pps.Pipeline) returns (google.protobuf.Empty) {}
}
