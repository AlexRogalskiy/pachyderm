// Code generated by protoc-gen-go.
// source: pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	pps/persist/persist.proto

It has these top-level messages:
	JobInfo
	JobInfos
	JobOutput
	PipelineInfo
	PipelineInfos
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"
import google_protobuf1 "go.pedge.io/google-protobuf"
import pfs "github.com/pachyderm/pachyderm/src/pfs"
import pachyderm_pps "github.com/pachyderm/pachyderm/src/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobInfo struct {
	JobId        string                      `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
	Transform    *pachyderm_pps.Transform    `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineName string                      `protobuf:"bytes,3,opt,name=pipeline_name" json:"pipeline_name,omitempty"`
	Shards       uint64                      `protobuf:"varint,4,opt,name=shards" json:"shards,omitempty"`
	InputCommit  []*pfs.Commit               `protobuf:"bytes,5,rep,name=input_commit" json:"input_commit,omitempty"`
	OutputParent *pfs.Commit                 `protobuf:"bytes,6,opt,name=output_parent" json:"output_parent,omitempty"`
	CreatedAt    *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=created_at" json:"created_at,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetInputCommit() []*pfs.Commit {
	if m != nil {
		return m.InputCommit
	}
	return nil
}

func (m *JobInfo) GetOutputParent() *pfs.Commit {
	if m != nil {
		return m.OutputParent
	}
	return nil
}

func (m *JobInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type JobOutput struct {
	JobId        string      `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit" json:"output_commit,omitempty"`
}

func (m *JobOutput) Reset()                    { *m = JobOutput{} }
func (m *JobOutput) String() string            { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()               {}
func (*JobOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobOutput) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type PipelineInfo struct {
	PipelineName string                      `protobuf:"bytes,1,opt,name=pipeline_name" json:"pipeline_name,omitempty"`
	Transform    *pachyderm_pps.Transform    `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Shards       uint64                      `protobuf:"varint,3,opt,name=shards" json:"shards,omitempty"`
	InputRepo    []*pfs.Repo                 `protobuf:"bytes,4,rep,name=input_repo" json:"input_repo,omitempty"`
	OutputRepo   *pfs.Repo                   `protobuf:"bytes,5,opt,name=output_repo" json:"output_repo,omitempty"`
	CreatedAt    *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=created_at" json:"created_at,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PipelineInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetInputRepo() []*pfs.Repo {
	if m != nil {
		return m.InputRepo
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*JobInfo)(nil), "pachyderm.pps.persist.JobInfo")
	proto.RegisterType((*JobInfos)(nil), "pachyderm.pps.persist.JobInfos")
	proto.RegisterType((*JobOutput)(nil), "pachyderm.pps.persist.JobOutput")
	proto.RegisterType((*PipelineInfo)(nil), "pachyderm.pps.persist.PipelineInfo")
	proto.RegisterType((*PipelineInfos)(nil), "pachyderm.pps.persist.PipelineInfos")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error)
	GetJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*JobOutput, error)
	GetJobOutput(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobOutput, error)
	CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*PipelineInfo, error)
	GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListJobInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*JobOutput, error) {
	out := new(JobOutput)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetJobOutput(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobOutput, error) {
	out := new(JobOutput)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetJobOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetPipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipelineInfos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListPipelineInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeletePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(context.Context, *JobInfo) (*JobInfo, error)
	GetJobInfo(context.Context, *pachyderm_pps.Job) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(context.Context, *pachyderm_pps.ListJobRequest) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(context.Context, *pachyderm_pps.Job) (*google_protobuf.Empty, error)
	CreateJobOutput(context.Context, *JobOutput) (*JobOutput, error)
	GetJobOutput(context.Context, *pachyderm_pps.Job) (*JobOutput, error)
	CreatePipelineInfo(context.Context, *PipelineInfo) (*PipelineInfo, error)
	GetPipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(context.Context, *google_protobuf.Empty) (*PipelineInfos, error)
	DeletePipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*google_protobuf.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetJobInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListJobInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListJobInfos(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeleteJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeleteJobInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreateJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobOutput(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetJobOutput(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreatePipelineInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetPipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetPipelineInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListPipelineInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListPipelineInfos(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeletePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeletePipelineInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.persist.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobInfo",
			Handler:    _API_CreateJobInfo_Handler,
		},
		{
			MethodName: "GetJobInfo",
			Handler:    _API_GetJobInfo_Handler,
		},
		{
			MethodName: "ListJobInfos",
			Handler:    _API_ListJobInfos_Handler,
		},
		{
			MethodName: "DeleteJobInfo",
			Handler:    _API_DeleteJobInfo_Handler,
		},
		{
			MethodName: "CreateJobOutput",
			Handler:    _API_CreateJobOutput_Handler,
		},
		{
			MethodName: "GetJobOutput",
			Handler:    _API_GetJobOutput_Handler,
		},
		{
			MethodName: "CreatePipelineInfo",
			Handler:    _API_CreatePipelineInfo_Handler,
		},
		{
			MethodName: "GetPipelineInfo",
			Handler:    _API_GetPipelineInfo_Handler,
		},
		{
			MethodName: "ListPipelineInfos",
			Handler:    _API_ListPipelineInfos_Handler,
		},
		{
			MethodName: "DeletePipelineInfo",
			Handler:    _API_DeletePipelineInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0xd3, 0xba, 0xf5, 0x24, 0xa6, 0x62, 0xa5, 0x82, 0x31, 0x6a, 0x1b, 0x0c, 0x07,
	0x24, 0xa4, 0x0d, 0x2a, 0x37, 0x04, 0x42, 0xb4, 0x40, 0x55, 0x40, 0x22, 0x2d, 0x95, 0x90, 0xb8,
	0x04, 0x27, 0x59, 0xb7, 0x46, 0xb1, 0x77, 0xf1, 0x6e, 0x0e, 0x7d, 0x1c, 0x1e, 0x89, 0x77, 0xe0,
	0x41, 0x18, 0xaf, 0xd7, 0x89, 0x9d, 0x3f, 0xc4, 0xe2, 0x94, 0xec, 0xce, 0xec, 0x37, 0xdf, 0xfc,
	0x66, 0x0c, 0xf7, 0x85, 0x90, 0x5d, 0xc1, 0x52, 0x19, 0x49, 0x55, 0xfc, 0x52, 0x91, 0x72, 0xc5,
	0xc9, 0x9e, 0x08, 0x86, 0xd7, 0x37, 0x23, 0x96, 0xc6, 0x14, 0x93, 0xa8, 0x09, 0x7a, 0x0f, 0xae,
	0x38, 0xbf, 0x1a, 0xb3, 0xae, 0x4e, 0x1a, 0x4c, 0xc2, 0x2e, 0x8b, 0x85, 0xba, 0xc9, 0xdf, 0x78,
	0x87, 0xf3, 0x41, 0x15, 0xc5, 0x4c, 0xaa, 0x20, 0x16, 0x26, 0xc1, 0x11, 0x21, 0xd6, 0x0b, 0xe5,
	0xf4, 0x98, 0x95, 0x17, 0xe6, 0xe8, 0xff, 0x69, 0xc0, 0xf6, 0x07, 0x3e, 0x38, 0x4b, 0x42, 0x4e,
	0x6e, 0x83, 0xf5, 0x83, 0x0f, 0xfa, 0xd1, 0xc8, 0x6d, 0x74, 0x1a, 0x4f, 0x6c, 0xf2, 0x14, 0x6c,
	0x95, 0x06, 0x89, 0x0c, 0x79, 0x1a, 0xbb, 0x1b, 0x78, 0xd5, 0x3a, 0x72, 0x69, 0xd5, 0xe2, 0x65,
	0x11, 0x27, 0x7b, 0xe0, 0x88, 0x48, 0xb0, 0x71, 0x94, 0xb0, 0x7e, 0x12, 0xc4, 0xcc, 0x6d, 0x6a,
	0x0d, 0xd4, 0x94, 0xd7, 0x41, 0x3a, 0x92, 0xee, 0x26, 0x9e, 0x37, 0xc9, 0x43, 0x68, 0x47, 0x89,
	0x98, 0xa8, 0xfe, 0x90, 0xc7, 0x71, 0xa4, 0xdc, 0xad, 0x4e, 0x13, 0x65, 0x5b, 0x34, 0x33, 0x78,
	0xa2, 0xaf, 0x88, 0x0f, 0x0e, 0x9f, 0xa8, 0x2c, 0x47, 0x04, 0x29, 0x4b, 0x94, 0x6b, 0xe9, 0xd2,
	0x95, 0x1c, 0x0a, 0x30, 0x4c, 0x59, 0xa0, 0xd8, 0xa8, 0x1f, 0x28, 0x77, 0x5b, 0x27, 0x78, 0x34,
	0x47, 0x41, 0x0b, 0x14, 0xf4, 0xb2, 0x40, 0xe1, 0xbf, 0x84, 0x1d, 0xd3, 0xa5, 0x24, 0xcf, 0x60,
	0x47, 0xb7, 0x89, 0x07, 0x6c, 0x34, 0x2b, 0x7f, 0x40, 0x97, 0x82, 0xa7, 0xe6, 0x89, 0xff, 0x1a,
	0x6c, 0xfc, 0xfb, 0x59, 0x9b, 0x5a, 0xa0, 0x34, 0xb3, 0x6b, 0x5a, 0xda, 0x58, 0xb0, 0xeb, 0xff,
	0x6e, 0x40, 0xbb, 0x67, 0xe8, 0x68, 0xd4, 0x0b, 0xb4, 0xfe, 0x83, 0xf8, 0x0c, 0x6d, 0x53, 0xa3,
	0xdd, 0x07, 0xc8, 0xd1, 0xa6, 0x4c, 0x70, 0xc4, 0x9d, 0x75, 0x66, 0x6b, 0x17, 0x17, 0x78, 0x41,
	0x0e, 0xa0, 0x65, 0x7c, 0xea, 0xf8, 0x96, 0x56, 0x2f, 0xc5, 0xab, 0x48, 0xad, 0xb5, 0x48, 0x3f,
	0x82, 0x53, 0x6e, 0x49, 0x92, 0x17, 0xa5, 0x9e, 0x4a, 0x70, 0x1f, 0xad, 0x80, 0x5b, 0x7e, 0x7c,
	0xf4, 0xcb, 0x82, 0xe6, 0x9b, 0xde, 0x19, 0x39, 0x07, 0xe7, 0x44, 0x9b, 0x28, 0x76, 0x72, 0xcd,
	0x68, 0xbc, 0x75, 0xa3, 0xbb, 0x45, 0x8e, 0x01, 0x4e, 0x99, 0x2a, 0xf4, 0xc8, 0x5c, 0x3e, 0xde,
	0xd7, 0xd0, 0xe8, 0x41, 0xfb, 0x13, 0xde, 0x4c, 0x57, 0x68, 0x7f, 0xee, 0x85, 0x09, 0x5e, 0xb0,
	0x9f, 0x13, 0xa4, 0xe3, 0x1d, 0xfe, 0x5b, 0x50, 0xa2, 0xe2, 0x2b, 0x70, 0xde, 0xb2, 0x31, 0x9b,
	0x35, 0xba, 0xcc, 0xd8, 0xdd, 0x05, 0xfc, 0xef, 0xb2, 0x2f, 0x1f, 0x9f, 0x7f, 0x85, 0xdd, 0x29,
	0x27, 0xb3, 0x97, 0x9d, 0xd5, 0x45, 0xf3, 0x0c, 0x6f, 0x6d, 0x06, 0x0a, 0xbf, 0x87, 0x76, 0x4e,
	0xcb, 0xa8, 0x2e, 0xb3, 0x55, 0x47, 0xe7, 0x3b, 0x90, 0xdc, 0x60, 0x65, 0xed, 0xeb, 0xec, 0x82,
	0x57, 0x27, 0x09, 0x2b, 0x9c, 0xc3, 0x2e, 0x3a, 0xad, 0xc8, 0xdf, 0x9b, 0x7b, 0x59, 0x04, 0xeb,
	0x4a, 0x7e, 0x81, 0x3b, 0xd9, 0x24, 0xab, 0x6b, 0xbd, 0x62, 0x08, 0xde, 0xe3, 0x1a, 0x9a, 0xd9,
	0xa4, 0x4f, 0x81, 0xe4, 0x93, 0xae, 0x67, 0x75, 0xe5, 0xcc, 0x8f, 0xed, 0x6f, 0xdb, 0xa6, 0xc6,
	0xc0, 0xd2, 0xc1, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x3e, 0xe2, 0xb8, 0x4c, 0x06,
	0x00, 0x00,
}
