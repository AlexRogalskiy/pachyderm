// Code generated by protoc-gen-go.
// source: pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	pps/persist/persist.proto

It has these top-level messages:
	Job
	JobStatus
	JobLog
	Pipeline
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"
import pachyderm_pps "go.pachyderm.com/pachyderm/src/pps"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Job struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to Spec:
	//	*Job_Transform
	//	*Job_PipelineId
	Spec      isJob_Spec                 `protobuf_oneof:"spec"`
	JobInput  []*pachyderm_pps.JobInput  `protobuf:"bytes,4,rep,name=job_input" json:"job_input,omitempty"`
	JobOutput []*pachyderm_pps.JobOutput `protobuf:"bytes,5,rep,name=job_output" json:"job_output,omitempty"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}

type isJob_Spec interface {
	isJob_Spec()
}

type Job_Transform struct {
	Transform *pachyderm_pps.Transform `protobuf:"bytes,2,opt,name=transform,oneof"`
}
type Job_PipelineId struct {
	PipelineId string `protobuf:"bytes,3,opt,name=pipeline_id,oneof"`
}

func (*Job_Transform) isJob_Spec()  {}
func (*Job_PipelineId) isJob_Spec() {}

func (m *Job) GetSpec() isJob_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Job) GetTransform() *pachyderm_pps.Transform {
	if x, ok := m.GetSpec().(*Job_Transform); ok {
		return x.Transform
	}
	return nil
}

func (m *Job) GetPipelineId() string {
	if x, ok := m.GetSpec().(*Job_PipelineId); ok {
		return x.PipelineId
	}
	return ""
}

func (m *Job) GetJobInput() []*pachyderm_pps.JobInput {
	if m != nil {
		return m.JobInput
	}
	return nil
}

func (m *Job) GetJobOutput() []*pachyderm_pps.JobOutput {
	if m != nil {
		return m.JobOutput
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Job) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Job_OneofMarshaler, _Job_OneofUnmarshaler, []interface{}{
		(*Job_Transform)(nil),
		(*Job_PipelineId)(nil),
	}
}

func _Job_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Job)
	// spec
	switch x := m.Spec.(type) {
	case *Job_Transform:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transform); err != nil {
			return err
		}
	case *Job_PipelineId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PipelineId)
	case nil:
	default:
		return fmt.Errorf("Job.Spec has unexpected type %T", x)
	}
	return nil
}

func _Job_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Job)
	switch tag {
	case 2: // spec.transform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pachyderm_pps.Transform)
		err := b.DecodeMessage(msg)
		m.Spec = &Job_Transform{msg}
		return true, err
	case 3: // spec.pipeline_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Spec = &Job_PipelineId{x}
		return true, err
	default:
		return false, nil
	}
}

type JobStatus struct {
	Id        string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	JobId     string                      `protobuf:"bytes,2,opt,name=job_id" json:"job_id,omitempty"`
	Type      pachyderm_pps.JobStatusType `protobuf:"varint,3,opt,name=type,enum=pachyderm.pps.JobStatusType" json:"type,omitempty"`
	Timestamp *google_protobuf.Timestamp  `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Message   string                      `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}

func (m *JobStatus) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type JobLog struct {
	Id           string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	JobId        string                     `protobuf:"bytes,2,opt,name=job_id" json:"job_id,omitempty"`
	Timestamp    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OutputStream pachyderm_pps.OutputStream `protobuf:"varint,4,opt,name=output_stream,enum=pachyderm.pps.OutputStream" json:"output_stream,omitempty"`
	Value        []byte                     `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *JobLog) Reset()         { *m = JobLog{} }
func (m *JobLog) String() string { return proto.CompactTextString(m) }
func (*JobLog) ProtoMessage()    {}

func (m *JobLog) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Pipeline struct {
	Id             string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PreviousId     string                          `protobuf:"bytes,2,opt,name=previous_id" json:"previous_id,omitempty"`
	Name           string                          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Transform      *pachyderm_pps.Transform        `protobuf:"bytes,4,opt,name=transform" json:"transform,omitempty"`
	PipelineInput  []*pachyderm_pps.PipelineInput  `protobuf:"bytes,5,rep,name=pipeline_input" json:"pipeline_input,omitempty"`
	PipelineOutput []*pachyderm_pps.PipelineOutput `protobuf:"bytes,6,rep,name=pipeline_output" json:"pipeline_output,omitempty"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}

func (m *Pipeline) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *Pipeline) GetPipelineInput() []*pachyderm_pps.PipelineInput {
	if m != nil {
		return m.PipelineInput
	}
	return nil
}

func (m *Pipeline) GetPipelineOutput() []*pachyderm_pps.PipelineOutput {
	if m != nil {
		return m.PipelineOutput
	}
	return nil
}
