// Code generated by protoc-gen-go.
// source: pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	pps/persist/persist.proto

It has these top-level messages:
	Job
	Jobs
	JobStatus
	JobStatuses
	JobLog
	JobLogs
	Pipeline
	Pipelines
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"
import google_protobuf1 "go.pedge.io/google-protobuf"
import google_protobuf2 "go.pedge.io/google-protobuf"
import pachyderm_pps "go.pachyderm.com/pachyderm/src/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Job struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to Spec:
	//	*Job_Transform
	//	*Job_PipelineId
	Spec      isJob_Spec                 `protobuf_oneof:"spec"`
	JobInput  []*pachyderm_pps.JobInput  `protobuf:"bytes,4,rep,name=job_input" json:"job_input,omitempty"`
	JobOutput []*pachyderm_pps.JobOutput `protobuf:"bytes,5,rep,name=job_output" json:"job_output,omitempty"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}

type isJob_Spec interface {
	isJob_Spec()
}

type Job_Transform struct {
	Transform *pachyderm_pps.Transform `protobuf:"bytes,2,opt,name=transform,oneof"`
}
type Job_PipelineId struct {
	PipelineId string `protobuf:"bytes,3,opt,name=pipeline_id,oneof"`
}

func (*Job_Transform) isJob_Spec()  {}
func (*Job_PipelineId) isJob_Spec() {}

func (m *Job) GetSpec() isJob_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Job) GetTransform() *pachyderm_pps.Transform {
	if x, ok := m.GetSpec().(*Job_Transform); ok {
		return x.Transform
	}
	return nil
}

func (m *Job) GetPipelineId() string {
	if x, ok := m.GetSpec().(*Job_PipelineId); ok {
		return x.PipelineId
	}
	return ""
}

func (m *Job) GetJobInput() []*pachyderm_pps.JobInput {
	if m != nil {
		return m.JobInput
	}
	return nil
}

func (m *Job) GetJobOutput() []*pachyderm_pps.JobOutput {
	if m != nil {
		return m.JobOutput
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Job) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Job_OneofMarshaler, _Job_OneofUnmarshaler, []interface{}{
		(*Job_Transform)(nil),
		(*Job_PipelineId)(nil),
	}
}

func _Job_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Job)
	// spec
	switch x := m.Spec.(type) {
	case *Job_Transform:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transform); err != nil {
			return err
		}
	case *Job_PipelineId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PipelineId)
	case nil:
	default:
		return fmt.Errorf("Job.Spec has unexpected type %T", x)
	}
	return nil
}

func _Job_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Job)
	switch tag {
	case 2: // spec.transform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(pachyderm_pps.Transform)
		err := b.DecodeMessage(msg)
		m.Spec = &Job_Transform{msg}
		return true, err
	case 3: // spec.pipeline_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Spec = &Job_PipelineId{x}
		return true, err
	default:
		return false, nil
	}
}

type Jobs struct {
	Job []*Job `protobuf:"bytes,1,rep,name=job" json:"job,omitempty"`
}

func (m *Jobs) Reset()         { *m = Jobs{} }
func (m *Jobs) String() string { return proto.CompactTextString(m) }
func (*Jobs) ProtoMessage()    {}

func (m *Jobs) GetJob() []*Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type JobStatus struct {
	Id        string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	JobId     string                      `protobuf:"bytes,2,opt,name=job_id" json:"job_id,omitempty"`
	Type      pachyderm_pps.JobStatusType `protobuf:"varint,3,opt,name=type,enum=pachyderm.pps.JobStatusType" json:"type,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Message   string                      `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}

func (m *JobStatus) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type JobStatuses struct {
	JobStatus []*JobStatus `protobuf:"bytes,1,rep,name=job_status" json:"job_status,omitempty"`
}

func (m *JobStatuses) Reset()         { *m = JobStatuses{} }
func (m *JobStatuses) String() string { return proto.CompactTextString(m) }
func (*JobStatuses) ProtoMessage()    {}

func (m *JobStatuses) GetJobStatus() []*JobStatus {
	if m != nil {
		return m.JobStatus
	}
	return nil
}

type JobLog struct {
	Id           string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	JobId        string                      `protobuf:"bytes,2,opt,name=job_id" json:"job_id,omitempty"`
	Timestamp    *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OutputStream pachyderm_pps.OutputStream  `protobuf:"varint,4,opt,name=output_stream,enum=pachyderm.pps.OutputStream" json:"output_stream,omitempty"`
	Value        []byte                      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *JobLog) Reset()         { *m = JobLog{} }
func (m *JobLog) String() string { return proto.CompactTextString(m) }
func (*JobLog) ProtoMessage()    {}

func (m *JobLog) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type JobLogs struct {
	JobLog []*JobLog `protobuf:"bytes,1,rep,name=job_log" json:"job_log,omitempty"`
}

func (m *JobLogs) Reset()         { *m = JobLogs{} }
func (m *JobLogs) String() string { return proto.CompactTextString(m) }
func (*JobLogs) ProtoMessage()    {}

func (m *JobLogs) GetJobLog() []*JobLog {
	if m != nil {
		return m.JobLog
	}
	return nil
}

type Pipeline struct {
	Id             string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PreviousId     string                          `protobuf:"bytes,2,opt,name=previous_id" json:"previous_id,omitempty"`
	Name           string                          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CreatedAt      *google_protobuf1.Timestamp     `protobuf:"bytes,4,opt,name=created_at" json:"created_at,omitempty"`
	Transform      *pachyderm_pps.Transform        `protobuf:"bytes,5,opt,name=transform" json:"transform,omitempty"`
	PipelineInput  []*pachyderm_pps.PipelineInput  `protobuf:"bytes,6,rep,name=pipeline_input" json:"pipeline_input,omitempty"`
	PipelineOutput []*pachyderm_pps.PipelineOutput `protobuf:"bytes,7,rep,name=pipeline_output" json:"pipeline_output,omitempty"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}

func (m *Pipeline) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Pipeline) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *Pipeline) GetPipelineInput() []*pachyderm_pps.PipelineInput {
	if m != nil {
		return m.PipelineInput
	}
	return nil
}

func (m *Pipeline) GetPipelineOutput() []*pachyderm_pps.PipelineOutput {
	if m != nil {
		return m.PipelineOutput
	}
	return nil
}

type Pipelines struct {
	Pipeline []*Pipeline `protobuf:"bytes,1,rep,name=pipeline" json:"pipeline,omitempty"`
}

func (m *Pipelines) Reset()         { *m = Pipelines{} }
func (m *Pipelines) String() string { return proto.CompactTextString(m) }
func (*Pipelines) ProtoMessage()    {}

func (m *Pipelines) GetPipeline() []*Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	// id cannot be set
	// a JobStatus of type created will also be created
	CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	GetJobByID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Job, error)
	GetJobsByPipelineID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Jobs, error)
	// id cannot be set
	// timestamp cannot be set
	CreateJobStatus(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*JobStatus, error)
	// ordered by time, latest to earliest
	GetJobStatusesByJobID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*JobStatuses, error)
	// id cannot be set
	CreateJobLog(ctx context.Context, in *JobLog, opts ...grpc.CallOption) (*JobLog, error)
	// ordered by time, latest to earliest
	GetJobLogsByJobID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*JobLogs, error)
	// id and previous_id cannot be set
	// timestamp cannot be set
	// name must not already exist
	CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	// id and previous_id cannot be set
	// update by name, name must already exist
	UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	GetPipelineByID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Pipeline, error)
	// ordered by time, latest to earliest
	GetPipelinesByName(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Pipelines, error)
	// ordered by time, latest to earliest
	GetAllPipelines(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Pipelines, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetJobByID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetJobByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetJobsByPipelineID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetJobsByPipelineID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobStatus(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetJobStatusesByJobID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*JobStatuses, error) {
	out := new(JobStatuses)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetJobStatusesByJobID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobLog(ctx context.Context, in *JobLog, opts ...grpc.CallOption) (*JobLog, error) {
	out := new(JobLog)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetJobLogsByJobID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*JobLogs, error) {
	out := new(JobLogs)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetJobLogsByJobID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelineByID(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetPipelineByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelinesByName(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*Pipelines, error) {
	out := new(Pipelines)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetPipelinesByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllPipelines(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Pipelines, error) {
	out := new(Pipelines)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetAllPipelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// id cannot be set
	// a JobStatus of type created will also be created
	CreateJob(context.Context, *Job) (*Job, error)
	GetJobByID(context.Context, *google_protobuf2.StringValue) (*Job, error)
	GetJobsByPipelineID(context.Context, *google_protobuf2.StringValue) (*Jobs, error)
	// id cannot be set
	// timestamp cannot be set
	CreateJobStatus(context.Context, *JobStatus) (*JobStatus, error)
	// ordered by time, latest to earliest
	GetJobStatusesByJobID(context.Context, *google_protobuf2.StringValue) (*JobStatuses, error)
	// id cannot be set
	CreateJobLog(context.Context, *JobLog) (*JobLog, error)
	// ordered by time, latest to earliest
	GetJobLogsByJobID(context.Context, *google_protobuf2.StringValue) (*JobLogs, error)
	// id and previous_id cannot be set
	// timestamp cannot be set
	// name must not already exist
	CreatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	// id and previous_id cannot be set
	// update by name, name must already exist
	UpdatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	GetPipelineByID(context.Context, *google_protobuf2.StringValue) (*Pipeline, error)
	// ordered by time, latest to earliest
	GetPipelinesByName(context.Context, *google_protobuf2.StringValue) (*Pipelines, error)
	// ordered by time, latest to earliest
	GetAllPipelines(context.Context, *google_protobuf.Empty) (*Pipelines, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetJobByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetJobByID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetJobsByPipelineID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetJobsByPipelineID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetJobStatusesByJobID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetJobStatusesByJobID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreateJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobLog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetJobLogsByJobID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetJobLogsByJobID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreatePipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).UpdatePipeline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetPipelineByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetPipelineByID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetPipelinesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetPipelinesByName(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetAllPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetAllPipelines(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.persist.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _API_CreateJob_Handler,
		},
		{
			MethodName: "GetJobByID",
			Handler:    _API_GetJobByID_Handler,
		},
		{
			MethodName: "GetJobsByPipelineID",
			Handler:    _API_GetJobsByPipelineID_Handler,
		},
		{
			MethodName: "CreateJobStatus",
			Handler:    _API_CreateJobStatus_Handler,
		},
		{
			MethodName: "GetJobStatusesByJobID",
			Handler:    _API_GetJobStatusesByJobID_Handler,
		},
		{
			MethodName: "CreateJobLog",
			Handler:    _API_CreateJobLog_Handler,
		},
		{
			MethodName: "GetJobLogsByJobID",
			Handler:    _API_GetJobLogsByJobID_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _API_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _API_UpdatePipeline_Handler,
		},
		{
			MethodName: "GetPipelineByID",
			Handler:    _API_GetPipelineByID_Handler,
		},
		{
			MethodName: "GetPipelinesByName",
			Handler:    _API_GetPipelinesByName_Handler,
		},
		{
			MethodName: "GetAllPipelines",
			Handler:    _API_GetAllPipelines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
