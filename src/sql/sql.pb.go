// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sql.proto

package sql

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Query struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_08dada5055157887, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Row struct {
	Row                  map[string]*Row_Value `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_08dada5055157887, []int{1}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetRow() map[string]*Row_Value {
	if m != nil {
		return m.Row
	}
	return nil
}

type Row_Value struct {
	// Types that are valid to be assigned to Value:
	//	*Row_Value_Int
	//	*Row_Value_Float
	//	*Row_Value_Bool
	//	*Row_Value_Bytes
	//	*Row_Value_String_
	//	*Row_Value_Time
	Value                isRow_Value_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Row_Value) Reset()         { *m = Row_Value{} }
func (m *Row_Value) String() string { return proto.CompactTextString(m) }
func (*Row_Value) ProtoMessage()    {}
func (*Row_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_08dada5055157887, []int{1, 0}
}
func (m *Row_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row_Value.Merge(m, src)
}
func (m *Row_Value) XXX_Size() int {
	return m.Size()
}
func (m *Row_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Row_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Row_Value proto.InternalMessageInfo

type isRow_Value_Value interface {
	isRow_Value_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Row_Value_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof" json:"int,omitempty"`
}
type Row_Value_Float struct {
	Float float64 `protobuf:"fixed64,2,opt,name=float,proto3,oneof" json:"float,omitempty"`
}
type Row_Value_Bool struct {
	Bool bool `protobuf:"varint,3,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
}
type Row_Value_Bytes struct {
	Bytes *types.BytesValue `protobuf:"bytes,4,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}
type Row_Value_String_ struct {
	String_ string `protobuf:"bytes,5,opt,name=string,proto3,oneof" json:"string,omitempty"`
}
type Row_Value_Time struct {
	Time *types.Timestamp `protobuf:"bytes,6,opt,name=time,proto3,oneof" json:"time,omitempty"`
}

func (*Row_Value_Int) isRow_Value_Value()     {}
func (*Row_Value_Float) isRow_Value_Value()   {}
func (*Row_Value_Bool) isRow_Value_Value()    {}
func (*Row_Value_Bytes) isRow_Value_Value()   {}
func (*Row_Value_String_) isRow_Value_Value() {}
func (*Row_Value_Time) isRow_Value_Value()    {}

func (m *Row_Value) GetValue() isRow_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Row_Value) GetInt() int64 {
	if x, ok := m.GetValue().(*Row_Value_Int); ok {
		return x.Int
	}
	return 0
}

func (m *Row_Value) GetFloat() float64 {
	if x, ok := m.GetValue().(*Row_Value_Float); ok {
		return x.Float
	}
	return 0
}

func (m *Row_Value) GetBool() bool {
	if x, ok := m.GetValue().(*Row_Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *Row_Value) GetBytes() *types.BytesValue {
	if x, ok := m.GetValue().(*Row_Value_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *Row_Value) GetString_() string {
	if x, ok := m.GetValue().(*Row_Value_String_); ok {
		return x.String_
	}
	return ""
}

func (m *Row_Value) GetTime() *types.Timestamp {
	if x, ok := m.GetValue().(*Row_Value_Time); ok {
		return x.Time
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Row_Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Row_Value_Int)(nil),
		(*Row_Value_Float)(nil),
		(*Row_Value_Bool)(nil),
		(*Row_Value_Bytes)(nil),
		(*Row_Value_String_)(nil),
		(*Row_Value_Time)(nil),
	}
}

func init() {
	proto.RegisterType((*Query)(nil), "sql_v2.Query")
	proto.RegisterType((*Row)(nil), "sql_v2.Row")
	proto.RegisterMapType((map[string]*Row_Value)(nil), "sql_v2.Row.RowEntry")
	proto.RegisterType((*Row_Value)(nil), "sql_v2.Row.Value")
}

func init() { proto.RegisterFile("sql/sql.proto", fileDescriptor_08dada5055157887) }

var fileDescriptor_08dada5055157887 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0xcd, 0x74, 0x9a, 0x5a, 0x6f, 0x79, 0xa0, 0x43, 0x91, 0x21, 0x62, 0x0d, 0x5d, 0x68, 0x74,
	0x91, 0x3c, 0xf3, 0x16, 0x8a, 0xcb, 0x82, 0x10, 0xc1, 0xcd, 0x1b, 0xc5, 0x85, 0x1b, 0x49, 0xea,
	0xbc, 0xbc, 0x60, 0x9a, 0x49, 0x66, 0x26, 0x0d, 0xf9, 0x43, 0x57, 0x22, 0xf8, 0x03, 0xd2, 0x2f,
	0x91, 0x99, 0x79, 0x81, 0xa2, 0x8b, 0xc0, 0x3d, 0xb9, 0xe7, 0x9e, 0x7b, 0xcf, 0x61, 0xe0, 0x42,
	0x75, 0x75, 0xa2, 0xba, 0x3a, 0x6e, 0xa5, 0xd0, 0x82, 0x2c, 0x54, 0x57, 0x7f, 0x3d, 0xa6, 0xc1,
	0xd3, 0x52, 0x88, 0xb2, 0xe6, 0x89, 0xfd, 0x5b, 0xf4, 0x37, 0x89, 0xae, 0x0e, 0x5c, 0xe9, 0xfc,
	0xd0, 0x3a, 0x62, 0xb0, 0xf9, 0x97, 0x30, 0xc8, 0xbc, 0x6d, 0xb9, 0x54, 0xae, 0xbf, 0x7d, 0x02,
	0xfe, 0x75, 0xcf, 0xe5, 0x48, 0xd6, 0xe0, 0x77, 0xa6, 0xa0, 0x28, 0x44, 0xd1, 0x7d, 0xe6, 0xc0,
	0xf6, 0xe7, 0x0c, 0x30, 0x13, 0x03, 0x79, 0x06, 0x58, 0x8a, 0x81, 0xa2, 0x10, 0x47, 0xab, 0x74,
	0x1d, 0xbb, 0xed, 0x31, 0x13, 0x83, 0xf9, 0xde, 0x35, 0x5a, 0x8e, 0xcc, 0x10, 0x82, 0xdf, 0x08,
	0xfc, 0xcf, 0x79, 0xdd, 0x73, 0x42, 0x00, 0x57, 0x8d, 0xb6, 0x6a, 0x38, 0xf3, 0x98, 0x01, 0xe4,
	0x11, 0xf8, 0x37, 0xb5, 0xc8, 0x35, 0x9d, 0x85, 0x28, 0x42, 0x99, 0xc7, 0x1c, 0x24, 0x6b, 0x98,
	0x17, 0x42, 0xd4, 0x14, 0x87, 0x28, 0x5a, 0x66, 0x1e, 0xb3, 0x88, 0x5c, 0x81, 0x5f, 0x8c, 0x9a,
	0x2b, 0x3a, 0x0f, 0x51, 0xb4, 0x4a, 0x1f, 0xc7, 0xce, 0x4a, 0x3c, 0x59, 0x89, 0x77, 0xa6, 0x6b,
	0xb7, 0x19, 0x29, 0xcb, 0x25, 0x14, 0x16, 0x4a, 0xcb, 0xaa, 0x29, 0xa9, 0x6f, 0x7c, 0x64, 0x1e,
	0xbb, 0xc3, 0xe4, 0x12, 0xe6, 0x26, 0x1c, 0xba, 0xb0, 0x6a, 0xc1, 0x7f, 0x6a, 0x9f, 0xa6, 0xe4,
	0xcc, 0x01, 0x86, 0xb9, 0xbb, 0x07, 0xfe, 0xd1, 0xa8, 0x07, 0xef, 0x61, 0x39, 0xd9, 0x24, 0x0f,
	0x00, 0x7f, 0xe7, 0x53, 0x4a, 0xa6, 0x24, 0xcf, 0xef, 0x68, 0xd6, 0xd5, 0x2a, 0x7d, 0x78, 0x9e,
	0x8e, 0xbd, 0x8e, 0xb9, 0xfe, 0xdb, 0xd9, 0x1b, 0x94, 0xbe, 0x02, 0xfc, 0xf1, 0xfa, 0x03, 0x79,
	0x09, 0x4b, 0xd6, 0x37, 0x2e, 0xf9, 0x8b, 0x69, 0xc0, 0xc2, 0x60, 0x75, 0x36, 0xbf, 0xf5, 0x2e,
	0xd1, 0xee, 0xf5, 0x8f, 0xd3, 0x06, 0xfd, 0x3a, 0x6d, 0xd0, 0x9f, 0xd3, 0x06, 0x7d, 0x79, 0x51,
	0x56, 0xfa, 0xb6, 0x2f, 0xe2, 0xbd, 0x38, 0x24, 0x6d, 0xbe, 0xbf, 0x1d, 0xbf, 0x71, 0x79, 0x5e,
	0x1d, 0xd3, 0x44, 0xc9, 0xbd, 0x79, 0x2a, 0xc5, 0xc2, 0x7a, 0xbb, 0xfa, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x19, 0xce, 0x36, 0xa8, 0x3c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SQLClient is the client API for SQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SQLClient interface {
	RunQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (SQL_RunQueryClient, error)
}

type sQLClient struct {
	cc *grpc.ClientConn
}

func NewSQLClient(cc *grpc.ClientConn) SQLClient {
	return &sQLClient{cc}
}

func (c *sQLClient) RunQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (SQL_RunQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SQL_serviceDesc.Streams[0], "/sql_v2.SQL/RunQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &sQLRunQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SQL_RunQueryClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type sQLRunQueryClient struct {
	grpc.ClientStream
}

func (x *sQLRunQueryClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SQLServer is the server API for SQL service.
type SQLServer interface {
	RunQuery(*Query, SQL_RunQueryServer) error
}

// UnimplementedSQLServer can be embedded to have forward compatible implementations.
type UnimplementedSQLServer struct {
}

func (*UnimplementedSQLServer) RunQuery(req *Query, srv SQL_RunQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}

func RegisterSQLServer(s *grpc.Server, srv SQLServer) {
	s.RegisterService(&_SQL_serviceDesc, srv)
}

func _SQL_RunQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SQLServer).RunQuery(m, &sQLRunQueryServer{stream})
}

type SQL_RunQueryServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type sQLRunQueryServer struct {
	grpc.ServerStream
}

func (x *sQLRunQueryServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

var _SQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sql_v2.SQL",
	HandlerType: (*SQLServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunQuery",
			Handler:       _SQL_RunQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sql/sql.proto",
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSql(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Row) > 0 {
		for k := range m.Row {
			v := m.Row[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSql(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSql(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSql(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Row_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Row_Value_Int) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value_Int) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSql(dAtA, i, uint64(m.Int))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *Row_Value_Float) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value_Float) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float))))
	i--
	dAtA[i] = 0x11
	return len(dAtA) - i, nil
}
func (m *Row_Value_Bool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value_Bool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *Row_Value_Bytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value_Bytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bytes != nil {
		{
			size, err := m.Bytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSql(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Row_Value_String_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value_String_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.String_)
	copy(dAtA[i:], m.String_)
	i = encodeVarintSql(dAtA, i, uint64(len(m.String_)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *Row_Value_Time) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row_Value_Time) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSql(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintSql(dAtA []byte, offset int, v uint64) int {
	offset -= sovSql(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k, v := range m.Row {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSql(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSql(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSql(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Row_Value_Int) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSql(uint64(m.Int))
	return n
}
func (m *Row_Value_Float) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *Row_Value_Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Row_Value_Bytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Row_Value_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovSql(uint64(l))
	return n
}
func (m *Row_Value_Time) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func sovSql(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSql(x uint64) (n int) {
	return sovSql(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = make(map[string]*Row_Value)
			}
			var mapkey string
			var mapvalue *Row_Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSql
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSql
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSql
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSql
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSql
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSql
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSql
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Row_Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSql(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSql
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Row[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Row_Value_Int{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &Row_Value_Float{float64(math.Float64frombits(v))}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Row_Value_Bool{b}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BytesValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Row_Value_Bytes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Row_Value_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Row_Value_Time{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSql(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSql
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSql
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSql
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSql
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSql
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSql
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSql        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSql          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSql = fmt.Errorf("proto: unexpected end of group")
)
