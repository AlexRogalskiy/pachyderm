// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/pkg/work2/work.proto

package work2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type State int32

const (
	State_RUNNING State = 0
	State_SUCCESS State = 1
	State_FAILURE State = 2
)

var State_name = map[int32]string{
	0: "RUNNING",
	1: "SUCCESS",
	2: "FAILURE",
}

var State_value = map[string]int32{
	"RUNNING": 0,
	"SUCCESS": 1,
	"FAILURE": 2,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ba9dd6a582fc4bf, []int{0}
}

type Subtask struct {
	ID                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserData             *types.Any       `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	TaskTime             *types.Timestamp `protobuf:"bytes,3,opt,name=task_time,json=taskTime,proto3" json:"task_time,omitempty"`
	State                State            `protobuf:"varint,4,opt,name=state,proto3,enum=work2.State" json:"state,omitempty"`
	Reason               string           `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Subtask) Reset()         { *m = Subtask{} }
func (m *Subtask) String() string { return proto.CompactTextString(m) }
func (*Subtask) ProtoMessage()    {}
func (*Subtask) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba9dd6a582fc4bf, []int{0}
}
func (m *Subtask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subtask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subtask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subtask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subtask.Merge(m, src)
}
func (m *Subtask) XXX_Size() int {
	return m.Size()
}
func (m *Subtask) XXX_DiscardUnknown() {
	xxx_messageInfo_Subtask.DiscardUnknown(m)
}

var xxx_messageInfo_Subtask proto.InternalMessageInfo

func (m *Subtask) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Subtask) GetUserData() *types.Any {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *Subtask) GetTaskTime() *types.Timestamp {
	if m != nil {
		return m.TaskTime
	}
	return nil
}

func (m *Subtask) GetState() State {
	if m != nil {
		return m.State
	}
	return State_RUNNING
}

func (m *Subtask) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Claim struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba9dd6a582fc4bf, []int{1}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("work2.State", State_name, State_value)
	proto.RegisterType((*Subtask)(nil), "work2.Subtask")
	proto.RegisterType((*Claim)(nil), "work2.Claim")
}

func init() { proto.RegisterFile("server/pkg/work2/work.proto", fileDescriptor_5ba9dd6a582fc4bf) }

var fileDescriptor_5ba9dd6a582fc4bf = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xcd, 0x6a, 0x2a, 0x31,
	0x18, 0xbd, 0x99, 0x7b, 0xc7, 0x9f, 0x78, 0x29, 0x12, 0x44, 0xa6, 0x16, 0x54, 0x5c, 0x49, 0x17,
	0x09, 0xd5, 0x45, 0xd7, 0xfe, 0xb5, 0x08, 0xc5, 0x45, 0xa6, 0x6e, 0xba, 0x91, 0x8c, 0x93, 0x8e,
	0x83, 0x8e, 0x19, 0x92, 0x4c, 0x8b, 0x6f, 0xd8, 0xee, 0xfa, 0x04, 0xa5, 0xcc, 0x93, 0x94, 0x64,
	0x14, 0x8a, 0xdd, 0x84, 0xef, 0x9c, 0xef, 0x9c, 0xc3, 0xf9, 0x08, 0xbc, 0x52, 0x5c, 0xbe, 0x70,
	0x49, 0xd2, 0x6d, 0x44, 0x5e, 0x85, 0xdc, 0x0e, 0xec, 0x8b, 0x53, 0x29, 0xb4, 0x40, 0xae, 0x65,
	0x5a, 0x9d, 0x48, 0x88, 0x68, 0xc7, 0x89, 0x25, 0x83, 0xec, 0x99, 0xe8, 0x38, 0xe1, 0x4a, 0xb3,
	0x24, 0x2d, 0x74, 0xad, 0x46, 0x24, 0x22, 0x61, 0x47, 0x62, 0xa6, 0x23, 0x7b, 0x79, 0x6e, 0x63,
	0xfb, 0x43, 0xb1, 0xea, 0xbd, 0x03, 0x58, 0xf6, 0xb3, 0x40, 0x33, 0xb5, 0x45, 0x4d, 0xe8, 0xc4,
	0xa1, 0x07, 0xba, 0xa0, 0x5f, 0x1d, 0x97, 0xf2, 0xcf, 0x8e, 0x33, 0x9f, 0x52, 0x27, 0x0e, 0xd1,
	0x0d, 0xac, 0x66, 0x8a, 0xcb, 0x55, 0xc8, 0x34, 0xf3, 0x9c, 0x2e, 0xe8, 0xd7, 0x06, 0x0d, 0x5c,
	0x44, 0xe2, 0x53, 0x24, 0x1e, 0xed, 0x0f, 0xb4, 0x62, 0x64, 0x53, 0xa6, 0x19, 0xba, 0x85, 0x55,
	0x13, 0xb9, 0x32, 0xfd, 0xbc, 0xbf, 0xd6, 0xd2, 0xfa, 0x65, 0x79, 0x3c, 0x95, 0xa7, 0x15, 0x23,
	0x36, 0x10, 0xf5, 0xa0, 0xab, 0x34, 0xd3, 0xdc, 0xfb, 0xd7, 0x05, 0xfd, 0x8b, 0xc1, 0x7f, 0x6c,
	0x0f, 0xc7, 0xbe, 0xe1, 0x68, 0xb1, 0x42, 0x4d, 0x58, 0x92, 0x9c, 0x29, 0xb1, 0xf7, 0x5c, 0xd3,
	0x95, 0x1e, 0x51, 0xaf, 0x0c, 0xdd, 0xc9, 0x8e, 0xc5, 0xc9, 0x35, 0x86, 0xae, 0x35, 0xa0, 0x1a,
	0x2c, 0xd3, 0xe5, 0x62, 0x31, 0x5f, 0xdc, 0xd7, 0xff, 0x18, 0xe0, 0x2f, 0x27, 0x93, 0x99, 0xef,
	0xd7, 0x81, 0x01, 0x77, 0xa3, 0xf9, 0xc3, 0x92, 0xce, 0xea, 0xce, 0x78, 0xf4, 0x96, 0xb7, 0xc1,
	0x47, 0xde, 0x06, 0x5f, 0x79, 0x1b, 0x3c, 0x0d, 0xa3, 0x58, 0x6f, 0xb2, 0x00, 0xaf, 0x45, 0x42,
	0x52, 0xb6, 0xde, 0x1c, 0x42, 0x2e, 0x7f, 0x4e, 0x4a, 0xae, 0xc9, 0xf9, 0x5f, 0x05, 0x25, 0x7b,
	0xd5, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xed, 0x40, 0x8a, 0x30, 0xc6, 0x01, 0x00, 0x00,
}

func (m *Subtask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subtask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subtask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintWork(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintWork(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TaskTime != nil {
		{
			size, err := m.TaskTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserData != nil {
		{
			size, err := m.UserData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintWork(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintWork(dAtA []byte, offset int, v uint64) int {
	offset -= sovWork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Subtask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovWork(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	if m.TaskTime != nil {
		l = m.TaskTime.Size()
		n += 1 + l + sovWork(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovWork(uint64(m.State))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovWork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWork(x uint64) (n int) {
	return sovWork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subtask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subtask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subtask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &types.Any{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskTime == nil {
				m.TaskTime = &types.Timestamp{}
			}
			if err := m.TaskTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWork = fmt.Errorf("proto: unexpected end of group")
)
