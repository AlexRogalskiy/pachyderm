package server

import (
	"crypto/rand"
	"encoding/base64"
	goerr "errors"
	"fmt"
	"log"
	"net/http"
	"path"
	"time"

	"github.com/pachyderm/pachyderm/src/client/auth"
	"github.com/pachyderm/pachyderm/src/client/pkg/errors"
	"github.com/pachyderm/pachyderm/src/server/pkg/backoff"
	col "github.com/pachyderm/pachyderm/src/server/pkg/collection"
	"github.com/pachyderm/pachyderm/src/server/pkg/watch"

	"github.com/coreos/go-oidc"
	logrus "github.com/sirupsen/logrus"
	"golang.org/x/net/context"
	"golang.org/x/oauth2"
)

const threeMinutes = 3 * 60 // Passed to col.PutTTL (so value is in seconds)

// various oidc invalid argument errors. Use 'goerror' instead of internal
// 'errors' library b/c stack trace isn't useful
var (
	notConfigured = goerr.New("OIDC ID provider configuration not found")
	watchFailed   = goerr.New("error converting OIDC state token (has it expired?)")
	tokenDeleted  = goerr.New("error converting OIDC state token: it expired or was exercised")
)

// InternalOIDCProvider contains information about the configured OIDC ID
// provider, as well as auth information identifying Pachyderm in the ID
// provider (ClientID and ClientSecret), which Pachyderm needs to perform
// authorization with it.
type InternalOIDCProvider struct {
	// a points back to the owning auth/server.apiServer, currently just so that
	// InternalOIDCProvider can get an etcd client from it to read/write OIDC
	// state tokens to etcd during authorization
	a *apiServer

	// Provider generates the ID provider login URL returned by GetOIDCLogin
	Provider *oidc.Provider

	// Issuer is the address of the OIDC ID provider (where we exchange
	// authorization codes for access tokens and get users' email addresses in
	// Authorize())
	Issuer string

	// ClientID is Pachyderm's identifier in the OIDC ID provider (generated by
	// the ID provider, and passed to Pachyderm by the cluster administrator via
	// SetConfig)
	ClientID string

	// ClientSecret is a shared secret with the ID provider, for doing the
	// auth-code -> access-token exchange.
	ClientSecret string

	// RedirectURI is used by GetOIDCLogin to generate a login URL that redirects
	// users back to Pachyderm (must be provided by the cluster administrator via
	// SetConfig, as only they know their network topology & Pachyderm's address
	// within it, and must be included in login URLs)
	RedirectURI string

	// States is an etcd collection containing the state information associated
	// with every in-progress authentication flow. /authorization-code/callback
	// places users' ID tokens in here when they authenticate successfully, and
	// Authenticate() retrieves those ID tokens, converts them to Pachyderm
	// tokens, and returns users' Pachyderm tokens back to themâ€”all scoped to the
	// state token identifying the login flow
	States col.Collection
}

// CryptoString returns a cryptographically random, URL safe string with length
// at least n
//
// TODO(msteffen): move away from UUIDv4 towards this (current implementation of
// UUIDv4 produces UUIDs via CSPRNG, but the UUIDv4 spec doesn't guarantee that
// behavior, and we shouldn't assume it going forward)
func CryptoString(n int) string {
	var numBytes int
	for n >= base64.RawURLEncoding.EncodedLen(numBytes) {
		numBytes++
	}
	b := make([]byte, numBytes)
	_, err := rand.Read(b)
	if err != nil {
		panic("could not generate cryptographically secure random string!")
	}

	return base64.RawURLEncoding.EncodeToString(b)
}

// NewOIDCSP creates a new InternalOIDCProvider object from the given parameters
func (a *apiServer) NewOIDCSP(issuer, clientID, clientSecret, redirectURI string) (*InternalOIDCProvider, error) {
	o := &InternalOIDCProvider{
		a:            a,
		Issuer:       issuer,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RedirectURI:  redirectURI,
		States: col.NewCollection(
			a.env.GetEtcdClient(),
			path.Join(oidcAuthnPrefix),
			nil,
			&auth.SessionInfo{}, // TODO make OIDCSessionInfo
			nil,
			nil,
		),
	}
	var err error
	o.Provider, err = oidc.NewProvider(
		// Due to the implementation of go-oidc, this context is used for RPCs
		// (fetching certificates) within all future OIDC authentication flows.
		// Thus, it must not have a timeout. We ideally should create a new
		// context.WithCancel() and cancel that new context if/when o.Provider is
		// updated, but we don't have a convenient place to put that cancel() call
		// and the effect of this omission is limited to in-flight authentication
		// flows at the moment that o.Provider updated, so we're ignoring it.
		context.Background(),
		issuer)
	if err != nil {
		return nil, err
	}
	return o, nil
}

// GetOIDCLoginURL uses the given state to generate a login URL for the OIDC provider object
func (o *InternalOIDCProvider) GetOIDCLoginURL(ctx context.Context) (string, string, error) {
	if o == nil {
		return "", "", notConfigured
	}
	// TODO(msteffen, adelelopez): We *think* this 'if' block can't run anymore:
	// (if o != nil, then o.Provider != nil)
	// remove if no one reports seeing this error in 1.11.0.
	if o.Provider == nil {
		o.Provider, err = oidc.NewProvider(context.Background(), o.Issuer)
		if err != nil {
			return "", "", fmt.Errorf("provider could not be found: %v", err)
		}
	}
	state := CryptoString(30)
	nonce := CryptoString(30)
	conf := oauth2.Config{
		ClientID:     o.ClientID,
		ClientSecret: o.ClientSecret,
		RedirectURL:  o.RedirectURI,
		Endpoint:     o.Provider.Endpoint(),
		// "openid" is a required scope for OpenID Connect flows.
		// "profile" and "email" are necessary for using the email as an identifier
		Scopes: []string{oidc.ScopeOpenID, "profile", "email"},
	}

	if _, err := col.NewSTM(ctx, o.a.env.GetEtcdClient(), func(stm col.STM) error {
		return o.States.ReadWrite(stm).PutTTL(state, &auth.SessionInfo{
			Nonce: nonce, // read & verified by /authorization-code/callback
		}, threeMinutes)
	}); err != nil {
		return "", "", errors.Wrap(err, "could not create OIDC login session")
	}

	url := conf.AuthCodeURL(state,
		oauth2.SetAuthURLParam("response_type", "code"),
		oauth2.SetAuthURLParam("nonce", nonce))
	return url, state, nil
}

// OIDCStateToEmail takes the state session created for the OIDC session
// and uses it discover the email of the user who obtained the
// code (or verify that the code belongs to them). This is how
// Pachyderm currently implements authorization in a production cluster
func (o *InternalOIDCProvider) OIDCStateToEmail(ctx context.Context, state string) (string, error) {
	// reestablish watch in a loop, in case there's a watch error
	var idToken string
	if err := backoff.RetryNotify(func() error {
		watcher, err := o.States.ReadOnly(ctx).WatchOne(state)
		if err != nil {
			return watchFailed
		}
		defer watcher.Close()

		// lookup the token from the given state
		for e := range watcher.Watch() {
			if e.Type == watch.EventError {
				// reestablish watch
				return errors.Wrapf(e.Err, "error watching OIDC state token during conversion")
			} else if e.Type == watch.EventDelete {
				return tokenDeleted
			}

			// see if there's an ID token attached to the OIDC state now
			var si auth.SessionInfo
			if err := si.Unmarshal(e.Value); err != nil {
				// retry watch (maybe a valid SessionInfo will appear later?)
				return errors.Wrapf(e.Err, "error unmarshalling OIDC SessionInfo during conversion")
			}
			if si.IDToken != "" {
				idToken = si.IDToken
				return nil // success
			}
			logrus.Errorf("ID token unset in OIDC conversion watch event")
		}
		return nil
	}, backoff.New60sBackOff(), func(err error, _ time.Duration) error {
		logrus.Errorf("error watching OIDC state token during authorization: %v", err)
		if err == watchFailed || err == tokenDeleted {
			return err // don't retry, just return the error
		}
		return nil
	}); err != nil {
		return "", err
	}

	// Use the ID token passed from the authorization callback as our token source
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{
			AccessToken: idToken,
		},
	)
	userInfo, err := o.Provider.UserInfo(ctx, ts)
	if err != nil {
		return "", err
	}
	logrus.Infof("recovered user info with email: '%v'", userInfo.Email)
	return userInfo.Email, nil
}

func (a *apiServer) handleExchange(w http.ResponseWriter, req *http.Request) {
	ctx := context.Background()

	var err error
	sp := a.getOIDCSP()
	if sp == nil {
		http.Error(w, "OIDC has not been configured or was disabled", http.StatusConflict)
		return
	}
	conf := &oauth2.Config{
		ClientID:     sp.ClientID,
		ClientSecret: sp.ClientSecret,
		RedirectURL:  sp.RedirectURI,
		Scopes:       []string{"openid", "email", "profile"},
		Endpoint:     sp.Provider.Endpoint(),
	}

	code := req.URL.Query()["code"][0]
	state := req.URL.Query()["state"][0]

	logrus.Infof("session state and code are obtained")

	// Use the authorization code that is pushed to the redirect
	tok, err := conf.Exchange(ctx, code)
	if err != nil {
		logrus.Errorf("failed to exchange code: %v", err)
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	logrus.Info("exchanged OIDC code for token")

	var verifier = sp.Provider.Verifier(&oidc.Config{ClientID: conf.ClientID})
	// Extract the ID Token from OAuth2 token.
	rawIDToken, ok := tok.Extra("id_token").(string)
	if !ok {
		logrus.Errorf("missing id token")
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	logrus.Infof("raw ID Token: %v", rawIDToken)

	// Parse and verify ID Token payload.
	idToken, err := verifier.Verify(ctx, rawIDToken)
	if err != nil {
		logrus.Errorf("could not verify token: %v", err)
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	// Verify the ID token, and if it's valid, add it to this state's SessionInfo
	// in etcd, so that any concurrent Authorize() calls can discover it and give
	// the caller a Pachyderm token.
	_, err = col.NewSTM(ctx, a.env.GetEtcdClient(), func(stm col.STM) error {
		var si auth.SessionInfo
		return sp.States.ReadWrite(stm).Update(state, &si, func() error {
			if idToken.Nonce != si.Nonce {
				logrus.Errorf("IDP nonce %v did not match Pachyderm's session nonce %v",
					idToken.Nonce, si.Nonce)
				http.Error(w, "Unauthorized", http.StatusUnauthorized)
				return nil // no error in etcd read, even though the request is erroring
			}
			logrus.Infof("nonce is %v", idToken.Nonce)

			si.IDToken = rawIDToken
			logrus.Infof("saving state with access token")
			return nil
		})
	})

	fmt.Fprintf(w, "You are now logged in. Go back to the terminal to use Pachyderm!")
}

func (a *apiServer) serveOIDC() {
	// serve OIDC handler to exchange the auth code
	http.HandleFunc("/authorization-code/callback", a.handleExchange)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%v", OidcPort), nil))
}
