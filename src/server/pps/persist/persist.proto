syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "client/pfs/pfs.proto";
import "client/pps/pps.proto";

package pachyderm.pps.persist;

option go_package = "persist";

message JobInfo {
  reserved 4, 12, 13, 14, 16;
  string job_id = 1;
  pps.Transform transform = 2;
  string pipeline_name = 3;
  ParallelismSpec parallelism_spec = 18;
  repeated pps.JobInput inputs = 5;
  pps.Job parent_job = 6;
  google.protobuf.Timestamp started = 7;
  google.protobuf.Timestamp finished = 8;
  pfs.Commit output_commit = 9;
  string branch = 17;
  pps.JobState state = 10;
  string commit_index = 11;
  repeated uint64 default_shard_moduli = 15;
  uint64 shard = 19;
}

message Pod {
  string name = 1;
  pfs.Commit output_commit = 2;
}

enum ChunkState {
  // the chunk is available for a pod to work on
  UNASSIGNED = 0;
  // the chunk has been assigned to a pod
  ASSIGNED = 1;
  // the chunk has been processed successfully
  SUCCESS = 2;
  // the chunk could not be processed
  FAILED = 3;
  // the chunk has been splitted into smaller chunks, so this chunk no longer
  // needs to be processed.
  SPLITTED = 4;
}

// Chunk is a unit of work that can be assigned to a pod
message Chunk {
  string id = 1;
  // the ID of the job that the Chunk belongs to
  string job_id = 2;
  // moduli and index together specify the portion of inputs that the shard represents
  // For instance, if moduli is (2, 3, 4) and index is 15, then we have:
  // 15 = 1 * (3 * 4) + 0 * 4 + 3 * 1
  // So the shard represents the second half of input 1, the first third of input 2,
  // and the fourth quarter of input 3.
  repeated uint64 moduli = 3;
  uint64 index = 4;
  // the pod that currently owns this shard
  string owner = 5;
  // A series of pods, in chronological order, that have processed this shard
  repeated Pod pods = 6;
  ChunkState state = 7;
  // a unix timestamp representing the last time we received a heartbeat saying
  // that a pod is working on this shard
  uint64 time_touched = 8;
}

message JobInfos {
  repeated JobInfo job_info = 1;
}

message JobOutput {
  string job_id = 1;
  pfs.Commit output_commit = 2;
}

message JobState {
  string job_id = 1;
  pps.JobState state = 2;
  google.protobuf.Timestamp finished = 3; // set when state == FINISHED
}

message AddOutputCommitRequest {
  string job_id = 1;
  pfs.Commit commit = 2;
  string branch = 3;
}

message PipelineInfo {
  reserved 3;
  string pipeline_name = 1;
  pachyderm.pps.Transform transform = 2;
  ParallelismSpec parallelism_spec = 12;
  repeated pps.PipelineInput inputs = 4;
  pfs.Repo output_repo = 5;
  google.protobuf.Timestamp created_at = 6;
  uint64 shard = 7;  // this is which shard the pipeline is assigned to
  pps.PipelineState state = 8;
  string recent_error = 9;
  map<int32, int32> job_counts = 10;
  bool stopped = 11;
}

enum ChangeType {
  CREATE = 0;
  UPDATE = 1;
  DELETE = 2;
}

message PipelineInfoChange {
  PipelineInfo pipeline = 1;
  ChangeType type = 2;
}

message PipelineInfos {
  repeated PipelineInfo pipeline_info = 1;
}

message SubscribePipelineInfosRequest {
  bool include_initial = 1;
  Shard shard = 2;
}

message SubscribeJobInfosRequest {
  bool include_initial = 1;
  Shard shard = 2;
  repeated pps.JobState state = 3;
}

message JobInfoChange {
  PipelineInfo jobInfo = 1;
  ChangeType type = 2;
}

message ListPipelineInfosRequest {
  Shard shard = 1;
}

message Shard {
  uint64 number = 1;
}

message UpdatePipelineStateRequest {
  string pipeline_name = 1;
  pps.PipelineState state = 2;
  string recent_error = 3;
}

message UpdatePipelineStoppedRequest {
  string pipeline_name = 1;
  bool stopped = 2;
}

message BlockPipelineStateRequest {
  string pipeline_name = 1;
  pps.PipelineState state = 2;
}

message AddChunkRequest {
  repeated Chunk chunks = 1;
}

message ClaimChunkRequest {
  string job_id = 1;
  Pod pod = 2;
}

message FinishChunkRequest {
  string chunk_id = 1;
  string pod_name = 2;
}

message RevokeChunkRequest {
  string chunk_id = 1;
  string pod_name = 2;
  // if the number of pods that have processed this chunk exceeds maxPods,
  // then we switch the state of the chunk to FAILED instead of UNASSIGNED
  uint64 maxPods = 3;
}

service API {
  // Job rpcs
  // job_id cannot be set
  // timestamp cannot be set
  rpc CreateJobInfo(JobInfo) returns (JobInfo) {}
  rpc InspectJob(pachyderm.pps.InspectJobRequest) returns (JobInfo) {}
  // ordered by time, latest to earliest
  rpc ListJobInfos(pachyderm.pps.ListJobRequest) returns (JobInfos) {}
  // should only be called when rolling back if a Job does not start!
  rpc DeleteJobInfo(pachyderm.pps.Job) returns (google.protobuf.Empty) {}
  rpc DeleteJobInfosForPipeline(pachyderm.pps.Pipeline) returns (google.protobuf.Empty) {}
  rpc SubscribeJobInfos(SubscribeJobInfosRequest) returns (stream JobInfoChange) {}

  // JobOutput rpcs
  rpc CreateJobOutput(JobOutput) returns (google.protobuf.Empty) {}

  // JobState rpcs
  rpc CreateJobState(JobState) returns (google.protobuf.Empty) {}
  // StartJob sets the state of the job to "running" if the state
  // is currently "pulling".
  // This API updates the job state in a transactional manner.
  rpc StartJob(pachyderm.pps.Job) returns (JobInfo) {} 

  // Pipeline rpcs
  rpc CreatePipelineInfo(PipelineInfo) returns (google.protobuf.Empty) {}
  rpc UpdatePipelineInfo(PipelineInfo) returns (google.protobuf.Empty) {}
  rpc GetPipelineInfo(pachyderm.pps.Pipeline) returns (PipelineInfo) {}
  // ordered by time, latest to earliest
  rpc ListPipelineInfos(ListPipelineInfosRequest) returns (PipelineInfos) {}
  rpc DeletePipelineInfo(pachyderm.pps.Pipeline) returns (google.protobuf.Empty) {}
  rpc SubscribePipelineInfos(SubscribePipelineInfosRequest) returns (stream PipelineInfoChange) {}
  rpc UpdatePipelineState(UpdatePipelineStateRequest) returns (google.protobuf.Empty) {}
  rpc UpdatePipelineStopped(UpdatePipelineStoppedRequest) returns (google.protobuf.Empty) {}
  rpc BlockPipelineState(BlockPipelineStateRequest) returns (google.protobuf.Empty) {}

  // DeleteAll deletes everything
  rpc DeleteAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // Chunk rpcs
  rpc AddChunk(AddChunkRequest) returns (google.protobuf.Empty) {}
  rpc ClaimChunk(ClaimChunkRequest) returns (Chunk) {}
  rpc FinishChunk(FinishChunkRequest) returns (Chunk) {}
  rpc RevokeChunk(RevokeChunkRequest) returns (Chunk) {}
}
