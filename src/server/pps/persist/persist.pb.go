// Code generated by protoc-gen-gogo.
// source: server/pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	server/pps/persist/persist.proto

It has these top-level messages:
	JobInfo
	Pod
	Chunk
	Chunks
	JobInfos
	JobIDs
	JobOutput
	JobState
	AddOutputCommitRequest
	PipelineInfo
	PipelineInfoChange
	PipelineInfos
	SubscribePipelineInfosRequest
	SubscribeJobInfosRequest
	JobInfoChange
	ListPipelineInfosRequest
	Shard
	UpdatePipelineStateRequest
	UpdatePipelineStoppedRequest
	BlockPipelineStateRequest
	AddChunkRequest
	ClaimChunkRequest
	RenewChunkRequest
	FinishChunkRequest
	RevokeChunkRequest
	WaitJobResponse
	ChunkChange
	SubscribeChunksRequest
	ListGCJobsRequest
*/
package persist

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"
import pps "github.com/pachyderm/pachyderm/src/client/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChunkState int32

const (
	// the chunk is available for a pod to work on
	ChunkState_UNASSIGNED ChunkState = 0
	// the chunk has been assigned to a pod
	ChunkState_ASSIGNED ChunkState = 1
	// the chunk has been processed successfully
	ChunkState_SUCCESS ChunkState = 2
	// the chunk could not be processed
	ChunkState_FAILED ChunkState = 3
	// the chunk has been splitted into smaller chunks, so this chunk no longer
	// needs to be processed.
	ChunkState_SPLITTED ChunkState = 4
)

var ChunkState_name = map[int32]string{
	0: "UNASSIGNED",
	1: "ASSIGNED",
	2: "SUCCESS",
	3: "FAILED",
	4: "SPLITTED",
}
var ChunkState_value = map[string]int32{
	"UNASSIGNED": 0,
	"ASSIGNED":   1,
	"SUCCESS":    2,
	"FAILED":     3,
	"SPLITTED":   4,
}

func (x ChunkState) String() string {
	return proto.EnumName(ChunkState_name, int32(x))
}
func (ChunkState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPersist, []int{0} }

type ChangeType int32

const (
	ChangeType_CREATE ChangeType = 0
	ChangeType_UPDATE ChangeType = 1
	ChangeType_DELETE ChangeType = 2
)

var ChangeType_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}
var ChangeType_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x ChangeType) String() string {
	return proto.EnumName(ChangeType_name, int32(x))
}
func (ChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPersist, []int{1} }

type JobInfo struct {
	JobID              string                      `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Transform          *pps.Transform              `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineName       string                      `protobuf:"bytes,3,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	PipelineVersion    uint64                      `protobuf:"varint,20,opt,name=pipeline_version,json=pipelineVersion,proto3" json:"pipeline_version,omitempty"`
	ParallelismSpec    *pps.ParallelismSpec        `protobuf:"bytes,18,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs             []*pps.JobInput             `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	ParentJob          *pps.Job                    `protobuf:"bytes,6,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Started            *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=started" json:"started,omitempty"`
	Finished           *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=finished" json:"finished,omitempty"`
	OutputCommit       *pfs.Commit                 `protobuf:"bytes,9,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	Branch             string                      `protobuf:"bytes,17,opt,name=branch,proto3" json:"branch,omitempty"`
	State              pps.JobState                `protobuf:"varint,10,opt,name=state,proto3,enum=pps.JobState" json:"state,omitempty"`
	CommitIndex        string                      `protobuf:"bytes,11,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	DefaultShardModuli []uint64                    `protobuf:"varint,15,rep,packed,name=default_shard_moduli,json=defaultShardModuli" json:"default_shard_moduli,omitempty"`
	Shard              uint64                      `protobuf:"varint,19,opt,name=shard,proto3" json:"shard,omitempty"`
	// if true, the underlying Kubernetes job has been deleted
	Gc        bool           `protobuf:"varint,21,opt,name=gc,proto3" json:"gc,omitempty"`
	Service   *pps.Service   `protobuf:"bytes,22,opt,name=service" json:"service,omitempty"`
	Output    *pps.Output    `protobuf:"bytes,23,opt,name=output" json:"output,omitempty"`
	Resources *pps.Resources `protobuf:"bytes,24,opt,name=resources" json:"resources,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{0} }

func (m *JobInfo) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *JobInfo) GetTransform() *pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *JobInfo) GetPipelineVersion() uint64 {
	if m != nil {
		return m.PipelineVersion
	}
	return 0
}

func (m *JobInfo) GetParallelismSpec() *pps.ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *JobInfo) GetInputs() []*pps.JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobInfo) GetParentJob() *pps.Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *JobInfo) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *JobInfo) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *JobInfo) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *JobInfo) GetState() pps.JobState {
	if m != nil {
		return m.State
	}
	return pps.JobState_JOB_CREATING
}

func (m *JobInfo) GetCommitIndex() string {
	if m != nil {
		return m.CommitIndex
	}
	return ""
}

func (m *JobInfo) GetDefaultShardModuli() []uint64 {
	if m != nil {
		return m.DefaultShardModuli
	}
	return nil
}

func (m *JobInfo) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *JobInfo) GetGc() bool {
	if m != nil {
		return m.Gc
	}
	return false
}

func (m *JobInfo) GetService() *pps.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *JobInfo) GetOutput() *pps.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *JobInfo) GetResources() *pps.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type Pod struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{1} }

func (m *Pod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pod) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

// Chunk is a unit of work that can be assigned to a pod
type Chunk struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the ID of the job that the Chunk belongs to
	JobID string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// moduli and index together specify the portion of inputs that the shard represents
	// For instance, if moduli is (2, 3, 4) and index is 15, then we have:
	// 15 = 1 * (3 * 4) + 0 * 4 + 3 * 1
	// So the shard represents the second half of input 1, the first third of input 2,
	// and the fourth quarter of input 3.
	Moduli []uint64 `protobuf:"varint,3,rep,packed,name=moduli" json:"moduli,omitempty"`
	Index  uint64   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// the pod that currently owns this shard
	Owner string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	// A series of pods, in chronological order, that have processed this shard
	Pods  []*Pod     `protobuf:"bytes,6,rep,name=pods" json:"pods,omitempty"`
	State ChunkState `protobuf:"varint,7,opt,name=state,proto3,enum=pps.persist.ChunkState" json:"state,omitempty"`
	// a unix timestamp representing the last time we received a ContinueJob
	// for this chunk
	LeaseTime uint64 `protobuf:"varint,8,opt,name=lease_time,json=leaseTime,proto3" json:"lease_time,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{2} }

func (m *Chunk) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Chunk) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *Chunk) GetModuli() []uint64 {
	if m != nil {
		return m.Moduli
	}
	return nil
}

func (m *Chunk) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Chunk) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Chunk) GetPods() []*Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *Chunk) GetState() ChunkState {
	if m != nil {
		return m.State
	}
	return ChunkState_UNASSIGNED
}

func (m *Chunk) GetLeaseTime() uint64 {
	if m != nil {
		return m.LeaseTime
	}
	return 0
}

type Chunks struct {
	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *Chunks) Reset()                    { *m = Chunks{} }
func (m *Chunks) String() string            { return proto.CompactTextString(m) }
func (*Chunks) ProtoMessage()               {}
func (*Chunks) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{3} }

func (m *Chunks) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{4} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type JobIDs struct {
	Jobs []string `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *JobIDs) Reset()                    { *m = JobIDs{} }
func (m *JobIDs) String() string            { return proto.CompactTextString(m) }
func (*JobIDs) ProtoMessage()               {}
func (*JobIDs) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{5} }

func (m *JobIDs) GetJobs() []string {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobOutput struct {
	JobID        string      `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
}

func (m *JobOutput) Reset()                    { *m = JobOutput{} }
func (m *JobOutput) String() string            { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()               {}
func (*JobOutput) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{6} }

func (m *JobOutput) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *JobOutput) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobState struct {
	JobID    string                      `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	State    pps.JobState                `protobuf:"varint,2,opt,name=state,proto3,enum=pps.JobState" json:"state,omitempty"`
	Finished *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=finished" json:"finished,omitempty"`
}

func (m *JobState) Reset()                    { *m = JobState{} }
func (m *JobState) String() string            { return proto.CompactTextString(m) }
func (*JobState) ProtoMessage()               {}
func (*JobState) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{7} }

func (m *JobState) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *JobState) GetState() pps.JobState {
	if m != nil {
		return m.State
	}
	return pps.JobState_JOB_CREATING
}

func (m *JobState) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

type AddOutputCommitRequest struct {
	JobID  string      `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Commit *pfs.Commit `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Branch string      `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (m *AddOutputCommitRequest) Reset()                    { *m = AddOutputCommitRequest{} }
func (m *AddOutputCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*AddOutputCommitRequest) ProtoMessage()               {}
func (*AddOutputCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{8} }

func (m *AddOutputCommitRequest) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *AddOutputCommitRequest) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *AddOutputCommitRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type PipelineInfo struct {
	PipelineName    string                      `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	Version         uint64                      `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	Transform       *pps.Transform              `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	ParallelismSpec *pps.ParallelismSpec        `protobuf:"bytes,12,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*pps.PipelineInput        `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	OutputRepo      *pfs.Repo                   `protobuf:"bytes,5,opt,name=output_repo,json=outputRepo" json:"output_repo,omitempty"`
	CreatedAt       *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Shard           uint64                      `protobuf:"varint,7,opt,name=shard,proto3" json:"shard,omitempty"`
	State           pps.PipelineState           `protobuf:"varint,8,opt,name=state,proto3,enum=pps.PipelineState" json:"state,omitempty"`
	RecentError     string                      `protobuf:"bytes,9,opt,name=recent_error,json=recentError,proto3" json:"recent_error,omitempty"`
	JobCounts       map[int32]int32             `protobuf:"bytes,10,rep,name=job_counts,json=jobCounts" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Stopped         bool                        `protobuf:"varint,11,opt,name=stopped,proto3" json:"stopped,omitempty"`
	GcPolicy        *pps.GCPolicy               `protobuf:"bytes,14,opt,name=gc_policy,json=gcPolicy" json:"gc_policy,omitempty"`
	Output          *pps.Output                 `protobuf:"bytes,15,opt,name=output" json:"output,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{9} }

func (m *PipelineInfo) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *PipelineInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PipelineInfo) GetTransform() *pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetParallelismSpec() *pps.ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *PipelineInfo) GetInputs() []*pps.PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineInfo) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *PipelineInfo) GetState() pps.PipelineState {
	if m != nil {
		return m.State
	}
	return pps.PipelineState_PIPELINE_IDLE
}

func (m *PipelineInfo) GetRecentError() string {
	if m != nil {
		return m.RecentError
	}
	return ""
}

func (m *PipelineInfo) GetJobCounts() map[int32]int32 {
	if m != nil {
		return m.JobCounts
	}
	return nil
}

func (m *PipelineInfo) GetStopped() bool {
	if m != nil {
		return m.Stopped
	}
	return false
}

func (m *PipelineInfo) GetGcPolicy() *pps.GCPolicy {
	if m != nil {
		return m.GcPolicy
	}
	return nil
}

func (m *PipelineInfo) GetOutput() *pps.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type PipelineInfoChange struct {
	Pipeline *PipelineInfo `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Type     ChangeType    `protobuf:"varint,2,opt,name=type,proto3,enum=pps.persist.ChangeType" json:"type,omitempty"`
}

func (m *PipelineInfoChange) Reset()                    { *m = PipelineInfoChange{} }
func (m *PipelineInfoChange) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfoChange) ProtoMessage()               {}
func (*PipelineInfoChange) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{10} }

func (m *PipelineInfoChange) GetPipeline() *PipelineInfo {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *PipelineInfoChange) GetType() ChangeType {
	if m != nil {
		return m.Type
	}
	return ChangeType_CREATE
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{11} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type SubscribePipelineInfosRequest struct {
	IncludeInitial bool   `protobuf:"varint,1,opt,name=include_initial,json=includeInitial,proto3" json:"include_initial,omitempty"`
	Shard          *Shard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *SubscribePipelineInfosRequest) Reset()         { *m = SubscribePipelineInfosRequest{} }
func (m *SubscribePipelineInfosRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribePipelineInfosRequest) ProtoMessage()    {}
func (*SubscribePipelineInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPersist, []int{12}
}

func (m *SubscribePipelineInfosRequest) GetIncludeInitial() bool {
	if m != nil {
		return m.IncludeInitial
	}
	return false
}

func (m *SubscribePipelineInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type SubscribeJobInfosRequest struct {
	IncludeInitial bool           `protobuf:"varint,1,opt,name=include_initial,json=includeInitial,proto3" json:"include_initial,omitempty"`
	IncludeChanges bool           `protobuf:"varint,2,opt,name=include_changes,json=includeChanges,proto3" json:"include_changes,omitempty"`
	Shard          *Shard         `protobuf:"bytes,3,opt,name=shard" json:"shard,omitempty"`
	State          []pps.JobState `protobuf:"varint,4,rep,packed,name=state,enum=pps.JobState" json:"state,omitempty"`
}

func (m *SubscribeJobInfosRequest) Reset()                    { *m = SubscribeJobInfosRequest{} }
func (m *SubscribeJobInfosRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeJobInfosRequest) ProtoMessage()               {}
func (*SubscribeJobInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{13} }

func (m *SubscribeJobInfosRequest) GetIncludeInitial() bool {
	if m != nil {
		return m.IncludeInitial
	}
	return false
}

func (m *SubscribeJobInfosRequest) GetIncludeChanges() bool {
	if m != nil {
		return m.IncludeChanges
	}
	return false
}

func (m *SubscribeJobInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *SubscribeJobInfosRequest) GetState() []pps.JobState {
	if m != nil {
		return m.State
	}
	return nil
}

type JobInfoChange struct {
	JobInfo *JobInfo   `protobuf:"bytes,1,opt,name=jobInfo" json:"jobInfo,omitempty"`
	Type    ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=pps.persist.ChangeType" json:"type,omitempty"`
}

func (m *JobInfoChange) Reset()                    { *m = JobInfoChange{} }
func (m *JobInfoChange) String() string            { return proto.CompactTextString(m) }
func (*JobInfoChange) ProtoMessage()               {}
func (*JobInfoChange) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{14} }

func (m *JobInfoChange) GetJobInfo() *JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

func (m *JobInfoChange) GetType() ChangeType {
	if m != nil {
		return m.Type
	}
	return ChangeType_CREATE
}

type ListPipelineInfosRequest struct {
	Shard *Shard `protobuf:"bytes,1,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListPipelineInfosRequest) Reset()                    { *m = ListPipelineInfosRequest{} }
func (m *ListPipelineInfosRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPipelineInfosRequest) ProtoMessage()               {}
func (*ListPipelineInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{15} }

func (m *ListPipelineInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type Shard struct {
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{16} }

func (m *Shard) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type UpdatePipelineStateRequest struct {
	PipelineName string            `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	State        pps.PipelineState `protobuf:"varint,2,opt,name=state,proto3,enum=pps.PipelineState" json:"state,omitempty"`
	RecentError  string            `protobuf:"bytes,3,opt,name=recent_error,json=recentError,proto3" json:"recent_error,omitempty"`
}

func (m *UpdatePipelineStateRequest) Reset()         { *m = UpdatePipelineStateRequest{} }
func (m *UpdatePipelineStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePipelineStateRequest) ProtoMessage()    {}
func (*UpdatePipelineStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPersist, []int{17}
}

func (m *UpdatePipelineStateRequest) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *UpdatePipelineStateRequest) GetState() pps.PipelineState {
	if m != nil {
		return m.State
	}
	return pps.PipelineState_PIPELINE_IDLE
}

func (m *UpdatePipelineStateRequest) GetRecentError() string {
	if m != nil {
		return m.RecentError
	}
	return ""
}

type UpdatePipelineStoppedRequest struct {
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	Stopped      bool   `protobuf:"varint,2,opt,name=stopped,proto3" json:"stopped,omitempty"`
}

func (m *UpdatePipelineStoppedRequest) Reset()         { *m = UpdatePipelineStoppedRequest{} }
func (m *UpdatePipelineStoppedRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePipelineStoppedRequest) ProtoMessage()    {}
func (*UpdatePipelineStoppedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPersist, []int{18}
}

func (m *UpdatePipelineStoppedRequest) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *UpdatePipelineStoppedRequest) GetStopped() bool {
	if m != nil {
		return m.Stopped
	}
	return false
}

type BlockPipelineStateRequest struct {
	PipelineName string            `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	State        pps.PipelineState `protobuf:"varint,2,opt,name=state,proto3,enum=pps.PipelineState" json:"state,omitempty"`
}

func (m *BlockPipelineStateRequest) Reset()         { *m = BlockPipelineStateRequest{} }
func (m *BlockPipelineStateRequest) String() string { return proto.CompactTextString(m) }
func (*BlockPipelineStateRequest) ProtoMessage()    {}
func (*BlockPipelineStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPersist, []int{19}
}

func (m *BlockPipelineStateRequest) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *BlockPipelineStateRequest) GetState() pps.PipelineState {
	if m != nil {
		return m.State
	}
	return pps.PipelineState_PIPELINE_IDLE
}

type AddChunkRequest struct {
	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *AddChunkRequest) Reset()                    { *m = AddChunkRequest{} }
func (m *AddChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*AddChunkRequest) ProtoMessage()               {}
func (*AddChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{20} }

func (m *AddChunkRequest) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ClaimChunkRequest struct {
	JobID string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Pod   *Pod   `protobuf:"bytes,2,opt,name=pod" json:"pod,omitempty"`
}

func (m *ClaimChunkRequest) Reset()                    { *m = ClaimChunkRequest{} }
func (m *ClaimChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*ClaimChunkRequest) ProtoMessage()               {}
func (*ClaimChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{21} }

func (m *ClaimChunkRequest) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *ClaimChunkRequest) GetPod() *Pod {
	if m != nil {
		return m.Pod
	}
	return nil
}

type RenewChunkRequest struct {
	ChunkID string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	PodName string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
}

func (m *RenewChunkRequest) Reset()                    { *m = RenewChunkRequest{} }
func (m *RenewChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*RenewChunkRequest) ProtoMessage()               {}
func (*RenewChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{22} }

func (m *RenewChunkRequest) GetChunkID() string {
	if m != nil {
		return m.ChunkID
	}
	return ""
}

func (m *RenewChunkRequest) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

type FinishChunkRequest struct {
	ChunkID string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	PodName string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
}

func (m *FinishChunkRequest) Reset()                    { *m = FinishChunkRequest{} }
func (m *FinishChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishChunkRequest) ProtoMessage()               {}
func (*FinishChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{23} }

func (m *FinishChunkRequest) GetChunkID() string {
	if m != nil {
		return m.ChunkID
	}
	return ""
}

func (m *FinishChunkRequest) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

type RevokeChunkRequest struct {
	ChunkID string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	PodName string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// if the number of pods that have processed this chunk exceeds maxPods,
	// then we switch the state of the chunk to FAILED instead of UNASSIGNED
	MaxPods uint64 `protobuf:"varint,3,opt,name=maxPods,proto3" json:"maxPods,omitempty"`
}

func (m *RevokeChunkRequest) Reset()                    { *m = RevokeChunkRequest{} }
func (m *RevokeChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*RevokeChunkRequest) ProtoMessage()               {}
func (*RevokeChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{24} }

func (m *RevokeChunkRequest) GetChunkID() string {
	if m != nil {
		return m.ChunkID
	}
	return ""
}

func (m *RevokeChunkRequest) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *RevokeChunkRequest) GetMaxPods() uint64 {
	if m != nil {
		return m.MaxPods
	}
	return 0
}

type WaitJobResponse struct {
	State pps.JobState `protobuf:"varint,1,opt,name=state,proto3,enum=pps.JobState" json:"state,omitempty"`
}

func (m *WaitJobResponse) Reset()                    { *m = WaitJobResponse{} }
func (m *WaitJobResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitJobResponse) ProtoMessage()               {}
func (*WaitJobResponse) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{25} }

func (m *WaitJobResponse) GetState() pps.JobState {
	if m != nil {
		return m.State
	}
	return pps.JobState_JOB_CREATING
}

type ChunkChange struct {
	Chunk *Chunk     `protobuf:"bytes,1,opt,name=chunk" json:"chunk,omitempty"`
	Type  ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=pps.persist.ChangeType" json:"type,omitempty"`
	// If ready is set to true, then all initial documents have been sent
	// See docs on `includeState` for rethinkdb's changefeed:
	// https://www.rethinkdb.com/api/javascript/changes/
	Ready bool `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (m *ChunkChange) Reset()                    { *m = ChunkChange{} }
func (m *ChunkChange) String() string            { return proto.CompactTextString(m) }
func (*ChunkChange) ProtoMessage()               {}
func (*ChunkChange) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{26} }

func (m *ChunkChange) GetChunk() *Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *ChunkChange) GetType() ChangeType {
	if m != nil {
		return m.Type
	}
	return ChangeType_CREATE
}

func (m *ChunkChange) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type SubscribeChunksRequest struct {
	Job            *pps.Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	IncludeInitial bool     `protobuf:"varint,2,opt,name=include_initial,json=includeInitial,proto3" json:"include_initial,omitempty"`
}

func (m *SubscribeChunksRequest) Reset()                    { *m = SubscribeChunksRequest{} }
func (m *SubscribeChunksRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeChunksRequest) ProtoMessage()               {}
func (*SubscribeChunksRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{27} }

func (m *SubscribeChunksRequest) GetJob() *pps.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *SubscribeChunksRequest) GetIncludeInitial() bool {
	if m != nil {
		return m.IncludeInitial
	}
	return false
}

type ListGCJobsRequest struct {
	PipelineName string        `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	GcPolicy     *pps.GCPolicy `protobuf:"bytes,2,opt,name=gc_policy,json=gcPolicy" json:"gc_policy,omitempty"`
}

func (m *ListGCJobsRequest) Reset()                    { *m = ListGCJobsRequest{} }
func (m *ListGCJobsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGCJobsRequest) ProtoMessage()               {}
func (*ListGCJobsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPersist, []int{28} }

func (m *ListGCJobsRequest) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *ListGCJobsRequest) GetGcPolicy() *pps.GCPolicy {
	if m != nil {
		return m.GcPolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*JobInfo)(nil), "pps.persist.JobInfo")
	proto.RegisterType((*Pod)(nil), "pps.persist.Pod")
	proto.RegisterType((*Chunk)(nil), "pps.persist.Chunk")
	proto.RegisterType((*Chunks)(nil), "pps.persist.Chunks")
	proto.RegisterType((*JobInfos)(nil), "pps.persist.JobInfos")
	proto.RegisterType((*JobIDs)(nil), "pps.persist.JobIDs")
	proto.RegisterType((*JobOutput)(nil), "pps.persist.JobOutput")
	proto.RegisterType((*JobState)(nil), "pps.persist.JobState")
	proto.RegisterType((*AddOutputCommitRequest)(nil), "pps.persist.AddOutputCommitRequest")
	proto.RegisterType((*PipelineInfo)(nil), "pps.persist.PipelineInfo")
	proto.RegisterType((*PipelineInfoChange)(nil), "pps.persist.PipelineInfoChange")
	proto.RegisterType((*PipelineInfos)(nil), "pps.persist.PipelineInfos")
	proto.RegisterType((*SubscribePipelineInfosRequest)(nil), "pps.persist.SubscribePipelineInfosRequest")
	proto.RegisterType((*SubscribeJobInfosRequest)(nil), "pps.persist.SubscribeJobInfosRequest")
	proto.RegisterType((*JobInfoChange)(nil), "pps.persist.JobInfoChange")
	proto.RegisterType((*ListPipelineInfosRequest)(nil), "pps.persist.ListPipelineInfosRequest")
	proto.RegisterType((*Shard)(nil), "pps.persist.Shard")
	proto.RegisterType((*UpdatePipelineStateRequest)(nil), "pps.persist.UpdatePipelineStateRequest")
	proto.RegisterType((*UpdatePipelineStoppedRequest)(nil), "pps.persist.UpdatePipelineStoppedRequest")
	proto.RegisterType((*BlockPipelineStateRequest)(nil), "pps.persist.BlockPipelineStateRequest")
	proto.RegisterType((*AddChunkRequest)(nil), "pps.persist.AddChunkRequest")
	proto.RegisterType((*ClaimChunkRequest)(nil), "pps.persist.ClaimChunkRequest")
	proto.RegisterType((*RenewChunkRequest)(nil), "pps.persist.RenewChunkRequest")
	proto.RegisterType((*FinishChunkRequest)(nil), "pps.persist.FinishChunkRequest")
	proto.RegisterType((*RevokeChunkRequest)(nil), "pps.persist.RevokeChunkRequest")
	proto.RegisterType((*WaitJobResponse)(nil), "pps.persist.WaitJobResponse")
	proto.RegisterType((*ChunkChange)(nil), "pps.persist.ChunkChange")
	proto.RegisterType((*SubscribeChunksRequest)(nil), "pps.persist.SubscribeChunksRequest")
	proto.RegisterType((*ListGCJobsRequest)(nil), "pps.persist.ListGCJobsRequest")
	proto.RegisterEnum("pps.persist.ChunkState", ChunkState_name, ChunkState_value)
	proto.RegisterEnum("pps.persist.ChangeType", ChangeType_name, ChangeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error)
	InspectJob(ctx context.Context, in *pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(ctx context.Context, in *pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteJobInfosForPipeline(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SubscribeJobInfos(ctx context.Context, in *SubscribeJobInfosRequest, opts ...grpc.CallOption) (API_SubscribeJobInfosClient, error)
	// JobOutput rpcs
	CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// StartJob sets the state of the job to "running" if the state
	// is currently "pulling".
	// This API updates the job state in a transactional manner.
	StartJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*JobInfo, error)
	// GC rpcs
	// List the IDs of jobs that should be GC-ed
	ListGCJobs(ctx context.Context, in *ListGCJobsRequest, opts ...grpc.CallOption) (*JobIDs, error)
	// Mark a job has having been GC-ed
	GCJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Pipeline rpcs
	CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	TouchPipelineInfo(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetPipelineInfo(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(ctx context.Context, in *ListPipelineInfosRequest, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipelineInfo(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SubscribePipelineInfos(ctx context.Context, in *SubscribePipelineInfosRequest, opts ...grpc.CallOption) (API_SubscribePipelineInfosClient, error)
	UpdatePipelineState(ctx context.Context, in *UpdatePipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdatePipelineStopped(ctx context.Context, in *UpdatePipelineStoppedRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BlockPipelineState(ctx context.Context, in *BlockPipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Chunk rpcs
	AddChunk(ctx context.Context, in *AddChunkRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ClaimChunk(ctx context.Context, in *ClaimChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	RenewChunk(ctx context.Context, in *RenewChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	FinishChunk(ctx context.Context, in *FinishChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	RevokeChunk(ctx context.Context, in *RevokeChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	SubscribeChunks(ctx context.Context, in *SubscribeChunksRequest, opts ...grpc.CallOption) (API_SubscribeChunksClient, error)
	GetChunksForJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*Chunks, error)
	DeleteChunksForJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pps.persist.API/CreateJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectJob(ctx context.Context, in *pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pps.persist.API/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJobInfos(ctx context.Context, in *pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pps.persist.API/ListJobInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfo(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/DeleteJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfosForPipeline(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/DeleteJobInfosForPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SubscribeJobInfos(ctx context.Context, in *SubscribeJobInfosRequest, opts ...grpc.CallOption) (API_SubscribeJobInfosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pps.persist.API/SubscribeJobInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeJobInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeJobInfosClient interface {
	Recv() (*JobInfoChange, error)
	grpc.ClientStream
}

type aPISubscribeJobInfosClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeJobInfosClient) Recv() (*JobInfoChange, error) {
	m := new(JobInfoChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/CreateJobOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/CreateJobState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pps.persist.API/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListGCJobs(ctx context.Context, in *ListGCJobsRequest, opts ...grpc.CallOption) (*JobIDs, error) {
	out := new(JobIDs)
	err := grpc.Invoke(ctx, "/pps.persist.API/ListGCJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GCJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/GCJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/CreatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/UpdatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) TouchPipelineInfo(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/TouchPipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelineInfo(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pps.persist.API/GetPipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipelineInfos(ctx context.Context, in *ListPipelineInfosRequest, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pps.persist.API/ListPipelineInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipelineInfo(ctx context.Context, in *pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/DeletePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SubscribePipelineInfos(ctx context.Context, in *SubscribePipelineInfosRequest, opts ...grpc.CallOption) (API_SubscribePipelineInfosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pps.persist.API/SubscribePipelineInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribePipelineInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribePipelineInfosClient interface {
	Recv() (*PipelineInfoChange, error)
	grpc.ClientStream
}

type aPISubscribePipelineInfosClient struct {
	grpc.ClientStream
}

func (x *aPISubscribePipelineInfosClient) Recv() (*PipelineInfoChange, error) {
	m := new(PipelineInfoChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) UpdatePipelineState(ctx context.Context, in *UpdatePipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/UpdatePipelineState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipelineStopped(ctx context.Context, in *UpdatePipelineStoppedRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/UpdatePipelineStopped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BlockPipelineState(ctx context.Context, in *BlockPipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/BlockPipelineState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddChunk(ctx context.Context, in *AddChunkRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/AddChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ClaimChunk(ctx context.Context, in *ClaimChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := grpc.Invoke(ctx, "/pps.persist.API/ClaimChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RenewChunk(ctx context.Context, in *RenewChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := grpc.Invoke(ctx, "/pps.persist.API/RenewChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FinishChunk(ctx context.Context, in *FinishChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := grpc.Invoke(ctx, "/pps.persist.API/FinishChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RevokeChunk(ctx context.Context, in *RevokeChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := grpc.Invoke(ctx, "/pps.persist.API/RevokeChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SubscribeChunks(ctx context.Context, in *SubscribeChunksRequest, opts ...grpc.CallOption) (API_SubscribeChunksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[2], c.cc, "/pps.persist.API/SubscribeChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeChunksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeChunksClient interface {
	Recv() (*ChunkChange, error)
	grpc.ClientStream
}

type aPISubscribeChunksClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeChunksClient) Recv() (*ChunkChange, error) {
	m := new(ChunkChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetChunksForJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*Chunks, error) {
	out := new(Chunks)
	err := grpc.Invoke(ctx, "/pps.persist.API/GetChunksForJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteChunksForJob(ctx context.Context, in *pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.persist.API/DeleteChunksForJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(context.Context, *JobInfo) (*JobInfo, error)
	InspectJob(context.Context, *pps.InspectJobRequest) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(context.Context, *pps.ListJobRequest) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(context.Context, *pps.Job) (*google_protobuf.Empty, error)
	DeleteJobInfosForPipeline(context.Context, *pps.Pipeline) (*google_protobuf.Empty, error)
	SubscribeJobInfos(*SubscribeJobInfosRequest, API_SubscribeJobInfosServer) error
	// JobOutput rpcs
	CreateJobOutput(context.Context, *JobOutput) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(context.Context, *JobState) (*google_protobuf.Empty, error)
	// StartJob sets the state of the job to "running" if the state
	// is currently "pulling".
	// This API updates the job state in a transactional manner.
	StartJob(context.Context, *pps.Job) (*JobInfo, error)
	// GC rpcs
	// List the IDs of jobs that should be GC-ed
	ListGCJobs(context.Context, *ListGCJobsRequest) (*JobIDs, error)
	// Mark a job has having been GC-ed
	GCJob(context.Context, *pps.Job) (*google_protobuf.Empty, error)
	// Pipeline rpcs
	CreatePipelineInfo(context.Context, *PipelineInfo) (*google_protobuf.Empty, error)
	UpdatePipelineInfo(context.Context, *PipelineInfo) (*google_protobuf.Empty, error)
	TouchPipelineInfo(context.Context, *pps.Pipeline) (*google_protobuf.Empty, error)
	GetPipelineInfo(context.Context, *pps.Pipeline) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(context.Context, *ListPipelineInfosRequest) (*PipelineInfos, error)
	DeletePipelineInfo(context.Context, *pps.Pipeline) (*google_protobuf.Empty, error)
	SubscribePipelineInfos(*SubscribePipelineInfosRequest, API_SubscribePipelineInfosServer) error
	UpdatePipelineState(context.Context, *UpdatePipelineStateRequest) (*google_protobuf.Empty, error)
	UpdatePipelineStopped(context.Context, *UpdatePipelineStoppedRequest) (*google_protobuf.Empty, error)
	BlockPipelineState(context.Context, *BlockPipelineStateRequest) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// Chunk rpcs
	AddChunk(context.Context, *AddChunkRequest) (*google_protobuf.Empty, error)
	ClaimChunk(context.Context, *ClaimChunkRequest) (*Chunk, error)
	RenewChunk(context.Context, *RenewChunkRequest) (*Chunk, error)
	FinishChunk(context.Context, *FinishChunkRequest) (*Chunk, error)
	RevokeChunk(context.Context, *RevokeChunkRequest) (*Chunk, error)
	SubscribeChunks(*SubscribeChunksRequest, API_SubscribeChunksServer) error
	GetChunksForJob(context.Context, *pps.Job) (*Chunks, error)
	DeleteChunksForJob(context.Context, *pps.Job) (*google_protobuf.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/CreateJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobInfo(ctx, req.(*JobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/InspectJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectJob(ctx, req.(*pps.InspectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListJobInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListJobInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/ListJobInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListJobInfos(ctx, req.(*pps.ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/DeleteJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJobInfo(ctx, req.(*pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJobInfosForPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJobInfosForPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/DeleteJobInfosForPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJobInfosForPipeline(ctx, req.(*pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SubscribeJobInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeJobInfosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeJobInfos(m, &aPISubscribeJobInfosServer{stream})
}

type API_SubscribeJobInfosServer interface {
	Send(*JobInfoChange) error
	grpc.ServerStream
}

type aPISubscribeJobInfosServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeJobInfosServer) Send(m *JobInfoChange) error {
	return x.ServerStream.SendMsg(m)
}

func _API_CreateJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/CreateJobOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobOutput(ctx, req.(*JobOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/CreateJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobState(ctx, req.(*JobState))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartJob(ctx, req.(*pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListGCJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGCJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListGCJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/ListGCJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListGCJobs(ctx, req.(*ListGCJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GCJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GCJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/GCJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GCJob(ctx, req.(*pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreatePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/CreatePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreatePipelineInfo(ctx, req.(*PipelineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/UpdatePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineInfo(ctx, req.(*PipelineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_TouchPipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).TouchPipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/TouchPipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).TouchPipelineInfo(ctx, req.(*pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/GetPipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPipelineInfo(ctx, req.(*pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPipelineInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPipelineInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/ListPipelineInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPipelineInfos(ctx, req.(*ListPipelineInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeletePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeletePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/DeletePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeletePipelineInfo(ctx, req.(*pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SubscribePipelineInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePipelineInfosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribePipelineInfos(m, &aPISubscribePipelineInfosServer{stream})
}

type API_SubscribePipelineInfosServer interface {
	Send(*PipelineInfoChange) error
	grpc.ServerStream
}

type aPISubscribePipelineInfosServer struct {
	grpc.ServerStream
}

func (x *aPISubscribePipelineInfosServer) Send(m *PipelineInfoChange) error {
	return x.ServerStream.SendMsg(m)
}

func _API_UpdatePipelineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/UpdatePipelineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineState(ctx, req.(*UpdatePipelineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdatePipelineStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStoppedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/UpdatePipelineStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineStopped(ctx, req.(*UpdatePipelineStoppedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BlockPipelineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPipelineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BlockPipelineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/BlockPipelineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BlockPipelineState(ctx, req.(*BlockPipelineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/AddChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddChunk(ctx, req.(*AddChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ClaimChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ClaimChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/ClaimChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ClaimChunk(ctx, req.(*ClaimChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RenewChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RenewChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/RenewChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RenewChunk(ctx, req.(*RenewChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FinishChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FinishChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/FinishChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FinishChunk(ctx, req.(*FinishChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RevokeChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RevokeChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/RevokeChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RevokeChunk(ctx, req.(*RevokeChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SubscribeChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChunksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeChunks(m, &aPISubscribeChunksServer{stream})
}

type API_SubscribeChunksServer interface {
	Send(*ChunkChange) error
	grpc.ServerStream
}

type aPISubscribeChunksServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeChunksServer) Send(m *ChunkChange) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetChunksForJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetChunksForJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/GetChunksForJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetChunksForJob(ctx, req.(*pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteChunksForJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteChunksForJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.persist.API/DeleteChunksForJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteChunksForJob(ctx, req.(*pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pps.persist.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobInfo",
			Handler:    _API_CreateJobInfo_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _API_InspectJob_Handler,
		},
		{
			MethodName: "ListJobInfos",
			Handler:    _API_ListJobInfos_Handler,
		},
		{
			MethodName: "DeleteJobInfo",
			Handler:    _API_DeleteJobInfo_Handler,
		},
		{
			MethodName: "DeleteJobInfosForPipeline",
			Handler:    _API_DeleteJobInfosForPipeline_Handler,
		},
		{
			MethodName: "CreateJobOutput",
			Handler:    _API_CreateJobOutput_Handler,
		},
		{
			MethodName: "CreateJobState",
			Handler:    _API_CreateJobState_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _API_StartJob_Handler,
		},
		{
			MethodName: "ListGCJobs",
			Handler:    _API_ListGCJobs_Handler,
		},
		{
			MethodName: "GCJob",
			Handler:    _API_GCJob_Handler,
		},
		{
			MethodName: "CreatePipelineInfo",
			Handler:    _API_CreatePipelineInfo_Handler,
		},
		{
			MethodName: "UpdatePipelineInfo",
			Handler:    _API_UpdatePipelineInfo_Handler,
		},
		{
			MethodName: "TouchPipelineInfo",
			Handler:    _API_TouchPipelineInfo_Handler,
		},
		{
			MethodName: "GetPipelineInfo",
			Handler:    _API_GetPipelineInfo_Handler,
		},
		{
			MethodName: "ListPipelineInfos",
			Handler:    _API_ListPipelineInfos_Handler,
		},
		{
			MethodName: "DeletePipelineInfo",
			Handler:    _API_DeletePipelineInfo_Handler,
		},
		{
			MethodName: "UpdatePipelineState",
			Handler:    _API_UpdatePipelineState_Handler,
		},
		{
			MethodName: "UpdatePipelineStopped",
			Handler:    _API_UpdatePipelineStopped_Handler,
		},
		{
			MethodName: "BlockPipelineState",
			Handler:    _API_BlockPipelineState_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
		{
			MethodName: "AddChunk",
			Handler:    _API_AddChunk_Handler,
		},
		{
			MethodName: "ClaimChunk",
			Handler:    _API_ClaimChunk_Handler,
		},
		{
			MethodName: "RenewChunk",
			Handler:    _API_RenewChunk_Handler,
		},
		{
			MethodName: "FinishChunk",
			Handler:    _API_FinishChunk_Handler,
		},
		{
			MethodName: "RevokeChunk",
			Handler:    _API_RevokeChunk_Handler,
		},
		{
			MethodName: "GetChunksForJob",
			Handler:    _API_GetChunksForJob_Handler,
		},
		{
			MethodName: "DeleteChunksForJob",
			Handler:    _API_DeleteChunksForJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeJobInfos",
			Handler:       _API_SubscribeJobInfos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePipelineInfos",
			Handler:       _API_SubscribePipelineInfos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChunks",
			Handler:       _API_SubscribeChunks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/pps/persist/persist.proto",
}

func init() { proto.RegisterFile("server/pps/persist/persist.proto", fileDescriptorPersist) }

var fileDescriptorPersist = []byte{
	// 2083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0xef, 0x72, 0xdb, 0xc6,
	0x11, 0x17, 0xff, 0x83, 0x4b, 0xf1, 0x8f, 0xce, 0x8a, 0x02, 0xb3, 0x4e, 0xa5, 0xc2, 0xb5, 0xcd,
	0x28, 0x29, 0xe5, 0x51, 0xd2, 0x4c, 0xda, 0xda, 0xed, 0xc8, 0x24, 0xad, 0x21, 0xeb, 0xda, 0xea,
	0x51, 0x76, 0xd2, 0x4c, 0x33, 0x1c, 0x10, 0x38, 0x49, 0x90, 0x49, 0x1c, 0x02, 0x80, 0xb6, 0xd5,
	0x37, 0xe8, 0x97, 0x3e, 0x48, 0xfb, 0x08, 0xfd, 0xd4, 0x17, 0xf1, 0x07, 0xbf, 0x45, 0xbf, 0x75,
	0x6e, 0x0f, 0x20, 0x01, 0x92, 0xa0, 0xc4, 0x4c, 0xa6, 0x1f, 0x34, 0xba, 0xdb, 0xdb, 0xdd, 0xdb,
	0xdb, 0x3f, 0xbf, 0x5d, 0x10, 0xf6, 0x3c, 0xe6, 0xbe, 0x61, 0xee, 0x81, 0xe3, 0x78, 0x07, 0x0e,
	0x73, 0x3d, 0xcb, 0xf3, 0xc3, 0xff, 0x4d, 0xc7, 0xe5, 0x3e, 0x27, 0x25, 0xc7, 0xf1, 0x9a, 0x01,
	0xa9, 0xfe, 0xb3, 0x73, 0xce, 0xcf, 0x47, 0xec, 0x00, 0x8f, 0x86, 0x93, 0xb3, 0x03, 0x36, 0x76,
	0xfc, 0x2b, 0xc9, 0x59, 0xdf, 0x9d, 0x3f, 0xf4, 0xad, 0x31, 0xf3, 0x7c, 0x7d, 0xec, 0x04, 0x0c,
	0xdb, 0xe7, 0xfc, 0x9c, 0xe3, 0xf2, 0x40, 0xac, 0x42, 0xaa, 0x31, 0xb2, 0x98, 0xed, 0x1f, 0x38,
	0x67, 0x9e, 0xf8, 0x9b, 0xa7, 0x0a, 0xc3, 0x9c, 0x80, 0xaa, 0xfd, 0x2b, 0x0f, 0x85, 0x1e, 0x1f,
	0x76, 0xed, 0x33, 0x4e, 0xf6, 0x20, 0x7f, 0xc9, 0x87, 0x03, 0xcb, 0x54, 0x53, 0x7b, 0xa9, 0x46,
	0xf1, 0x49, 0xf1, 0xc3, 0xfb, 0xdd, 0x9c, 0x38, 0x6c, 0xd3, 0xdc, 0x25, 0x1f, 0x76, 0x4d, 0xf2,
	0x39, 0x14, 0x7d, 0x57, 0xb7, 0xbd, 0x33, 0xee, 0x8e, 0xd5, 0xf4, 0x5e, 0xaa, 0x51, 0x3a, 0xac,
	0x34, 0x85, 0xb2, 0xd3, 0x90, 0x4a, 0x67, 0x0c, 0xe4, 0x2e, 0x94, 0x1d, 0xcb, 0x61, 0x23, 0xcb,
	0x66, 0x03, 0x5b, 0x1f, 0x33, 0x35, 0x23, 0xd4, 0xd2, 0xcd, 0x90, 0xf8, 0x5c, 0x1f, 0x33, 0xf2,
	0x29, 0xd4, 0xa6, 0x4c, 0x6f, 0x84, 0x53, 0xb8, 0xad, 0x6e, 0xef, 0xa5, 0x1a, 0x59, 0x5a, 0x0d,
	0xe9, 0xaf, 0x24, 0x99, 0xfc, 0x01, 0x6a, 0x8e, 0xee, 0xea, 0xa3, 0x11, 0x1b, 0x59, 0xde, 0x78,
	0xe0, 0x39, 0xcc, 0x50, 0x09, 0x1a, 0xb1, 0x8d, 0x46, 0x9c, 0xcc, 0x0e, 0xfb, 0x0e, 0x33, 0x68,
	0xd5, 0x89, 0x13, 0xc8, 0x3d, 0xc8, 0x5b, 0xb6, 0x33, 0xf1, 0x3d, 0x35, 0xb7, 0x97, 0x69, 0x94,
	0x0e, 0xcb, 0x28, 0x86, 0xcf, 0x77, 0x26, 0x3e, 0x0d, 0x0e, 0xc9, 0x03, 0x00, 0x47, 0x77, 0x99,
	0xed, 0x0f, 0x2e, 0xf9, 0x50, 0xcd, 0xe3, 0x0d, 0x4a, 0xc8, 0x4a, 0x8b, 0xf2, 0xac, 0xc7, 0x87,
	0xe4, 0x4b, 0x28, 0x78, 0xbe, 0xee, 0xfa, 0xcc, 0x54, 0x0b, 0xc8, 0x55, 0x6f, 0xca, 0x88, 0x35,
	0xc3, 0x88, 0x35, 0x4f, 0xc3, 0x88, 0xd1, 0x90, 0x95, 0x7c, 0x05, 0xca, 0x99, 0x65, 0x5b, 0xde,
	0x05, 0x33, 0x55, 0xe5, 0x5a, 0xb1, 0x29, 0x2f, 0x79, 0x08, 0x65, 0x3e, 0xf1, 0x9d, 0x89, 0x3f,
	0x30, 0xf8, 0x78, 0x6c, 0xf9, 0x6a, 0x11, 0x85, 0x4b, 0x4d, 0x11, 0xe3, 0x16, 0x92, 0xe8, 0xa6,
	0xe4, 0x90, 0x3b, 0xb2, 0x03, 0xf9, 0xa1, 0xab, 0xdb, 0xc6, 0x85, 0xba, 0x85, 0x9e, 0x0f, 0x76,
	0xe4, 0x2e, 0xe4, 0x3c, 0x5f, 0xf7, 0x99, 0x0a, 0x7b, 0xa9, 0x46, 0x65, 0xe6, 0x86, 0xbe, 0x20,
	0x52, 0x79, 0x46, 0x7e, 0x01, 0x9b, 0xf2, 0x9e, 0x81, 0x65, 0x9b, 0xec, 0x9d, 0x5a, 0x42, 0x15,
	0x25, 0x49, 0xeb, 0x0a, 0x12, 0x79, 0x08, 0xdb, 0x26, 0x3b, 0xd3, 0x27, 0x23, 0x7f, 0xe0, 0x5d,
	0xe8, 0xae, 0x39, 0x18, 0x73, 0x73, 0x32, 0xb2, 0xd4, 0xea, 0x5e, 0xa6, 0x91, 0xa5, 0x24, 0x38,
	0xeb, 0x8b, 0xa3, 0x3f, 0xe1, 0x09, 0xd9, 0x86, 0x1c, 0x72, 0xaa, 0xb7, 0x30, 0xc4, 0x72, 0x43,
	0x2a, 0x90, 0x3e, 0x37, 0xd4, 0x8f, 0xf6, 0x52, 0x0d, 0x85, 0xa6, 0xcf, 0x0d, 0x72, 0x1f, 0x0a,
	0xa2, 0x8a, 0x2c, 0x83, 0xa9, 0x3b, 0xf8, 0xc6, 0x4d, 0xb4, 0xb0, 0x2f, 0x69, 0x34, 0x3c, 0x24,
	0x77, 0x21, 0x2f, 0xdf, 0xab, 0x7e, 0x1c, 0xba, 0xc2, 0xf1, 0x9a, 0x2f, 0x90, 0x44, 0x83, 0x23,
	0x91, 0xb3, 0x2e, 0xf3, 0xf8, 0xc4, 0x35, 0x98, 0xa7, 0xaa, 0x91, 0x9c, 0xa5, 0x21, 0x95, 0xce,
	0x18, 0x7a, 0x59, 0x25, 0x5b, 0xcb, 0xf5, 0xb2, 0xca, 0x66, 0xad, 0xdc, 0xcb, 0x2a, 0xe5, 0x5a,
	0xa5, 0x97, 0x55, 0x2a, 0xb5, 0x6a, 0x2f, 0xab, 0xd4, 0x6a, 0x5b, 0xda, 0x1f, 0x21, 0x73, 0xc2,
	0x4d, 0x42, 0x20, 0x8b, 0xf9, 0x8c, 0x65, 0x42, 0x71, 0xbd, 0x18, 0x9d, 0xf4, 0x35, 0xd1, 0xd1,
	0xfe, 0x9b, 0x82, 0x5c, 0xeb, 0x62, 0x62, 0xbf, 0x26, 0x3b, 0x90, 0x9e, 0x16, 0x5d, 0xfe, 0xc3,
	0xfb, 0xdd, 0x74, 0xb7, 0x4d, 0xd3, 0x96, 0x19, 0x29, 0xc8, 0x74, 0x42, 0x41, 0xee, 0x40, 0x3e,
	0xf0, 0x79, 0x06, 0x7d, 0x1e, 0xec, 0x84, 0x9f, 0x65, 0xd4, 0xb2, 0xd2, 0xcf, 0xb8, 0x11, 0x54,
	0xfe, 0xd6, 0x66, 0xae, 0x9a, 0x43, 0xc3, 0xe5, 0x86, 0xfc, 0x12, 0xb2, 0x0e, 0x37, 0x3d, 0x35,
	0x8f, 0x35, 0x51, 0x6b, 0x46, 0xe0, 0xa9, 0x79, 0xc2, 0x4d, 0x8a, 0xa7, 0xe4, 0x57, 0x61, 0xce,
	0x14, 0x30, 0x67, 0x3e, 0x8e, 0xb1, 0xe1, 0x33, 0x62, 0xd9, 0xf3, 0x09, 0xc0, 0x88, 0xe9, 0x1e,
	0x1b, 0x08, 0xc8, 0xc2, 0x34, 0xcf, 0xd2, 0x22, 0x52, 0x44, 0x6a, 0x6b, 0x5f, 0x42, 0x1e, 0x65,
	0x3c, 0xb2, 0x0f, 0x79, 0x03, 0x57, 0x6a, 0x0a, 0xef, 0x27, 0x8b, 0x8a, 0x69, 0xc0, 0xa1, 0xfd,
	0x0e, 0x94, 0x00, 0xab, 0x3c, 0x72, 0x00, 0x0a, 0xfa, 0xc6, 0x3e, 0xe3, 0x81, 0xe4, 0x76, 0x4c,
	0x32, 0x60, 0xa4, 0x85, 0x4b, 0xb9, 0xd0, 0xee, 0x40, 0x1e, 0x5d, 0xe7, 0x89, 0xf0, 0x5d, 0xf2,
	0xa1, 0xbc, 0xb0, 0x48, 0x71, 0xad, 0x0d, 0xa0, 0xd8, 0xe3, 0x43, 0x99, 0x3a, 0x37, 0x00, 0xc2,
	0xf5, 0xa3, 0xfd, 0xf7, 0x14, 0x1a, 0x8f, 0x4e, 0xba, 0xc1, 0x05, 0xd3, 0x12, 0x4d, 0xaf, 0x28,
	0xd1, 0x28, 0x92, 0x64, 0x6e, 0x8e, 0x24, 0xda, 0x5b, 0xd8, 0x39, 0x32, 0xcd, 0x17, 0x11, 0xf3,
	0x28, 0xfb, 0x61, 0xc2, 0x3c, 0xff, 0x46, 0x86, 0xe5, 0x93, 0x9f, 0x1c, 0x1c, 0x45, 0x80, 0x27,
	0x13, 0x05, 0x1e, 0xed, 0x9f, 0x39, 0xd8, 0x3c, 0x09, 0x50, 0x1d, 0x5b, 0xce, 0x42, 0x8b, 0x48,
	0x2d, 0x69, 0x11, 0x2a, 0x14, 0xc2, 0xce, 0x50, 0xc6, 0x44, 0x0a, 0xb7, 0x6b, 0xf6, 0xa3, 0x65,
	0xfd, 0x63, 0x73, 0x9d, 0xfe, 0xb1, 0x3f, 0xed, 0x1f, 0xd9, 0x48, 0xae, 0xce, 0x1e, 0x14, 0x6d,
	0x22, 0xfb, 0x50, 0x0a, 0x32, 0xc4, 0x65, 0x0e, 0xc7, 0x8a, 0x2b, 0x1d, 0x16, 0xd1, 0x59, 0x94,
	0x39, 0x9c, 0x82, 0x3c, 0x15, 0x6b, 0xf2, 0x1b, 0x00, 0xc3, 0x65, 0xba, 0xcf, 0xcc, 0x81, 0xee,
	0x07, 0x0d, 0x67, 0x55, 0x24, 0x8b, 0x01, 0xf7, 0x91, 0x3f, 0x03, 0xd4, 0x42, 0x14, 0x50, 0x1b,
	0x61, 0xf6, 0x28, 0x98, 0x3d, 0x71, 0x3b, 0xe7, 0x51, 0xde, 0x65, 0x86, 0xe8, 0x75, 0xcc, 0x75,
	0xb9, 0x8b, 0x3d, 0xa5, 0x48, 0x4b, 0x92, 0xd6, 0x11, 0x24, 0x72, 0x0c, 0x20, 0x72, 0xc2, 0xe0,
	0x13, 0xdb, 0xf7, 0x54, 0xc0, 0x97, 0x37, 0xe2, 0x28, 0x11, 0x09, 0xa9, 0x48, 0xd2, 0x16, 0xb2,
	0x76, 0x6c, 0xdf, 0xbd, 0xa2, 0xc5, 0xcb, 0x70, 0x2f, 0xe2, 0xe8, 0xf9, 0xdc, 0x71, 0x98, 0x89,
	0xcd, 0x44, 0xa1, 0xe1, 0x96, 0xec, 0x43, 0xf1, 0xdc, 0x18, 0x38, 0x7c, 0x64, 0x19, 0x57, 0x6a,
	0x05, 0xdf, 0x2f, 0x33, 0xfe, 0xb8, 0x75, 0x82, 0x44, 0xaa, 0x9c, 0x1b, 0x72, 0x15, 0x01, 0xfd,
	0x6a, 0x22, 0xe8, 0xd7, 0x1f, 0x41, 0x25, 0x6e, 0x07, 0xa9, 0x41, 0xe6, 0x35, 0xbb, 0xc2, 0xfc,
	0xca, 0x51, 0xb1, 0x14, 0xae, 0x7b, 0xa3, 0x8f, 0x26, 0xb2, 0xc4, 0x72, 0x54, 0x6e, 0x7e, 0x9b,
	0xfe, 0x3a, 0xd5, 0xcb, 0x2a, 0x99, 0x5a, 0x56, 0x7b, 0x07, 0x24, 0xfa, 0xb0, 0xd6, 0x85, 0x6e,
	0x9f, 0x33, 0xf2, 0x6b, 0x50, 0xc2, 0xe4, 0x44, 0x65, 0xa5, 0xc3, 0xdb, 0x89, 0xbe, 0xa0, 0x53,
	0x56, 0xf2, 0x19, 0x64, 0xfd, 0x2b, 0x27, 0x2c, 0xe7, 0x79, 0xf4, 0x14, 0x9a, 0x4f, 0xaf, 0x1c,
	0x46, 0x91, 0x49, 0x7b, 0x01, 0xe5, 0xa8, 0x1a, 0x8f, 0xfc, 0x3e, 0x52, 0x26, 0x11, 0xc4, 0x5b,
	0x71, 0xf3, 0xb4, 0x82, 0x10, 0xfb, 0x5c, 0xf8, 0xa4, 0x3f, 0x19, 0x7a, 0x86, 0x6b, 0x0d, 0x59,
	0x4c, 0x73, 0x58, 0xf7, 0x0f, 0xa0, 0x6a, 0xd9, 0xc6, 0x68, 0x62, 0x0a, 0xfd, 0x96, 0x6f, 0xe9,
	0x23, 0x7c, 0x9c, 0x42, 0x2b, 0x01, 0xb9, 0x2b, 0xa9, 0x98, 0x59, 0x98, 0x6f, 0xb2, 0xda, 0xe2,
	0x68, 0x8d, 0x9d, 0x3e, 0xc8, 0x41, 0xed, 0xdf, 0x29, 0x50, 0xa7, 0x97, 0x86, 0xb0, 0xbd, 0xf6,
	0x7d, 0x11, 0x46, 0x03, 0xdd, 0xe4, 0xe1, 0xcd, 0x33, 0x46, 0xe9, 0x3c, 0x6f, 0x66, 0x58, 0xe6,
	0x1a, 0xc3, 0x66, 0xd0, 0x2a, 0x8a, 0x38, 0x01, 0x5a, 0xb5, 0x11, 0x94, 0x03, 0x9b, 0x83, 0xb8,
	0x37, 0x21, 0xec, 0x24, 0x41, 0xd8, 0x57, 0xb7, 0x9b, 0xf5, 0x02, 0xde, 0x06, 0xf5, 0x99, 0xe5,
	0xf9, 0x4b, 0x43, 0x33, 0x7d, 0x58, 0xea, 0x3a, 0x8f, 0xef, 0x42, 0x0e, 0xf7, 0x02, 0x7e, 0xed,
	0xc9, 0x78, 0xc8, 0x5c, 0x94, 0xc9, 0xd2, 0x60, 0xa7, 0xfd, 0x23, 0x05, 0xf5, 0x97, 0x8e, 0xa9,
	0xfb, 0x2c, 0x8e, 0x05, 0xc1, 0x4d, 0x37, 0x02, 0xe3, 0x46, 0xbc, 0x31, 0xad, 0x01, 0x2d, 0x99,
	0x05, 0x68, 0xd1, 0xbe, 0x87, 0x3b, 0xf3, 0xf6, 0x20, 0x20, 0xac, 0x65, 0x51, 0x04, 0x56, 0xd2,
	0x31, 0x58, 0xd1, 0x2e, 0xe1, 0xf6, 0x93, 0x11, 0x37, 0x5e, 0xff, 0x1f, 0x5e, 0xab, 0x3d, 0x86,
	0xea, 0x91, 0x69, 0xca, 0x79, 0x25, 0xb8, 0x61, 0x9d, 0xd1, 0xe6, 0x2f, 0xb0, 0xd5, 0x1a, 0xe9,
	0xd6, 0x38, 0xa6, 0xe0, 0xfa, 0x6e, 0xac, 0x41, 0xc6, 0xe1, 0x61, 0x31, 0x2e, 0x8e, 0x6e, 0xe2,
	0x50, 0x7b, 0x05, 0x5b, 0x94, 0xd9, 0xec, 0x6d, 0x4c, 0xf5, 0x7d, 0x50, 0xf0, 0xe6, 0x99, 0xf2,
	0xd2, 0x87, 0xf7, 0xbb, 0x05, 0xe4, 0xe9, 0xb6, 0x69, 0x01, 0x0f, 0xbb, 0x26, 0xb9, 0x0d, 0x8a,
	0xc3, 0x4d, 0xe9, 0x20, 0x1c, 0x42, 0x69, 0xc1, 0xe1, 0xa6, 0xf0, 0x8d, 0xf6, 0x0d, 0x90, 0xa7,
	0x38, 0x51, 0xfc, 0xd4, 0x8a, 0x7f, 0x00, 0x42, 0xd9, 0x1b, 0xfe, 0x9a, 0xfd, 0xc4, 0x8a, 0x45,
	0xa6, 0x8c, 0xf5, 0x77, 0x27, 0x62, 0xd8, 0xcd, 0xc8, 0x41, 0x22, 0xd8, 0x6a, 0x5f, 0x41, 0xf5,
	0x1b, 0xdd, 0x12, 0x1f, 0x75, 0x94, 0x79, 0x0e, 0xb7, 0x3d, 0x36, 0x83, 0x89, 0x54, 0xf2, 0x04,
	0xa6, 0xfd, 0x0d, 0x4a, 0x68, 0x40, 0x00, 0x12, 0x0d, 0xc8, 0xa1, 0x19, 0x4b, 0x6b, 0x55, 0xbe,
	0x46, 0x32, 0xac, 0x05, 0x0f, 0xa2, 0x53, 0xb9, 0x4c, 0x37, 0xaf, 0xd0, 0x6a, 0x85, 0xca, 0x8d,
	0xf6, 0x3d, 0xec, 0x4c, 0xf1, 0x55, 0x0e, 0xd3, 0xa1, 0xab, 0xea, 0x90, 0x11, 0x5f, 0xae, 0xa9,
	0xb9, 0x2f, 0x57, 0x41, 0x5c, 0x86, 0xbc, 0xe9, 0x65, 0xc8, 0xab, 0x99, 0xb0, 0x25, 0x30, 0xe9,
	0xb8, 0xd5, 0xe3, 0x43, 0x6f, 0xad, 0xa2, 0x89, 0x75, 0xf3, 0xf4, 0xca, 0x6e, 0xbe, 0xff, 0x67,
	0x80, 0xd9, 0xc7, 0x03, 0xa9, 0x00, 0xbc, 0x7c, 0x7e, 0xd4, 0xef, 0x77, 0x8f, 0x9f, 0x77, 0xda,
	0xb5, 0x0d, 0xb2, 0x09, 0xca, 0x74, 0x97, 0x22, 0x25, 0x28, 0xf4, 0x5f, 0xb6, 0x5a, 0x9d, 0x7e,
	0xbf, 0x96, 0x26, 0x00, 0xf9, 0xa7, 0x47, 0xdd, 0x67, 0x9d, 0x76, 0x2d, 0x23, 0xd8, 0xfa, 0x27,
	0xcf, 0xba, 0xa7, 0xa7, 0x9d, 0x76, 0x2d, 0xbb, 0xff, 0x50, 0xa8, 0x0c, 0x3d, 0x28, 0xf8, 0x5a,
	0xb4, 0x73, 0x74, 0xda, 0xa9, 0x6d, 0x88, 0xf5, 0xcb, 0x93, 0xb6, 0x58, 0xa7, 0xc4, 0xba, 0xdd,
	0x79, 0xd6, 0x39, 0xed, 0xd4, 0xd2, 0x87, 0xff, 0xa9, 0x41, 0xe6, 0xe8, 0xa4, 0x4b, 0x1e, 0x43,
	0xb9, 0x85, 0x93, 0x55, 0xf8, 0x8b, 0xc8, 0x52, 0x8c, 0xaf, 0x2f, 0xa5, 0x6a, 0x1b, 0xe4, 0x11,
	0x40, 0xd7, 0x16, 0x53, 0x25, 0xfe, 0x38, 0xb0, 0x83, 0x5c, 0x33, 0x42, 0xe0, 0xc2, 0x15, 0xd2,
	0x9b, 0xc2, 0xdf, 0xd3, 0x0f, 0x9c, 0x5b, 0xc8, 0x17, 0x90, 0x42, 0xe1, 0x8f, 0x96, 0x09, 0x7b,
	0xda, 0x06, 0xf9, 0x02, 0xca, 0x6d, 0x36, 0x62, 0x33, 0xd3, 0xa7, 0x61, 0xaf, 0xef, 0x2c, 0x4c,
	0x92, 0x9d, 0xb1, 0xe3, 0x5f, 0x69, 0x1b, 0xa4, 0x0d, 0xb7, 0x63, 0x42, 0xde, 0x53, 0xee, 0x86,
	0xe0, 0x46, 0xca, 0x31, 0xac, 0x5b, 0xa1, 0xe5, 0x3b, 0xd8, 0x5a, 0xe8, 0xf3, 0xe4, 0x5e, 0xbc,
	0x4d, 0x25, 0xcc, 0x01, 0xf5, 0xfa, 0xb2, 0xf7, 0xc8, 0xe8, 0x69, 0x1b, 0x0f, 0x53, 0xa4, 0x05,
	0xd5, 0x69, 0x44, 0x82, 0x8f, 0xb3, 0x9d, 0x79, 0x11, 0x49, 0x5f, 0x61, 0xe0, 0x11, 0x54, 0xa6,
	0x4a, 0x64, 0x9e, 0x2d, 0xb8, 0x11, 0xc9, 0x2b, 0x54, 0x7c, 0x0e, 0x4a, 0xdf, 0xd7, 0x5d, 0x0c,
	0xec, 0xcc, 0xb3, 0x49, 0xa1, 0x6c, 0x01, 0xcc, 0x4a, 0x87, 0xfc, 0x3c, 0xc6, 0xb5, 0x50, 0x53,
	0xf5, 0x5b, 0x0b, 0x5a, 0xda, 0x22, 0xa2, 0x9f, 0x41, 0x0e, 0xf9, 0x6e, 0x14, 0xc9, 0x2e, 0x10,
	0xf9, 0xc4, 0xd8, 0xd7, 0x55, 0xf2, 0x7c, 0xb8, 0x5a, 0x55, 0xbc, 0x27, 0xff, 0x78, 0x55, 0x8f,
	0x60, 0xeb, 0x94, 0x4f, 0x8c, 0x8b, 0x98, 0xa6, 0x1b, 0xe7, 0xd5, 0x63, 0xa8, 0x1e, 0x33, 0x7f,
	0x95, 0x6c, 0xb2, 0x51, 0xda, 0x06, 0xf9, 0x56, 0xe2, 0x57, 0x7c, 0x90, 0xbe, 0xb7, 0x10, 0x8b,
	0x65, 0x33, 0xd7, 0x5c, 0x5a, 0xc6, 0x58, 0xd0, 0x30, 0x22, 0xcb, 0xe6, 0xc7, 0xbd, 0xcb, 0x8a,
	0xe0, 0x76, 0xdc, 0xba, 0xfd, 0xe5, 0x45, 0xb3, 0xd4, 0xc4, 0xdd, 0x44, 0x13, 0x23, 0xe5, 0xf3,
	0x2d, 0xdc, 0x5a, 0x32, 0xef, 0x91, 0x07, 0x31, 0xd9, 0xe4, 0x89, 0x70, 0xc5, 0x23, 0xfe, 0x0a,
	0x1f, 0x2d, 0x9d, 0xdc, 0xc8, 0xa7, 0x2b, 0x75, 0x47, 0xa7, 0xbb, 0x15, 0xda, 0x5f, 0x01, 0x59,
	0x1c, 0xdc, 0xc8, 0xfd, 0x98, 0xea, 0xc4, 0xc9, 0x6e, 0x65, 0x4a, 0x15, 0x65, 0xe4, 0x8e, 0x46,
	0x23, 0x92, 0xc0, 0xb6, 0x42, 0xfc, 0x09, 0x28, 0xe1, 0x8c, 0x47, 0xee, 0xc4, 0x8c, 0x99, 0x1b,
	0xfd, 0x56, 0xea, 0x80, 0xd9, 0xa0, 0x37, 0x87, 0x0d, 0x0b, 0x13, 0x60, 0x7d, 0xc9, 0x04, 0x21,
	0x75, 0xcc, 0x26, 0xba, 0x39, 0x1d, 0x0b, 0xa3, 0x5e, 0x82, 0x8e, 0x36, 0x94, 0x22, 0xd3, 0x1b,
	0x89, 0xa7, 0xd3, 0xe2, 0x5c, 0x97, 0xac, 0x25, 0x32, 0xaa, 0xcd, 0x69, 0x59, 0x1c, 0xe2, 0x12,
	0xb4, 0x9c, 0x42, 0x75, 0x6e, 0x92, 0x21, 0x77, 0x97, 0x97, 0x42, 0x6c, 0xce, 0xa9, 0xab, 0x8b,
	0xda, 0x22, 0xc9, 0x7f, 0x88, 0xf8, 0x21, 0x25, 0x9e, 0x72, 0x37, 0x0e, 0xa5, 0xb7, 0x16, 0x45,
	0x45, 0x69, 0x7f, 0x1d, 0x96, 0x76, 0x82, 0x58, 0x62, 0x5c, 0x9f, 0x14, 0xbf, 0x2b, 0x04, 0xda,
	0x86, 0x79, 0x3c, 0xfc, 0xe2, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x64, 0xa1, 0xcb, 0x0b,
	0x1a, 0x00, 0x00,
}
