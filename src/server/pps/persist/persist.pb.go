// Code generated by protoc-gen-go.
// source: server/pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	server/pps/persist/persist.proto

It has these top-level messages:
	JobInfo
	JobInfos
	JobOutput
	JobState
	PipelineInfo
	PipelineInfos
	Shard
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/pb/go/google/protobuf"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"
import pachyderm_pps "github.com/pachyderm/pachyderm/src/client/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type JobInfo struct {
	JobID        string                      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Transform    *pachyderm_pps.Transform    `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineName string                      `protobuf:"bytes,3,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Shards       uint64                      `protobuf:"varint,4,opt,name=shards" json:"shards,omitempty"`
	Inputs       []*pachyderm_pps.JobInput   `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	ParentJob    *pachyderm_pps.Job          `protobuf:"bytes,6,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	CreatedAt    *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	OutputCommit *pfs.Commit                 `protobuf:"bytes,8,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	State        pachyderm_pps.JobState      `protobuf:"varint,9,opt,name=state,enum=pachyderm.pps.JobState" json:"state,omitempty"`
	CommitIndex  string                      `protobuf:"bytes,10,opt,name=commit_index,json=commitIndex" json:"commit_index,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetInputs() []*pachyderm_pps.JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobInfo) GetParentJob() *pachyderm_pps.Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *JobInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type JobOutput struct {
	JobID        string      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
}

func (m *JobOutput) Reset()                    { *m = JobOutput{} }
func (m *JobOutput) String() string            { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()               {}
func (*JobOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobOutput) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobState struct {
	JobID string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	State pachyderm_pps.JobState `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.JobState" json:"state,omitempty"`
}

func (m *JobState) Reset()                    { *m = JobState{} }
func (m *JobState) String() string            { return proto.CompactTextString(m) }
func (*JobState) ProtoMessage()               {}
func (*JobState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PipelineInfo struct {
	PipelineName string                         `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Transform    *pachyderm_pps.Transform       `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Shards       uint64                         `protobuf:"varint,3,opt,name=shards" json:"shards,omitempty"`
	Inputs       []*pachyderm_pps.PipelineInput `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	OutputRepo   *pfs.Repo                      `protobuf:"bytes,5,opt,name=output_repo,json=outputRepo" json:"output_repo,omitempty"`
	CreatedAt    *google_protobuf1.Timestamp    `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PipelineInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetInputs() []*pachyderm_pps.PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type Shard struct {
	Shard uint64 `protobuf:"varint,1,opt,name=shard" json:"shard,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*JobInfo)(nil), "pachyderm.pps.persist.JobInfo")
	proto.RegisterType((*JobInfos)(nil), "pachyderm.pps.persist.JobInfos")
	proto.RegisterType((*JobOutput)(nil), "pachyderm.pps.persist.JobOutput")
	proto.RegisterType((*JobState)(nil), "pachyderm.pps.persist.JobState")
	proto.RegisterType((*PipelineInfo)(nil), "pachyderm.pps.persist.PipelineInfo")
	proto.RegisterType((*PipelineInfos)(nil), "pachyderm.pps.persist.PipelineInfos")
	proto.RegisterType((*Shard)(nil), "pachyderm.pps.persist.Shard")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error)
	InspectJob(ctx context.Context, in *pachyderm_pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobOutput rpcs
	CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Pipeline rpcs
	CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*PipelineInfo, error)
	GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Atomically increment a number and return the old value
	ShardStart(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*Shard, error)
	// Atomically increment a number and return the new value
	ShardFinish(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*Shard, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectJob(ctx context.Context, in *pachyderm_pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListJobInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetPipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipelineInfos(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListPipelineInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeletePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ShardStart(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*Shard, error) {
	out := new(Shard)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ShardStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ShardFinish(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*Shard, error) {
	out := new(Shard)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ShardFinish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(context.Context, *JobInfo) (*JobInfo, error)
	InspectJob(context.Context, *pachyderm_pps.InspectJobRequest) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(context.Context, *pachyderm_pps.ListJobRequest) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(context.Context, *pachyderm_pps.Job) (*google_protobuf.Empty, error)
	// JobOutput rpcs
	CreateJobOutput(context.Context, *JobOutput) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(context.Context, *JobState) (*google_protobuf.Empty, error)
	// Pipeline rpcs
	CreatePipelineInfo(context.Context, *PipelineInfo) (*PipelineInfo, error)
	GetPipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(context.Context, *google_protobuf.Empty) (*PipelineInfos, error)
	DeletePipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*google_protobuf.Empty, error)
	// Atomically increment a number and return the old value
	ShardStart(context.Context, *pachyderm_pps.Job) (*Shard, error)
	// Atomically increment a number and return the new value
	ShardFinish(context.Context, *pachyderm_pps.Job) (*Shard, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).InspectJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListJobInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListJobInfos(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeleteJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeleteJobInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreateJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobOutput(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreateJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JobState)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreateJobState(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_CreatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).CreatePipelineInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetPipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetPipelineInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListPipelineInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListPipelineInfos(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeletePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeletePipelineInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ShardStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ShardStart(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ShardFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ShardFinish(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.persist.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobInfo",
			Handler:    _API_CreateJobInfo_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _API_InspectJob_Handler,
		},
		{
			MethodName: "ListJobInfos",
			Handler:    _API_ListJobInfos_Handler,
		},
		{
			MethodName: "DeleteJobInfo",
			Handler:    _API_DeleteJobInfo_Handler,
		},
		{
			MethodName: "CreateJobOutput",
			Handler:    _API_CreateJobOutput_Handler,
		},
		{
			MethodName: "CreateJobState",
			Handler:    _API_CreateJobState_Handler,
		},
		{
			MethodName: "CreatePipelineInfo",
			Handler:    _API_CreatePipelineInfo_Handler,
		},
		{
			MethodName: "GetPipelineInfo",
			Handler:    _API_GetPipelineInfo_Handler,
		},
		{
			MethodName: "ListPipelineInfos",
			Handler:    _API_ListPipelineInfos_Handler,
		},
		{
			MethodName: "DeletePipelineInfo",
			Handler:    _API_DeletePipelineInfo_Handler,
		},
		{
			MethodName: "ShardStart",
			Handler:    _API_ShardStart_Handler,
		},
		{
			MethodName: "ShardFinish",
			Handler:    _API_ShardFinish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0x9b, 0x63, 0x3d, 0x49, 0x5a, 0xfd, 0xab, 0xd2, 0x5a, 0xa1, 0xa5, 0xc1, 0xe5, 0x02,
	0x21, 0xe1, 0x40, 0x41, 0x48, 0x5c, 0x20, 0x51, 0x4a, 0x29, 0xe1, 0x98, 0xba, 0xbd, 0x81, 0x9b,
	0xe0, 0x24, 0x9b, 0xd6, 0x55, 0x6c, 0x2f, 0xde, 0x0d, 0xa2, 0x6f, 0xc3, 0x1b, 0x70, 0xcb, 0xe3,
	0x31, 0xde, 0xb5, 0x73, 0x70, 0xe2, 0xd4, 0xf4, 0x22, 0xca, 0xee, 0x1c, 0xbe, 0x9d, 0xf9, 0xe6,
	0x1b, 0x43, 0x83, 0xd3, 0xe0, 0x07, 0x0d, 0x9a, 0x8c, 0xf1, 0x26, 0xa3, 0x01, 0x77, 0xb8, 0x88,
	0xff, 0x4d, 0x16, 0xf8, 0xc2, 0x27, 0xb7, 0x98, 0xdd, 0xbb, 0xb8, 0xea, 0xd3, 0xc0, 0x35, 0x31,
	0xc8, 0x8c, 0x9c, 0xf5, 0xdb, 0xe7, 0xbe, 0x7f, 0x3e, 0xa4, 0x4d, 0x19, 0xd4, 0x1d, 0x0d, 0x9a,
	0xd4, 0x65, 0xe2, 0x4a, 0xe5, 0xd4, 0x77, 0x93, 0x4e, 0xe1, 0xb8, 0x94, 0x0b, 0xdb, 0x65, 0x51,
	0xc0, 0x46, 0x6f, 0xe8, 0x50, 0x0f, 0x9f, 0x1a, 0xf0, 0xf0, 0x97, 0xb4, 0x86, 0xc5, 0xb0, 0xc8,
	0x6a, 0xfc, 0xc9, 0x43, 0xf9, 0x9d, 0xdf, 0x6d, 0x79, 0x03, 0x2c, 0x06, 0x4a, 0x97, 0x7e, 0xb7,
	0xe3, 0xf4, 0xf5, 0x95, 0xc6, 0xca, 0x7d, 0xcd, 0x2a, 0xe2, 0xad, 0xd5, 0x27, 0xcf, 0x40, 0x13,
	0x81, 0xed, 0xf1, 0x81, 0x1f, 0xb8, 0x7a, 0x0e, 0x3d, 0x95, 0x7d, 0xdd, 0x9c, 0xad, 0xfb, 0x2c,
	0xf6, 0x5b, 0x93, 0x50, 0xb2, 0x07, 0x35, 0xe6, 0x30, 0x3a, 0x74, 0x3c, 0xda, 0xf1, 0x6c, 0x97,
	0xea, 0x79, 0x89, 0x5a, 0x8d, 0x8d, 0x9f, 0xd0, 0x46, 0x36, 0xa1, 0xc4, 0x2f, 0xec, 0xa0, 0xcf,
	0xf5, 0x02, 0x7a, 0x0b, 0x56, 0x74, 0x23, 0x4d, 0x28, 0x39, 0x1e, 0x1b, 0x09, 0xae, 0x17, 0x1b,
	0x79, 0x7c, 0x71, 0x2b, 0xf1, 0xa2, 0xac, 0x19, 0xfd, 0x56, 0x14, 0x46, 0x1e, 0x03, 0x30, 0x3b,
	0xc0, 0x06, 0x3b, 0x58, 0xb5, 0x5e, 0x92, 0x65, 0x92, 0xf9, 0x24, 0x4b, 0x53, 0x51, 0x78, 0x24,
	0xcf, 0x01, 0x7a, 0x01, 0xb5, 0x05, 0xed, 0x77, 0x6c, 0xa1, 0x97, 0x65, 0x4a, 0xdd, 0x54, 0xec,
	0x9a, 0x31, 0xbb, 0xe6, 0x59, 0xcc, 0xae, 0xa5, 0x45, 0xd1, 0x07, 0x82, 0x3c, 0x82, 0x9a, 0x3f,
	0x12, 0xf8, 0x70, 0xa7, 0xe7, 0xbb, 0xae, 0x23, 0xf4, 0x55, 0x99, 0x5d, 0x31, 0x43, 0xbe, 0x0f,
	0xa5, 0xc9, 0xaa, 0xaa, 0x08, 0x75, 0x23, 0x0f, 0xa1, 0x88, 0x28, 0x82, 0xea, 0x1a, 0x46, 0xae,
	0x2d, 0xea, 0xe7, 0x34, 0x74, 0x5b, 0x2a, 0x8a, 0xdc, 0x85, 0xaa, 0x42, 0xee, 0x38, 0x5e, 0x9f,
	0xfe, 0xd4, 0x41, 0x72, 0x57, 0x51, 0xb6, 0x56, 0x68, 0x32, 0x8e, 0x60, 0x35, 0x9a, 0x1c, 0xc7,
	0x56, 0x56, 0xe5, 0xe8, 0xf0, 0x82, 0xc3, 0x0b, 0x09, 0xbb, 0x63, 0x2e, 0x94, 0x96, 0x19, 0xa5,
	0x58, 0xe5, 0x4b, 0x75, 0x30, 0xce, 0x40, 0x43, 0xdb, 0x67, 0x59, 0x6b, 0x9a, 0x04, 0xe6, 0xda,
	0xcd, 0x5d, 0xd3, 0xae, 0xd1, 0x96, 0xc5, 0xc9, 0x96, 0xd2, 0x40, 0xc7, 0x8c, 0xe4, 0xb2, 0x30,
	0x62, 0xfc, 0xca, 0x41, 0xb5, 0x1d, 0x49, 0x47, 0xca, 0x75, 0x4e, 0x5f, 0x2b, 0x0b, 0xf4, 0x75,
	0x53, 0xf1, 0x4e, 0x74, 0x99, 0x9f, 0xd1, 0xe5, 0xd3, 0xb1, 0x2e, 0x0b, 0x92, 0xe6, 0xed, 0x04,
	0xd8, 0xa4, 0xc2, 0x69, 0x71, 0x3e, 0x80, 0x4a, 0xc4, 0x5f, 0x40, 0x99, 0x8f, 0x92, 0x0e, 0xeb,
	0xd0, 0x24, 0x7b, 0x16, 0x1a, 0x2c, 0x50, 0xde, 0xf0, 0x9c, 0x50, 0x65, 0xe9, 0x1f, 0x54, 0x69,
	0x7c, 0x81, 0xda, 0x34, 0x43, 0x9c, 0xbc, 0x9d, 0xa2, 0x68, 0x4a, 0x1b, 0x7b, 0x29, 0xda, 0x98,
	0x4e, 0x9e, 0xf0, 0x28, 0x55, 0xb2, 0x03, 0xc5, 0xd3, 0x90, 0x01, 0xb2, 0x81, 0x53, 0x0b, 0x0f,
	0x92, 0xed, 0x82, 0xa5, 0x2e, 0xfb, 0xbf, 0xcb, 0x90, 0x3f, 0x68, 0xb7, 0xc8, 0x09, 0xd4, 0x0e,
	0x65, 0x39, 0xf1, 0x37, 0xe5, 0x1a, 0x19, 0xd6, 0xaf, 0xf1, 0x1b, 0xff, 0x91, 0x36, 0x40, 0xcb,
	0xe3, 0x8c, 0xf6, 0xe4, 0xce, 0x36, 0x12, 0xf1, 0x13, 0x97, 0x45, 0xbf, 0x8f, 0x90, 0x92, 0x4c,
	0x88, 0xd5, 0x0f, 0x68, 0x19, 0x2f, 0xcf, 0x4e, 0x22, 0x23, 0x72, 0xc6, 0x80, 0xbb, 0xcb, 0x01,
	0x39, 0x22, 0xbe, 0x80, 0xda, 0x6b, 0x3a, 0xa4, 0x93, 0xb6, 0x17, 0x7c, 0x79, 0xea, 0x9b, 0x73,
	0x43, 0x3c, 0x0a, 0xbf, 0xea, 0x98, 0xfe, 0x11, 0xd6, 0xc7, 0xac, 0x45, 0x8b, 0xd8, 0x48, 0x7f,
	0x54, 0x45, 0x2c, 0x81, 0x7b, 0x0f, 0x6b, 0x63, 0x38, 0xb5, 0x81, 0x4b, 0x5a, 0x90, 0x01, 0x4b,
	0xc0, 0xbe, 0x01, 0x51, 0x60, 0xb3, 0xbb, 0x97, 0x41, 0x41, 0xf5, 0x2c, 0x41, 0xf8, 0xc2, 0x09,
	0xac, 0x1f, 0x53, 0x31, 0x03, 0xbf, 0x95, 0xb2, 0x55, 0x59, 0x21, 0x4f, 0xe1, 0xff, 0x70, 0x88,
	0xb3, 0xcb, 0x90, 0xd2, 0x63, 0xfd, 0x5e, 0x06, 0xcc, 0x70, 0xc8, 0xc7, 0x40, 0xd4, 0x90, 0xb3,
	0x95, 0x9a, 0x4e, 0xe9, 0x4b, 0x00, 0xb9, 0x4b, 0x48, 0x7d, 0x20, 0x16, 0x4a, 0x65, 0x3b, 0xa5,
	0x24, 0x99, 0x86, 0x08, 0x07, 0x50, 0x91, 0xc7, 0x37, 0x8e, 0xe7, 0xf0, 0x8b, 0x9b, 0x40, 0xbc,
	0xd2, 0xbe, 0x96, 0x23, 0x53, 0xb7, 0x24, 0x2b, 0x7c, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x15,
	0x00, 0x37, 0x22, 0xaf, 0x08, 0x00, 0x00,
}
