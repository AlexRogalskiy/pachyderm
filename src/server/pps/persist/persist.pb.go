// Code generated by protoc-gen-go.
// source: server/pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	server/pps/persist/persist.proto

It has these top-level messages:
	JobInfo
	PodInfo
	Chunk
	JobInfos
	JobOutput
	JobState
	AddOutputCommitRequest
	PipelineInfo
	PipelineInfoChange
	PipelineInfos
	SubscribePipelineInfosRequest
	ListPipelineInfosRequest
	Shard
	UpdatePipelineStateRequest
	UpdatePipelineStoppedRequest
	BlockPipelineStateRequest
	AddChunkRequest
	ClaimChunkRequest
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/pb/go/google/protobuf"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"
import pachyderm_pps "github.com/pachyderm/pachyderm/src/client/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PodState int32

const (
	// We've heard from the pod saying that it's going to run the user container
	PodState_RUNNING PodState = 0
	// We've heard from the pod saying that it failed (for any reason)
	PodState_FAILED PodState = 1
	// We lost contact with the pod
	PodState_CRASHED PodState = 2
	// The pod succeeded
	PodState_SUCCESS PodState = 3
)

var PodState_name = map[int32]string{
	0: "RUNNING",
	1: "FAILED",
	2: "CRASHED",
	3: "SUCCESS",
}
var PodState_value = map[string]int32{
	"RUNNING": 0,
	"FAILED":  1,
	"CRASHED": 2,
	"SUCCESS": 3,
}

func (x PodState) String() string {
	return proto.EnumName(PodState_name, int32(x))
}
func (PodState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChunkState int32

const (
	// the chunk is available for a pod to work on
	ChunkState_UNASSIGNED ChunkState = 0
	// the chunk has been assigned to a pod
	ChunkState_ASSIGNED ChunkState = 1
	// the chunk has been processed successfully
	ChunkState_FINISHED ChunkState = 2
)

var ChunkState_name = map[int32]string{
	0: "UNASSIGNED",
	1: "ASSIGNED",
	2: "FINISHED",
}
var ChunkState_value = map[string]int32{
	"UNASSIGNED": 0,
	"ASSIGNED":   1,
	"FINISHED":   2,
}

func (x ChunkState) String() string {
	return proto.EnumName(ChunkState_name, int32(x))
}
func (ChunkState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ChangeType int32

const (
	ChangeType_CREATE ChangeType = 0
	ChangeType_UPDATE ChangeType = 1
	ChangeType_DELETE ChangeType = 2
)

var ChangeType_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}
var ChangeType_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x ChangeType) String() string {
	return proto.EnumName(ChangeType_name, int32(x))
}
func (ChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type JobInfo struct {
	JobID              string                         `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Transform          *pachyderm_pps.Transform       `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineName       string                         `protobuf:"bytes,3,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	ParallelismSpec    *pachyderm_pps.ParallelismSpec `protobuf:"bytes,18,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs             []*pachyderm_pps.JobInput      `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	ParentJob          *pachyderm_pps.Job             `protobuf:"bytes,6,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Started            *google_protobuf1.Timestamp    `protobuf:"bytes,7,opt,name=started" json:"started,omitempty"`
	Finished           *google_protobuf1.Timestamp    `protobuf:"bytes,8,opt,name=finished" json:"finished,omitempty"`
	OutputCommit       *pfs.Commit                    `protobuf:"bytes,9,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	Branch             string                         `protobuf:"bytes,17,opt,name=branch" json:"branch,omitempty"`
	State              pachyderm_pps.JobState         `protobuf:"varint,10,opt,name=state,enum=pachyderm.pps.JobState" json:"state,omitempty"`
	CommitIndex        string                         `protobuf:"bytes,11,opt,name=commit_index,json=commitIndex" json:"commit_index,omitempty"`
	DefaultShardModuli []uint64                       `protobuf:"varint,15,rep,packed,name=default_shard_moduli,json=defaultShardModuli" json:"default_shard_moduli,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetParallelismSpec() *pachyderm_pps.ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *JobInfo) GetInputs() []*pachyderm_pps.JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobInfo) GetParentJob() *pachyderm_pps.Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *JobInfo) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *JobInfo) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type PodInfo struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State        PodState    `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.persist.PodState" json:"state,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,3,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PodInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

// Chunk is a unit of work that can be assigned to a pod
type Chunk struct {
	ID    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	JobID string `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`// the ID of the job that the Chunk belongs to

	// moduli and index together specify the portion of inputs that the shard represents
	// For instance, if moduli is (2, 3, 4) and index is 15, then we have:
	// 15 = 1 * (3 * 4) + 0 * 4 + 3 * 1
	// So the shard represents the second half of input 1, the first third of input 2,
	// and the fourth quarter of input 3.
	Moduli []uint64 `protobuf:"varint,3,rep,packed,name=moduli" json:"moduli,omitempty"`
	Index  uint64   `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	// the pod that currently owns this shard
	Owner string `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	// A series of pods, in chronological order, that have processed this shard
	PodInfos []*PodInfo `protobuf:"bytes,6,rep,name=pod_infos,json=podInfos" json:"pod_infos,omitempty"`
	State    ChunkState `protobuf:"varint,7,opt,name=state,enum=pachyderm.pps.persist.ChunkState" json:"state,omitempty"`
	// a unix timestamp representing the last time we received a heartbeat saying
	// that a pod is working on this shard
	TimeTouched uint64 `protobuf:"varint,8,opt,name=time_touched,json=timeTouched" json:"time_touched,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Chunk) GetPodInfos() []*PodInfo {
	if m != nil {
		return m.PodInfos
	}
	return nil
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type JobOutput struct {
	JobID        string      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
}

func (m *JobOutput) Reset()                    { *m = JobOutput{} }
func (m *JobOutput) String() string            { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()               {}
func (*JobOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JobOutput) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobState struct {
	JobID    string                      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	State    pachyderm_pps.JobState      `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.JobState" json:"state,omitempty"`
	Finished *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=finished" json:"finished,omitempty"`
}

func (m *JobState) Reset()                    { *m = JobState{} }
func (m *JobState) String() string            { return proto.CompactTextString(m) }
func (*JobState) ProtoMessage()               {}
func (*JobState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JobState) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

type AddOutputCommitRequest struct {
	JobID  string      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Commit *pfs.Commit `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Branch string      `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *AddOutputCommitRequest) Reset()                    { *m = AddOutputCommitRequest{} }
func (m *AddOutputCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*AddOutputCommitRequest) ProtoMessage()               {}
func (*AddOutputCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddOutputCommitRequest) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type PipelineInfo struct {
	PipelineName    string                         `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Transform       *pachyderm_pps.Transform       `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	ParallelismSpec *pachyderm_pps.ParallelismSpec `protobuf:"bytes,12,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*pachyderm_pps.PipelineInput `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	OutputRepo      *pfs.Repo                      `protobuf:"bytes,5,opt,name=output_repo,json=outputRepo" json:"output_repo,omitempty"`
	CreatedAt       *google_protobuf1.Timestamp    `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Shard           uint64                         `protobuf:"varint,7,opt,name=shard" json:"shard,omitempty"`
	State           pachyderm_pps.PipelineState    `protobuf:"varint,8,opt,name=state,enum=pachyderm.pps.PipelineState" json:"state,omitempty"`
	RecentError     string                         `protobuf:"bytes,9,opt,name=recent_error,json=recentError" json:"recent_error,omitempty"`
	JobCounts       map[int32]int32                `protobuf:"bytes,10,rep,name=job_counts,json=jobCounts" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Stopped         bool                           `protobuf:"varint,11,opt,name=stopped" json:"stopped,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PipelineInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetParallelismSpec() *pachyderm_pps.ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *PipelineInfo) GetInputs() []*pachyderm_pps.PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineInfo) GetJobCounts() map[int32]int32 {
	if m != nil {
		return m.JobCounts
	}
	return nil
}

type PipelineInfoChange struct {
	Pipeline *PipelineInfo `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Type     ChangeType    `protobuf:"varint,2,opt,name=type,enum=pachyderm.pps.persist.ChangeType" json:"type,omitempty"`
}

func (m *PipelineInfoChange) Reset()                    { *m = PipelineInfoChange{} }
func (m *PipelineInfoChange) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfoChange) ProtoMessage()               {}
func (*PipelineInfoChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PipelineInfoChange) GetPipeline() *PipelineInfo {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type SubscribePipelineInfosRequest struct {
	IncludeInitial bool   `protobuf:"varint,1,opt,name=include_initial,json=includeInitial" json:"include_initial,omitempty"`
	Shard          *Shard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *SubscribePipelineInfosRequest) Reset()                    { *m = SubscribePipelineInfosRequest{} }
func (m *SubscribePipelineInfosRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribePipelineInfosRequest) ProtoMessage()               {}
func (*SubscribePipelineInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SubscribePipelineInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type ListPipelineInfosRequest struct {
	Shard *Shard `protobuf:"bytes,1,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListPipelineInfosRequest) Reset()                    { *m = ListPipelineInfosRequest{} }
func (m *ListPipelineInfosRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPipelineInfosRequest) ProtoMessage()               {}
func (*ListPipelineInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListPipelineInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type Shard struct {
	Number uint64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type UpdatePipelineStateRequest struct {
	PipelineName string                      `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	State        pachyderm_pps.PipelineState `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.PipelineState" json:"state,omitempty"`
	RecentError  string                      `protobuf:"bytes,3,opt,name=recent_error,json=recentError" json:"recent_error,omitempty"`
}

func (m *UpdatePipelineStateRequest) Reset()                    { *m = UpdatePipelineStateRequest{} }
func (m *UpdatePipelineStateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePipelineStateRequest) ProtoMessage()               {}
func (*UpdatePipelineStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type UpdatePipelineStoppedRequest struct {
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Stopped      bool   `protobuf:"varint,2,opt,name=stopped" json:"stopped,omitempty"`
}

func (m *UpdatePipelineStoppedRequest) Reset()                    { *m = UpdatePipelineStoppedRequest{} }
func (m *UpdatePipelineStoppedRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePipelineStoppedRequest) ProtoMessage()               {}
func (*UpdatePipelineStoppedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type BlockPipelineStateRequest struct {
	PipelineName string                      `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	State        pachyderm_pps.PipelineState `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.PipelineState" json:"state,omitempty"`
}

func (m *BlockPipelineStateRequest) Reset()                    { *m = BlockPipelineStateRequest{} }
func (m *BlockPipelineStateRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockPipelineStateRequest) ProtoMessage()               {}
func (*BlockPipelineStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type AddChunkRequest struct {
	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *AddChunkRequest) Reset()                    { *m = AddChunkRequest{} }
func (m *AddChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*AddChunkRequest) ProtoMessage()               {}
func (*AddChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AddChunkRequest) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ClaimChunkRequest struct {
	JobID   string   `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PodInfo *PodInfo `protobuf:"bytes,3,opt,name=pod_info,json=podInfo" json:"pod_info,omitempty"`
}

func (m *ClaimChunkRequest) Reset()                    { *m = ClaimChunkRequest{} }
func (m *ClaimChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*ClaimChunkRequest) ProtoMessage()               {}
func (*ClaimChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ClaimChunkRequest) GetPodInfo() *PodInfo {
	if m != nil {
		return m.PodInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*JobInfo)(nil), "pachyderm.pps.persist.JobInfo")
	proto.RegisterType((*PodInfo)(nil), "pachyderm.pps.persist.PodInfo")
	proto.RegisterType((*Chunk)(nil), "pachyderm.pps.persist.Chunk")
	proto.RegisterType((*JobInfos)(nil), "pachyderm.pps.persist.JobInfos")
	proto.RegisterType((*JobOutput)(nil), "pachyderm.pps.persist.JobOutput")
	proto.RegisterType((*JobState)(nil), "pachyderm.pps.persist.JobState")
	proto.RegisterType((*AddOutputCommitRequest)(nil), "pachyderm.pps.persist.AddOutputCommitRequest")
	proto.RegisterType((*PipelineInfo)(nil), "pachyderm.pps.persist.PipelineInfo")
	proto.RegisterType((*PipelineInfoChange)(nil), "pachyderm.pps.persist.PipelineInfoChange")
	proto.RegisterType((*PipelineInfos)(nil), "pachyderm.pps.persist.PipelineInfos")
	proto.RegisterType((*SubscribePipelineInfosRequest)(nil), "pachyderm.pps.persist.SubscribePipelineInfosRequest")
	proto.RegisterType((*ListPipelineInfosRequest)(nil), "pachyderm.pps.persist.ListPipelineInfosRequest")
	proto.RegisterType((*Shard)(nil), "pachyderm.pps.persist.Shard")
	proto.RegisterType((*UpdatePipelineStateRequest)(nil), "pachyderm.pps.persist.UpdatePipelineStateRequest")
	proto.RegisterType((*UpdatePipelineStoppedRequest)(nil), "pachyderm.pps.persist.UpdatePipelineStoppedRequest")
	proto.RegisterType((*BlockPipelineStateRequest)(nil), "pachyderm.pps.persist.BlockPipelineStateRequest")
	proto.RegisterType((*AddChunkRequest)(nil), "pachyderm.pps.persist.AddChunkRequest")
	proto.RegisterType((*ClaimChunkRequest)(nil), "pachyderm.pps.persist.ClaimChunkRequest")
	proto.RegisterEnum("pachyderm.pps.persist.PodState", PodState_name, PodState_value)
	proto.RegisterEnum("pachyderm.pps.persist.ChunkState", ChunkState_name, ChunkState_value)
	proto.RegisterEnum("pachyderm.pps.persist.ChangeType", ChangeType_name, ChangeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for API service

type APIClient interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error)
	InspectJob(ctx context.Context, in *pachyderm_pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteJobInfosForPipeline(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobOutput rpcs
	CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// StartJob sets the state of the job to "running" if the state
	// is currently "pulling".
	// This API updates the job state in a transactional manner.
	StartJob(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error)
	// Pipeline rpcs
	CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(ctx context.Context, in *ListPipelineInfosRequest, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SubscribePipelineInfos(ctx context.Context, in *SubscribePipelineInfosRequest, opts ...grpc.CallOption) (API_SubscribePipelineInfosClient, error)
	UpdatePipelineState(ctx context.Context, in *UpdatePipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdatePipelineStopped(ctx context.Context, in *UpdatePipelineStoppedRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BlockPipelineState(ctx context.Context, in *BlockPipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Chunk rpcs
	AddChunk(ctx context.Context, in *AddChunkRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ClaimChunk(ctx context.Context, in *ClaimChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectJob(ctx context.Context, in *pachyderm_pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListJobInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfosForPipeline(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteJobInfosForPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartJob(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetPipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipelineInfos(ctx context.Context, in *ListPipelineInfosRequest, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListPipelineInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeletePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SubscribePipelineInfos(ctx context.Context, in *SubscribePipelineInfosRequest, opts ...grpc.CallOption) (API_SubscribePipelineInfosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pachyderm.pps.persist.API/SubscribePipelineInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribePipelineInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribePipelineInfosClient interface {
	Recv() (*PipelineInfoChange, error)
	grpc.ClientStream
}

type aPISubscribePipelineInfosClient struct {
	grpc.ClientStream
}

func (x *aPISubscribePipelineInfosClient) Recv() (*PipelineInfoChange, error) {
	m := new(PipelineInfoChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) UpdatePipelineState(ctx context.Context, in *UpdatePipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipelineState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipelineStopped(ctx context.Context, in *UpdatePipelineStoppedRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipelineStopped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BlockPipelineState(ctx context.Context, in *BlockPipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/BlockPipelineState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddChunk(ctx context.Context, in *AddChunkRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/AddChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ClaimChunk(ctx context.Context, in *ClaimChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ClaimChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(context.Context, *JobInfo) (*JobInfo, error)
	InspectJob(context.Context, *pachyderm_pps.InspectJobRequest) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(context.Context, *pachyderm_pps.ListJobRequest) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(context.Context, *pachyderm_pps.Job) (*google_protobuf.Empty, error)
	DeleteJobInfosForPipeline(context.Context, *pachyderm_pps.Pipeline) (*google_protobuf.Empty, error)
	// JobOutput rpcs
	CreateJobOutput(context.Context, *JobOutput) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(context.Context, *JobState) (*google_protobuf.Empty, error)
	// StartJob sets the state of the job to "running" if the state
	// is currently "pulling".
	// This API updates the job state in a transactional manner.
	StartJob(context.Context, *pachyderm_pps.Job) (*JobInfo, error)
	// Pipeline rpcs
	CreatePipelineInfo(context.Context, *PipelineInfo) (*google_protobuf.Empty, error)
	UpdatePipelineInfo(context.Context, *PipelineInfo) (*google_protobuf.Empty, error)
	GetPipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(context.Context, *ListPipelineInfosRequest) (*PipelineInfos, error)
	DeletePipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*google_protobuf.Empty, error)
	SubscribePipelineInfos(*SubscribePipelineInfosRequest, API_SubscribePipelineInfosServer) error
	UpdatePipelineState(context.Context, *UpdatePipelineStateRequest) (*google_protobuf.Empty, error)
	UpdatePipelineStopped(context.Context, *UpdatePipelineStoppedRequest) (*google_protobuf.Empty, error)
	BlockPipelineState(context.Context, *BlockPipelineStateRequest) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// Chunk rpcs
	AddChunk(context.Context, *AddChunkRequest) (*google_protobuf.Empty, error)
	ClaimChunk(context.Context, *ClaimChunkRequest) (*Chunk, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreateJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobInfo(ctx, req.(*JobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/InspectJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectJob(ctx, req.(*pachyderm_pps.InspectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListJobInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListJobInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/ListJobInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListJobInfos(ctx, req.(*pachyderm_pps.ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeleteJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJobInfo(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJobInfosForPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJobInfosForPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeleteJobInfosForPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJobInfosForPipeline(ctx, req.(*pachyderm_pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreateJobOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobOutput(ctx, req.(*JobOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreateJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobState(ctx, req.(*JobState))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartJob(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreatePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreatePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreatePipelineInfo(ctx, req.(*PipelineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/UpdatePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineInfo(ctx, req.(*PipelineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/GetPipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPipelineInfo(ctx, req.(*pachyderm_pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPipelineInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPipelineInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/ListPipelineInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPipelineInfos(ctx, req.(*ListPipelineInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeletePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeletePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeletePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeletePipelineInfo(ctx, req.(*pachyderm_pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SubscribePipelineInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePipelineInfosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribePipelineInfos(m, &aPISubscribePipelineInfosServer{stream})
}

type API_SubscribePipelineInfosServer interface {
	Send(*PipelineInfoChange) error
	grpc.ServerStream
}

type aPISubscribePipelineInfosServer struct {
	grpc.ServerStream
}

func (x *aPISubscribePipelineInfosServer) Send(m *PipelineInfoChange) error {
	return x.ServerStream.SendMsg(m)
}

func _API_UpdatePipelineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/UpdatePipelineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineState(ctx, req.(*UpdatePipelineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdatePipelineStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStoppedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/UpdatePipelineStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineStopped(ctx, req.(*UpdatePipelineStoppedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BlockPipelineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPipelineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BlockPipelineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/BlockPipelineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BlockPipelineState(ctx, req.(*BlockPipelineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/AddChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddChunk(ctx, req.(*AddChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ClaimChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ClaimChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/ClaimChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ClaimChunk(ctx, req.(*ClaimChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.persist.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobInfo",
			Handler:    _API_CreateJobInfo_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _API_InspectJob_Handler,
		},
		{
			MethodName: "ListJobInfos",
			Handler:    _API_ListJobInfos_Handler,
		},
		{
			MethodName: "DeleteJobInfo",
			Handler:    _API_DeleteJobInfo_Handler,
		},
		{
			MethodName: "DeleteJobInfosForPipeline",
			Handler:    _API_DeleteJobInfosForPipeline_Handler,
		},
		{
			MethodName: "CreateJobOutput",
			Handler:    _API_CreateJobOutput_Handler,
		},
		{
			MethodName: "CreateJobState",
			Handler:    _API_CreateJobState_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _API_StartJob_Handler,
		},
		{
			MethodName: "CreatePipelineInfo",
			Handler:    _API_CreatePipelineInfo_Handler,
		},
		{
			MethodName: "UpdatePipelineInfo",
			Handler:    _API_UpdatePipelineInfo_Handler,
		},
		{
			MethodName: "GetPipelineInfo",
			Handler:    _API_GetPipelineInfo_Handler,
		},
		{
			MethodName: "ListPipelineInfos",
			Handler:    _API_ListPipelineInfos_Handler,
		},
		{
			MethodName: "DeletePipelineInfo",
			Handler:    _API_DeletePipelineInfo_Handler,
		},
		{
			MethodName: "UpdatePipelineState",
			Handler:    _API_UpdatePipelineState_Handler,
		},
		{
			MethodName: "UpdatePipelineStopped",
			Handler:    _API_UpdatePipelineStopped_Handler,
		},
		{
			MethodName: "BlockPipelineState",
			Handler:    _API_BlockPipelineState_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
		{
			MethodName: "AddChunk",
			Handler:    _API_AddChunk_Handler,
		},
		{
			MethodName: "ClaimChunk",
			Handler:    _API_ClaimChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePipelineInfos",
			Handler:       _API_SubscribePipelineInfos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("server/pps/persist/persist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x17, 0x6d, 0x73, 0xda, 0x46,
	0x1a, 0x81, 0x00, 0xf1, 0xf0, 0x62, 0xbc, 0x97, 0x38, 0x0a, 0xe7, 0xc4, 0x44, 0xb9, 0xb9, 0xf3,
	0x79, 0x26, 0xd8, 0x21, 0x4e, 0x2e, 0xb9, 0xbb, 0xcc, 0x1d, 0xc1, 0xc4, 0x81, 0x73, 0x88, 0x23,
	0xec, 0x9b, 0x69, 0x67, 0x3a, 0x54, 0xa0, 0x25, 0x96, 0x23, 0xa4, 0xad, 0x24, 0xd2, 0x7a, 0xa6,
	0xfd, 0x9a, 0xe9, 0x4c, 0xfb, 0x03, 0xfa, 0x2f, 0xfa, 0xdb, 0xfa, 0x0f, 0x3a, 0xbb, 0x2b, 0x61,
	0xf1, 0x22, 0x41, 0x33, 0x9d, 0x7e, 0x60, 0xd8, 0xe7, 0xd9, 0xe7, 0xfd, 0x75, 0x05, 0x55, 0x17,
	0x3b, 0x1f, 0xb0, 0xb3, 0x4f, 0x88, 0xbb, 0x4f, 0xb0, 0xe3, 0x1a, 0xae, 0x17, 0xfc, 0xd7, 0x88,
	0x63, 0x7b, 0x36, 0xba, 0x49, 0xb4, 0xe1, 0xc5, 0x95, 0x8e, 0x9d, 0x71, 0x8d, 0x10, 0xb7, 0xe6,
	0x5f, 0x56, 0xfe, 0xfc, 0xce, 0xb6, 0xdf, 0x99, 0x78, 0x9f, 0x11, 0x0d, 0x26, 0xa3, 0x7d, 0x3c,
	0x26, 0xde, 0x15, 0xe7, 0xa9, 0xec, 0xcc, 0x5f, 0x7a, 0xc6, 0x18, 0xbb, 0x9e, 0x36, 0x26, 0x3e,
	0xc1, 0x8d, 0xa1, 0x69, 0x60, 0xcb, 0xdb, 0x27, 0x23, 0x97, 0xfe, 0xe6, 0xb1, 0xd4, 0x18, 0xe2,
	0x63, 0x95, 0x8f, 0x69, 0xc8, 0x76, 0xec, 0x41, 0xdb, 0x1a, 0xd9, 0xe8, 0x26, 0x64, 0x2e, 0xed,
	0x41, 0xdf, 0xd0, 0x65, 0xa1, 0x2a, 0xec, 0xe6, 0xd4, 0xf4, 0xa5, 0x3d, 0x68, 0xeb, 0xe8, 0x09,
	0xe4, 0x3c, 0x47, 0xb3, 0xdc, 0x91, 0xed, 0x8c, 0xe5, 0x64, 0x55, 0xd8, 0xcd, 0xd7, 0xe5, 0xda,
	0xac, 0xdd, 0x67, 0xc1, 0xbd, 0x7a, 0x4d, 0x8a, 0xee, 0x43, 0x91, 0x18, 0x04, 0x9b, 0x86, 0x85,
	0xfb, 0x96, 0x36, 0xc6, 0x72, 0x8a, 0x49, 0x2d, 0x04, 0xc8, 0xae, 0x36, 0xc6, 0xa8, 0x0d, 0x65,
	0xa2, 0x39, 0x9a, 0x69, 0x62, 0xd3, 0x70, 0xc7, 0x7d, 0x97, 0xe0, 0xa1, 0x8c, 0x98, 0x8e, 0xbb,
	0x73, 0x3a, 0x4e, 0xaf, 0xc9, 0x7a, 0x04, 0x0f, 0xd5, 0x0d, 0x32, 0x8b, 0x40, 0xfb, 0x90, 0x31,
	0x2c, 0x32, 0xf1, 0x5c, 0x39, 0x5d, 0x4d, 0xed, 0xe6, 0xeb, 0xb7, 0xe6, 0x04, 0x30, 0x37, 0xc9,
	0xc4, 0x53, 0x7d, 0x32, 0xf4, 0x10, 0x80, 0x68, 0x0e, 0xb6, 0xbc, 0xfe, 0xa5, 0x3d, 0x90, 0x33,
	0x4c, 0x2b, 0x5a, 0x64, 0x52, 0x73, 0x9c, 0xaa, 0x63, 0x0f, 0xd0, 0x21, 0x64, 0x5d, 0x4f, 0x73,
	0x3c, 0xac, 0xcb, 0x59, 0x46, 0x5f, 0xa9, 0xf1, 0x6c, 0xd4, 0x82, 0x6c, 0xd4, 0xce, 0x82, 0x6c,
	0xa8, 0x01, 0x29, 0x7a, 0x02, 0xd2, 0xc8, 0xb0, 0x0c, 0xf7, 0x02, 0xeb, 0xb2, 0xb4, 0x92, 0x6d,
	0x4a, 0x8b, 0x0e, 0xa0, 0x68, 0x4f, 0x3c, 0x32, 0xf1, 0xfa, 0x43, 0x7b, 0x3c, 0x36, 0x3c, 0x39,
	0xc7, 0x98, 0xf3, 0x35, 0x9a, 0xd5, 0x26, 0x43, 0xa9, 0x05, 0x4e, 0xc1, 0x21, 0xb4, 0x05, 0x99,
	0x81, 0xa3, 0x59, 0xc3, 0x0b, 0x79, 0x93, 0x05, 0xdb, 0x87, 0xd0, 0x03, 0x48, 0xbb, 0x9e, 0xe6,
	0x61, 0x19, 0xaa, 0xc2, 0x6e, 0x69, 0x59, 0x68, 0x7a, 0xf4, 0x5a, 0xe5, 0x54, 0xe8, 0x1e, 0x14,
	0xb8, 0xc6, 0xbe, 0x61, 0xe9, 0xf8, 0x1b, 0x39, 0xcf, 0x84, 0xe5, 0x39, 0xae, 0x4d, 0x51, 0xe8,
	0x00, 0x6e, 0xe8, 0x78, 0xa4, 0x4d, 0x4c, 0xaf, 0xef, 0x5e, 0x68, 0x8e, 0xde, 0x1f, 0xdb, 0xfa,
	0xc4, 0x34, 0xe4, 0x8d, 0x6a, 0x6a, 0x57, 0x54, 0x91, 0x7f, 0xd7, 0xa3, 0x57, 0xaf, 0xd9, 0x4d,
	0x47, 0x94, 0xc4, 0x72, 0xba, 0x23, 0x4a, 0x85, 0x72, 0xb1, 0x23, 0x4a, 0xc5, 0x72, 0xa9, 0x23,
	0x4a, 0xa5, 0xf2, 0x46, 0x47, 0x94, 0xca, 0xe5, 0x4d, 0xe5, 0xa3, 0x00, 0xd9, 0x53, 0x5b, 0x67,
	0x85, 0x88, 0x40, 0x64, 0x05, 0xc3, 0xcb, 0x90, 0x9d, 0xd1, 0xe3, 0xc0, 0x83, 0x24, 0xf3, 0x60,
	0xa7, 0xb6, 0xb4, 0x73, 0x6a, 0xa7, 0xb6, 0x3e, 0xe3, 0xc9, 0x42, 0x08, 0x53, 0x2b, 0x42, 0xa8,
	0xfc, 0x90, 0x84, 0x74, 0xf3, 0x62, 0x62, 0xbd, 0x47, 0x25, 0x48, 0x4e, 0x7b, 0x21, 0x69, 0xe8,
	0xa1, 0xfe, 0x48, 0x86, 0xfb, 0x63, 0x0b, 0x32, 0xbe, 0xef, 0x29, 0xe6, 0xbb, 0x0f, 0xa1, 0x1b,
	0x90, 0xe6, 0xd1, 0x13, 0xab, 0xc2, 0xae, 0xa8, 0x72, 0x80, 0x62, 0xed, 0xaf, 0x2d, 0xec, 0xc8,
	0x69, 0x2e, 0x83, 0x01, 0xe8, 0x5f, 0x90, 0x23, 0xb6, 0xde, 0x37, 0xac, 0x91, 0xed, 0xca, 0x19,
	0x56, 0xbe, 0x77, 0xa3, 0x3d, 0xa4, 0x41, 0x52, 0x25, 0xc2, 0x0f, 0x2e, 0xfa, 0x47, 0x10, 0x9a,
	0x2c, 0x0b, 0xcd, 0xbd, 0x08, 0x46, 0xe6, 0xd4, 0x7c, 0x9a, 0xe9, 0xec, 0xe8, 0x7b, 0xf6, 0x64,
	0x18, 0xd4, 0xa6, 0xa8, 0xe6, 0x29, 0xee, 0x8c, 0xa3, 0x94, 0x16, 0x48, 0xfe, 0x78, 0x70, 0xd1,
	0x33, 0x90, 0x98, 0xff, 0xd6, 0xc8, 0x96, 0x85, 0x58, 0x1b, 0x7d, 0x16, 0x35, 0x7b, 0xc9, 0x0f,
	0xca, 0x19, 0xe4, 0x3a, 0xf6, 0xe0, 0x0d, 0x8b, 0x73, 0xd4, 0x9c, 0x59, 0x48, 0x55, 0x72, 0x55,
	0xaa, 0xbe, 0x17, 0x98, 0x75, 0xcc, 0xa7, 0x28, 0xa9, 0x0f, 0x66, 0xeb, 0x66, 0x55, 0xe5, 0x87,
	0x5b, 0x35, 0xb5, 0x7e, 0xab, 0x2a, 0x26, 0x6c, 0x35, 0x74, 0xfd, 0x4d, 0xc8, 0x3a, 0x15, 0x7f,
	0x35, 0xc1, 0x6e, 0xa4, 0xb7, 0xf7, 0x21, 0x13, 0xed, 0xa6, 0x7f, 0x15, 0x6a, 0xe7, 0x54, 0xb8,
	0x9d, 0x95, 0x5f, 0x44, 0x28, 0x9c, 0xfa, 0x63, 0x94, 0x75, 0xcc, 0xc2, 0xac, 0x15, 0x96, 0xcc,
	0xda, 0x4f, 0x1d, 0xe4, 0xcb, 0x66, 0x74, 0xe1, 0xd3, 0x66, 0xf4, 0xe1, 0x74, 0x46, 0x8b, 0xac,
	0x80, 0xb6, 0xe7, 0x05, 0x4c, 0x9d, 0x0a, 0x0f, 0xea, 0x3d, 0xc8, 0xfb, 0x95, 0xe1, 0x60, 0x62,
	0xb3, 0xce, 0xc9, 0xd7, 0x73, 0x2c, 0x60, 0x2a, 0x26, 0xb6, 0x0a, 0xfc, 0x96, 0x9e, 0xd1, 0x33,
	0x80, 0xa1, 0x83, 0x35, 0x0f, 0xeb, 0x7d, 0xcd, 0xf3, 0x87, 0x7a, 0x5c, 0x0a, 0x73, 0x3e, 0x75,
	0xc3, 0xa3, 0xad, 0xc9, 0x46, 0x19, 0xeb, 0x23, 0x51, 0xe5, 0x00, 0xaa, 0x07, 0x05, 0x24, 0xb1,
	0x02, 0x8a, 0xb2, 0x78, 0xbe, 0xb1, 0x1c, 0x3c, 0xa4, 0x9b, 0x05, 0x3b, 0x8e, 0xed, 0xb0, 0xb9,
	0x9d, 0x53, 0xf3, 0x1c, 0xd7, 0xa2, 0x28, 0xf4, 0x16, 0x80, 0x96, 0xc5, 0xd0, 0x9e, 0x58, 0x9e,
	0x2b, 0x03, 0x8b, 0x46, 0x3d, 0xaa, 0xe5, 0x43, 0xa9, 0xa6, 0x15, 0xdb, 0x64, 0x4c, 0x2d, 0xcb,
	0x73, 0xae, 0xd4, 0xdc, 0x65, 0x00, 0x23, 0x99, 0x2e, 0x27, 0x9b, 0x10, 0xac, 0xb3, 0x81, 0x2d,
	0xa9, 0x01, 0x58, 0xf9, 0x37, 0x94, 0x66, 0xd9, 0x50, 0x19, 0x52, 0xef, 0xf1, 0x15, 0x2b, 0x93,
	0xb4, 0x4a, 0x8f, 0xd4, 0xfb, 0x0f, 0x9a, 0x39, 0xe1, 0x8d, 0x92, 0x56, 0x39, 0xf0, 0xcf, 0xe4,
	0x53, 0xa1, 0x23, 0x4a, 0xa9, 0xb2, 0xa8, 0xfc, 0x28, 0x00, 0x0a, 0x1b, 0xd2, 0xbc, 0xd0, 0xac,
	0x77, 0x18, 0xfd, 0x07, 0xa4, 0xa0, 0xc8, 0x98, 0xb4, 0x7c, 0xfd, 0xfe, 0x1a, 0x5e, 0xa8, 0x53,
	0x26, 0xf4, 0x18, 0x44, 0xef, 0x8a, 0x04, 0xfd, 0x19, 0x3d, 0xbc, 0xa8, 0xb6, 0xb3, 0x2b, 0x82,
	0x55, 0x46, 0xae, 0x7c, 0x06, 0xc5, 0xb0, 0x40, 0x17, 0xbd, 0x0a, 0xb5, 0x40, 0x68, 0x44, 0xad,
	0x65, 0xcd, 0xb4, 0x4f, 0xd8, 0xb0, 0xfa, 0x16, 0xee, 0xf4, 0x26, 0x03, 0x77, 0xe8, 0x18, 0x03,
	0x3c, 0xa3, 0x23, 0x68, 0xe9, 0xbf, 0xc1, 0x86, 0x61, 0x0d, 0xcd, 0x89, 0x4e, 0x35, 0x19, 0x9e,
	0xa1, 0x99, 0xcc, 0x75, 0x49, 0x2d, 0xf9, 0xe8, 0x36, 0xc7, 0xb2, 0xda, 0x61, 0x15, 0xc5, 0xbb,
	0x6d, 0x3b, 0xc2, 0x16, 0xb6, 0x25, 0xfd, 0x7a, 0x53, 0xba, 0x20, 0x9f, 0x18, 0xae, 0xb7, 0x54,
	0xf1, 0x54, 0x9e, 0xb0, 0xbe, 0xbc, 0x1d, 0x48, 0x33, 0x98, 0x0e, 0x13, 0x6b, 0x32, 0x1e, 0x60,
	0x87, 0x71, 0x8b, 0xaa, 0x0f, 0x29, 0x3f, 0x09, 0x50, 0x39, 0x27, 0xba, 0xe6, 0xe1, 0xd9, 0x5a,
	0xf6, 0x75, 0xae, 0x35, 0x5a, 0xea, 0xb3, 0x53, 0xf6, 0x93, 0x9a, 0x24, 0xb5, 0xd0, 0x24, 0xca,
	0x17, 0xb0, 0x3d, 0x6f, 0x19, 0x2b, 0xe8, 0xdf, 0x64, 0x5b, 0xa8, 0x2d, 0x92, 0x33, 0x6d, 0xa1,
	0x78, 0x70, 0xfb, 0x85, 0x69, 0x0f, 0xdf, 0xff, 0xa1, 0x7e, 0x2b, 0xc7, 0xb0, 0xd1, 0xd0, 0x75,
	0xb6, 0x8d, 0x03, 0x5d, 0x87, 0x90, 0x19, 0x52, 0xd8, 0xf5, 0x8b, 0x76, 0x3b, 0x6e, 0x85, 0xab,
	0x3e, 0xad, 0x72, 0x05, 0x9b, 0x4d, 0x53, 0x33, 0xc6, 0x33, 0xa2, 0x22, 0xd6, 0x4d, 0xf0, 0xa4,
	0x4a, 0x86, 0x9e, 0x54, 0xcf, 0x40, 0x0a, 0x1e, 0x1d, 0xfe, 0xae, 0x5b, 0xf5, 0xe6, 0xc8, 0xfa,
	0x6f, 0x8e, 0xbd, 0xe7, 0x20, 0x05, 0x2f, 0x2d, 0x94, 0x87, 0xac, 0x7a, 0xde, 0xed, 0xb6, 0xbb,
	0xc7, 0xe5, 0x04, 0x02, 0xc8, 0xbc, 0x6c, 0xb4, 0x4f, 0x5a, 0x47, 0x65, 0x81, 0x5e, 0x34, 0xd5,
	0x46, 0xef, 0x55, 0xeb, 0xa8, 0x9c, 0xa4, 0x40, 0xef, 0xbc, 0xd9, 0x6c, 0xf5, 0x7a, 0xe5, 0xd4,
	0xde, 0x53, 0x80, 0xeb, 0xd7, 0x08, 0x2a, 0x01, 0x9c, 0x77, 0x1b, 0xbd, 0x5e, 0xfb, 0xb8, 0xdb,
	0x3a, 0x2a, 0x27, 0x50, 0x01, 0xa4, 0x29, 0x24, 0x50, 0xe8, 0x65, 0xbb, 0xdb, 0xe6, 0x62, 0xf6,
	0x0e, 0x28, 0x67, 0x30, 0x0a, 0xa8, 0xb6, 0xa6, 0xda, 0x6a, 0x9c, 0xb5, 0xb8, 0xe6, 0xf3, 0xd3,
	0x23, 0x7a, 0x16, 0xe8, 0xf9, 0xa8, 0x75, 0xd2, 0x3a, 0x6b, 0x95, 0x93, 0xf5, 0x9f, 0x8b, 0x90,
	0x6a, 0x9c, 0xb6, 0xd1, 0x5b, 0x28, 0x36, 0xd9, 0xa8, 0x0f, 0x3e, 0x77, 0x56, 0x3c, 0x5e, 0x2a,
	0x2b, 0xee, 0x95, 0x04, 0x3a, 0x05, 0x68, 0x5b, 0x74, 0x1d, 0xb2, 0x6f, 0x83, 0xea, 0x1c, 0xfd,
	0xf5, 0x95, 0x9f, 0x9b, 0xb5, 0x24, 0x16, 0x68, 0xf3, 0x4f, 0x9f, 0x5c, 0x77, 0xe6, 0x38, 0xfc,
	0xcb, 0x40, 0xe0, 0x4e, 0xbc, 0x40, 0x57, 0x49, 0xa0, 0xe7, 0x50, 0x3c, 0xc2, 0x26, 0xbe, 0x76,
	0x7b, 0xc9, 0x17, 0x4e, 0x65, 0x6b, 0x61, 0x41, 0xb6, 0xe8, 0x07, 0xa7, 0x92, 0x40, 0x5d, 0xb8,
	0x3d, 0xc3, 0xee, 0xbe, 0xb4, 0x9d, 0xa0, 0xaa, 0xd1, 0xad, 0x88, 0x72, 0x8f, 0x91, 0xf7, 0x1a,
	0x36, 0xa6, 0x59, 0xf0, 0x9f, 0x83, 0xd5, 0x68, 0x27, 0x38, 0x45, 0x8c, 0xb8, 0xff, 0x41, 0x69,
	0x2a, 0x8e, 0x17, 0x53, 0x4c, 0x48, 0x18, 0x41, 0x8c, 0xb0, 0xff, 0x82, 0xd4, 0xa3, 0x5f, 0x6c,
	0x34, 0x99, 0xcb, 0xa2, 0xb4, 0x3a, 0x7d, 0x3d, 0x40, 0xdc, 0x9c, 0xd9, 0xc7, 0xd9, 0x1a, 0x2b,
	0x28, 0xc6, 0xac, 0x1e, 0xa0, 0xd9, 0x21, 0xf8, 0x7b, 0x08, 0x7d, 0x0b, 0x1b, 0xc7, 0x78, 0x66,
	0xc9, 0x44, 0x67, 0x73, 0x1d, 0x55, 0x4a, 0x02, 0x99, 0xb0, 0xb9, 0xb0, 0xb8, 0xd0, 0x7e, 0x04,
	0x6f, 0xd4, 0x8a, 0xab, 0xfc, 0x65, 0x0d, 0x65, 0xb4, 0xae, 0x8f, 0x01, 0xf1, 0xc2, 0x5c, 0xcf,
	0x87, 0xe8, 0x48, 0x7c, 0x07, 0x5b, 0xcb, 0xb7, 0x3d, 0x3a, 0x8c, 0x5a, 0xaf, 0x71, 0x8f, 0x83,
	0xca, 0xdf, 0xd7, 0x70, 0x80, 0x8f, 0x30, 0x25, 0x71, 0x20, 0xa0, 0x01, 0xfc, 0x69, 0xc9, 0xf2,
	0x45, 0x0f, 0x23, 0xa4, 0x44, 0x2f, 0xea, 0x18, 0x17, 0x47, 0x70, 0x73, 0xe9, 0x1a, 0x45, 0x8f,
	0xd6, 0xd4, 0x12, 0x5e, 0xba, 0x31, 0x7a, 0xbe, 0x04, 0xb4, 0xb8, 0x4f, 0xd1, 0x41, 0x84, 0x92,
	0xc8, 0xd5, 0x1b, 0xa3, 0xe1, 0x39, 0xe4, 0x78, 0xd6, 0x1b, 0xa6, 0x89, 0x22, 0xc8, 0x62, 0xd8,
	0x4f, 0x40, 0x0a, 0x56, 0x2f, 0xfa, 0x6b, 0x84, 0x59, 0x73, 0xbb, 0x39, 0x46, 0xda, 0xff, 0x01,
	0xae, 0xf7, 0x2f, 0xda, 0x8d, 0xda, 0xd9, 0xf3, 0x2b, 0xba, 0x12, 0xbb, 0xdd, 0x95, 0xc4, 0x8b,
	0xdc, 0xe7, 0x59, 0x1f, 0x35, 0xc8, 0x30, 0xa5, 0x8f, 0x7e, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x45,
	0x27, 0x4c, 0xd8, 0x4a, 0x14, 0x00, 0x00,
}
