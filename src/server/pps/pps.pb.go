// Code generated by protoc-gen-go.
// source: server/pps/pps.proto
// DO NOT EDIT!

/*
Package pps is a generated protocol buffer package.

It is generated from these files:
	server/pps/pps.proto

It has these top-level messages:
	StartJobRequest
	StartJobResponse
	FinishJobRequest
*/
package pps

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/pb/go/google/protobuf"
import fuse "github.com/pachyderm/pachyderm/src/server/pfs/fuse"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"
import pachyderm_pps "github.com/pachyderm/pachyderm/src/client/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type StartJobRequest struct {
	Job *pachyderm_pps.Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *StartJobRequest) Reset()                    { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string            { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()               {}
func (*StartJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartJobRequest) GetJob() *pachyderm_pps.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type StartJobResponse struct {
	Transform    *pachyderm_pps.Transform `protobuf:"bytes,1,opt,name=transform" json:"transform,omitempty"`
	CommitMounts []*fuse.CommitMount      `protobuf:"bytes,2,rep,name=commit_mounts" json:"commit_mounts,omitempty"`
	// TODO this could just be another commit mount
	OutputCommit *pfs.Commit `protobuf:"bytes,3,opt,name=output_commit" json:"output_commit,omitempty"`
	Index        uint64      `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
}

func (m *StartJobResponse) Reset()                    { *m = StartJobResponse{} }
func (m *StartJobResponse) String() string            { return proto.CompactTextString(m) }
func (*StartJobResponse) ProtoMessage()               {}
func (*StartJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartJobResponse) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *StartJobResponse) GetCommitMounts() []*fuse.CommitMount {
	if m != nil {
		return m.CommitMounts
	}
	return nil
}

func (m *StartJobResponse) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type FinishJobRequest struct {
	Job     *pachyderm_pps.Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Index   uint64             `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Success bool               `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *FinishJobRequest) Reset()                    { *m = FinishJobRequest{} }
func (m *FinishJobRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishJobRequest) ProtoMessage()               {}
func (*FinishJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FinishJobRequest) GetJob() *pachyderm_pps.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func init() {
	proto.RegisterType((*StartJobRequest)(nil), "pachyderm.pps.StartJobRequest")
	proto.RegisterType((*StartJobResponse)(nil), "pachyderm.pps.StartJobResponse")
	proto.RegisterType((*FinishJobRequest)(nil), "pachyderm.pps.FinishJobRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for InternalJobAPI service

type InternalJobAPIClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type internalJobAPIClient struct {
	cc *grpc.ClientConn
}

func NewInternalJobAPIClient(cc *grpc.ClientConn) InternalJobAPIClient {
	return &internalJobAPIClient{cc}
}

func (c *internalJobAPIClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := grpc.Invoke(ctx, "/pachyderm.pps.InternalJobAPI/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalJobAPIClient) FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.InternalJobAPI/FinishJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalJobAPI service

type InternalJobAPIServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	FinishJob(context.Context, *FinishJobRequest) (*google_protobuf.Empty, error)
}

func RegisterInternalJobAPIServer(s *grpc.Server, srv InternalJobAPIServer) {
	s.RegisterService(&_InternalJobAPI_serviceDesc, srv)
}

func _InternalJobAPI_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalJobAPIServer).StartJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InternalJobAPI_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FinishJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InternalJobAPIServer).FinishJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _InternalJobAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.InternalJobAPI",
	HandlerType: (*InternalJobAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _InternalJobAPI_StartJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _InternalJobAPI_FinishJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xd7, 0x75, 0xd3, 0x2d, 0xa3, 0x6e, 0x86, 0x21, 0xa5, 0x82, 0x1b, 0x3d, 0x0d, 0x84,
	0x14, 0xe6, 0x27, 0x50, 0x71, 0x30, 0x61, 0x20, 0xce, 0x93, 0x97, 0xd1, 0x76, 0xe9, 0x56, 0x69,
	0x93, 0x98, 0x3f, 0xe2, 0xbe, 0x8b, 0x77, 0xbf, 0xa6, 0x69, 0xba, 0x3a, 0x2d, 0x78, 0xf0, 0x90,
	0x1c, 0xf2, 0x7b, 0x9e, 0x27, 0xef, 0xfb, 0xf2, 0x82, 0xa1, 0xc0, 0xfc, 0x0d, 0xf3, 0x80, 0x31,
	0x51, 0x1c, 0xc4, 0x38, 0x95, 0x14, 0x3a, 0x2c, 0x8c, 0xb7, 0xbb, 0x35, 0xe6, 0x39, 0xd2, 0x8f,
	0xde, 0xf9, 0x86, 0xd2, 0x4d, 0x86, 0x03, 0x03, 0x23, 0x95, 0x04, 0x38, 0x67, 0x72, 0x57, 0x6a,
	0x3d, 0xaf, 0x4a, 0x48, 0x44, 0x90, 0x28, 0x81, 0xcd, 0xb5, 0x67, 0xc3, 0x38, 0x4b, 0x31, 0x91,
	0x86, 0xe9, 0x53, 0x7f, 0xfd, 0xf9, 0xa7, 0x3f, 0x05, 0xfd, 0xa5, 0x0c, 0xb9, 0xbc, 0xa7, 0xd1,
	0x23, 0x7e, 0x55, 0x58, 0x48, 0x38, 0x02, 0xf6, 0x0b, 0x8d, 0x5c, 0x6b, 0x6c, 0x4d, 0x7a, 0x53,
	0x88, 0x7e, 0x15, 0x85, 0xb4, 0xce, 0xff, 0xb0, 0xc0, 0xe0, 0x60, 0x12, 0x8c, 0x12, 0x81, 0xe1,
	0x25, 0xe8, 0x4a, 0x1e, 0x12, 0x91, 0x50, 0x9e, 0xef, 0xbd, 0x6e, 0xcd, 0xfb, 0x54, 0x71, 0x38,
	0x01, 0x4e, 0x4c, 0xf3, 0x3c, 0x95, 0xab, 0x9c, 0x2a, 0x22, 0x85, 0xdb, 0x1c, 0xdb, 0xda, 0x70,
	0x8a, 0x4c, 0x17, 0xb7, 0x06, 0x2d, 0x0a, 0x02, 0x7d, 0xe0, 0x50, 0x25, 0x99, 0x92, 0xab, 0xd2,
	0xe0, 0xda, 0x26, 0xba, 0x87, 0x8a, 0xc6, 0x4a, 0x21, 0x74, 0x40, 0x3b, 0x25, 0x6b, 0xfc, 0xee,
	0xb6, 0x34, 0x6b, 0xf9, 0x4b, 0x30, 0x98, 0xa5, 0x24, 0x15, 0xdb, 0x7f, 0xf4, 0x74, 0xc8, 0x68,
	0x16, 0x19, 0xb0, 0x0f, 0x8e, 0x85, 0x8a, 0x63, 0x2c, 0x84, 0xf9, 0xb0, 0x33, 0xfd, 0xb4, 0xc0,
	0xc9, 0x9c, 0x48, 0xcc, 0x49, 0x98, 0x69, 0xfd, 0xf5, 0xc3, 0x1c, 0x2e, 0x40, 0xa7, 0x9a, 0x02,
	0xbc, 0xa8, 0x45, 0xd6, 0x66, 0xea, 0x8d, 0xfe, 0xe4, 0xe5, 0xf8, 0xfc, 0x06, 0x9c, 0x81, 0xee,
	0x77, 0xd9, 0xb0, 0xae, 0xaf, 0x37, 0xe4, 0x9d, 0xa1, 0x72, 0x3b, 0x50, 0xb5, 0x1d, 0xe8, 0xae,
	0xd8, 0x0e, 0xbf, 0x71, 0xd3, 0x7e, 0xb6, 0xb5, 0x23, 0x3a, 0x32, 0xe0, 0xea, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0x2b, 0x52, 0x13, 0x6b, 0x02, 0x00, 0x00,
}
