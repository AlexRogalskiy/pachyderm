// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/worker/pipeline/transform/transform.proto

package transform

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/src/client/pfs"
	pps "github.com/pachyderm/pachyderm/src/client/pps"
	common "github.com/pachyderm/pachyderm/src/server/worker/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DatumInputs struct {
	Inputs               []*common.Input `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DatumInputs) Reset()         { *m = DatumInputs{} }
func (m *DatumInputs) String() string { return proto.CompactTextString(m) }
func (*DatumInputs) ProtoMessage()    {}
func (*DatumInputs) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{0}
}
func (m *DatumInputs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatumInputs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatumInputs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatumInputs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatumInputs.Merge(m, src)
}
func (m *DatumInputs) XXX_Size() int {
	return m.Size()
}
func (m *DatumInputs) XXX_DiscardUnknown() {
	xxx_messageInfo_DatumInputs.DiscardUnknown(m)
}

var xxx_messageInfo_DatumInputs proto.InternalMessageInfo

func (m *DatumInputs) GetInputs() []*common.Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

type HashtreeInfo struct {
	// Object for fetching from object storage if the hashtree is not in the worker cache
	Object *pfs.Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// Address used for fetching a cached version directly from the worker
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashtreeInfo) Reset()         { *m = HashtreeInfo{} }
func (m *HashtreeInfo) String() string { return proto.CompactTextString(m) }
func (*HashtreeInfo) ProtoMessage()    {}
func (*HashtreeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{1}
}
func (m *HashtreeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashtreeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashtreeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashtreeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashtreeInfo.Merge(m, src)
}
func (m *HashtreeInfo) XXX_Size() int {
	return m.Size()
}
func (m *HashtreeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HashtreeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HashtreeInfo proto.InternalMessageInfo

func (m *HashtreeInfo) GetObject() *pfs.Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *HashtreeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type JobData struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobData) Reset()         { *m = JobData{} }
func (m *JobData) String() string { return proto.CompactTextString(m) }
func (*JobData) ProtoMessage()    {}
func (*JobData) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{2}
}
func (m *JobData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobData.Merge(m, src)
}
func (m *JobData) XXX_Size() int {
	return m.Size()
}
func (m *JobData) XXX_DiscardUnknown() {
	xxx_messageInfo_JobData.DiscardUnknown(m)
}

var xxx_messageInfo_JobData proto.InternalMessageInfo

func (m *JobData) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type DatumData struct {
	// Inputs
	Datums *pfs.Object `protobuf:"bytes,2,opt,name=datums,proto3" json:"datums,omitempty"`
	// Outputs
	ProcessStats         *pps.ProcessStats `protobuf:"bytes,3,opt,name=process_stats,json=processStats,proto3" json:"process_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DatumData) Reset()         { *m = DatumData{} }
func (m *DatumData) String() string { return proto.CompactTextString(m) }
func (*DatumData) ProtoMessage()    {}
func (*DatumData) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{3}
}
func (m *DatumData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatumData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatumData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatumData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatumData.Merge(m, src)
}
func (m *DatumData) XXX_Size() int {
	return m.Size()
}
func (m *DatumData) XXX_DiscardUnknown() {
	xxx_messageInfo_DatumData.DiscardUnknown(m)
}

var xxx_messageInfo_DatumData proto.InternalMessageInfo

func (m *DatumData) GetDatums() *pfs.Object {
	if m != nil {
		return m.Datums
	}
	return nil
}

func (m *DatumData) GetProcessStats() *pps.ProcessStats {
	if m != nil {
		return m.ProcessStats
	}
	return nil
}

type MergeData struct {
	// Inputs
	Shard int64 `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// Outputs
	Output               *HashtreeInfo `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MergeData) Reset()         { *m = MergeData{} }
func (m *MergeData) String() string { return proto.CompactTextString(m) }
func (*MergeData) ProtoMessage()    {}
func (*MergeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{4}
}
func (m *MergeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MergeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeData.Merge(m, src)
}
func (m *MergeData) XXX_Size() int {
	return m.Size()
}
func (m *MergeData) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeData.DiscardUnknown(m)
}

var xxx_messageInfo_MergeData proto.InternalMessageInfo

func (m *MergeData) GetShard() int64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *MergeData) GetOutput() *HashtreeInfo {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*DatumInputs)(nil), "pachyderm.worker.pipeline.transform.DatumInputs")
	proto.RegisterType((*HashtreeInfo)(nil), "pachyderm.worker.pipeline.transform.HashtreeInfo")
	proto.RegisterType((*JobData)(nil), "pachyderm.worker.pipeline.transform.JobData")
	proto.RegisterType((*DatumData)(nil), "pachyderm.worker.pipeline.transform.DatumData")
	proto.RegisterType((*MergeData)(nil), "pachyderm.worker.pipeline.transform.MergeData")
}

func init() {
	proto.RegisterFile("server/worker/pipeline/transform/transform.proto", fileDescriptor_21583a759eb7fa97)
}

var fileDescriptor_21583a759eb7fa97 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4e, 0x83, 0x40,
	0x10, 0x0e, 0x36, 0xa5, 0x61, 0x69, 0x0f, 0x92, 0x9a, 0x10, 0x0f, 0x0d, 0xd2, 0x98, 0xf4, 0xb4,
	0x68, 0x35, 0x3e, 0x80, 0xf6, 0x20, 0x26, 0x8d, 0x8a, 0x37, 0x2f, 0xcd, 0x02, 0xdb, 0x42, 0x2d,
	0xec, 0x66, 0x67, 0xd1, 0xf8, 0x86, 0x1e, 0x7d, 0x04, 0xd3, 0x27, 0x31, 0x2c, 0xdb, 0x1f, 0xbd,
	0xe8, 0x61, 0xc3, 0x7c, 0xf3, 0x7d, 0xf3, 0xcd, 0x64, 0x06, 0x74, 0x06, 0x54, 0xbc, 0x52, 0x11,
	0xbc, 0x31, 0xf1, 0x42, 0x45, 0xc0, 0x73, 0x4e, 0x57, 0x79, 0x49, 0x03, 0x29, 0x48, 0x09, 0x73,
	0x26, 0x8a, 0x5d, 0x84, 0xb9, 0x60, 0x92, 0x39, 0x43, 0x4e, 0x92, 0xec, 0x3d, 0xa5, 0xa2, 0xc0,
	0x4d, 0x11, 0xde, 0x14, 0xe1, 0xad, 0xf4, 0xb8, 0x9f, 0xac, 0x72, 0x5a, 0xca, 0x80, 0xcf, 0xa1,
	0x7e, 0x4d, 0xe9, 0x2e, 0xcb, 0xa1, 0x7e, 0x3a, 0x7b, 0xf2, 0x73, 0x84, 0x84, 0x15, 0x05, 0x2b,
	0xf5, 0xa7, 0x91, 0xf8, 0x97, 0xc8, 0x9e, 0x10, 0x59, 0x15, 0x61, 0xc9, 0x2b, 0x09, 0xce, 0x29,
	0x32, 0x73, 0x15, 0xb9, 0x86, 0xd7, 0x1a, 0xd9, 0xe3, 0x1e, 0xd6, 0x6a, 0xc5, 0x47, 0x9a, 0xf4,
	0xa7, 0xa8, 0x7b, 0x4b, 0x20, 0x93, 0x82, 0xd2, 0xb0, 0x9c, 0x33, 0x67, 0x88, 0x4c, 0x16, 0x2f,
	0x69, 0x22, 0x5d, 0xc3, 0x33, 0x46, 0xf6, 0xd8, 0xc6, 0xf5, 0x68, 0xf7, 0x2a, 0x15, 0x69, 0xca,
	0x71, 0x51, 0x87, 0xa4, 0xa9, 0xa0, 0x00, 0xee, 0x81, 0x67, 0x8c, 0xac, 0x68, 0x03, 0x7d, 0x0f,
	0x75, 0xee, 0x58, 0x3c, 0x21, 0x92, 0x38, 0x47, 0xc8, 0x5c, 0xb2, 0x78, 0x96, 0xa7, 0xca, 0xc9,
	0x8a, 0xda, 0x4b, 0x16, 0x87, 0xa9, 0x9f, 0x21, 0x4b, 0x8d, 0xa9, 0x34, 0x43, 0x64, 0xa6, 0x35,
	0x68, 0x7c, 0x7e, 0x77, 0x6b, 0x28, 0xe7, 0x0a, 0xf5, 0xb8, 0x60, 0x09, 0x05, 0x98, 0x81, 0x24,
	0x12, 0xdc, 0x96, 0xd2, 0x1e, 0xe2, 0x7a, 0x3d, 0x0f, 0x0d, 0xf3, 0x54, 0x13, 0x51, 0x97, 0xef,
	0x21, 0x7f, 0x85, 0xac, 0x29, 0x15, 0x0b, 0xaa, 0x3a, 0xf5, 0x51, 0x1b, 0x32, 0x22, 0x52, 0xd5,
	0xa8, 0x15, 0x35, 0xc0, 0x09, 0x91, 0xc9, 0x2a, 0xc9, 0x2b, 0xa9, 0x3d, 0xcf, 0xf1, 0x3f, 0x0e,
	0x87, 0xf7, 0x17, 0x16, 0x69, 0x83, 0xeb, 0xc7, 0x8f, 0xf5, 0xc0, 0xf8, 0x5c, 0x0f, 0x8c, 0xaf,
	0xf5, 0xc0, 0x78, 0xbe, 0x59, 0xe4, 0x32, 0xab, 0xe2, 0x7a, 0xe7, 0xc1, 0xd6, 0x72, 0x2f, 0x02,
	0x91, 0x04, 0x7f, 0xfd, 0x55, 0xb1, 0xa9, 0x0e, 0x7b, 0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x53,
	0xbd, 0x47, 0xf4, 0x80, 0x02, 0x00, 0x00,
}

func (m *DatumInputs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatumInputs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatumInputs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransform(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HashtreeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashtreeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashtreeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatumData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatumData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatumData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProcessStats != nil {
		{
			size, err := m.ProcessStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Datums != nil {
		{
			size, err := m.Datums.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MergeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MergeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shard != 0 {
		i = encodeVarintTransform(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransform(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransform(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DatumInputs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovTransform(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HashtreeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatumData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Datums != nil {
		l = m.Datums.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.ProcessStats != nil {
		l = m.ProcessStats.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MergeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shard != 0 {
		n += 1 + sovTransform(uint64(m.Shard))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransform(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransform(x uint64) (n int) {
	return sovTransform(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DatumInputs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatumInputs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatumInputs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &common.Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashtreeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashtreeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashtreeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &pfs.Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatumData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatumData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatumData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datums == nil {
				m.Datums = &pfs.Object{}
			}
			if err := m.Datums.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessStats == nil {
				m.ProcessStats = &pps.ProcessStats{}
			}
			if err := m.ProcessStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &HashtreeInfo{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransform(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransform
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransform
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransform
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransform        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransform          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransform = fmt.Errorf("proto: unexpected end of group")
)
