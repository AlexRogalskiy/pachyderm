// Code generated by protoc-gen-go.
// source: server/pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	server/pfs/pfs.proto

It has these top-level messages:
	Repo
	Commit
	File
	Block
	Diff
	RepoInfo
	RepoInfos
	CommitInfo
	CommitInfos
	FileInfo
	FileInfos
	ByteRange
	BlockRef
	BlockRefs
	Append
	BlockInfo
	BlockInfos
	DiffInfo
	Shard
*/
package pfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import _ "go.pedge.io/pb/go/google/protobuf"
import google_protobuf2 "go.pedge.io/pb/go/google/protobuf"
import _ "go.pedge.io/pb/go/google/protobuf"
import _ "github.com/pachyderm/pachyderm/src/pkg/shard"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CommitType int32

const (
	CommitType_COMMIT_TYPE_NONE  CommitType = 0
	CommitType_COMMIT_TYPE_READ  CommitType = 1
	CommitType_COMMIT_TYPE_WRITE CommitType = 2
)

var CommitType_name = map[int32]string{
	0: "COMMIT_TYPE_NONE",
	1: "COMMIT_TYPE_READ",
	2: "COMMIT_TYPE_WRITE",
}
var CommitType_value = map[string]int32{
	"COMMIT_TYPE_NONE":  0,
	"COMMIT_TYPE_READ":  1,
	"COMMIT_TYPE_WRITE": 2,
}

func (x CommitType) String() string {
	return proto.EnumName(CommitType_name, int32(x))
}
func (CommitType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FileType int32

const (
	FileType_FILE_TYPE_NONE    FileType = 0
	FileType_FILE_TYPE_REGULAR FileType = 1
	FileType_FILE_TYPE_DIR     FileType = 2
)

var FileType_name = map[int32]string{
	0: "FILE_TYPE_NONE",
	1: "FILE_TYPE_REGULAR",
	2: "FILE_TYPE_DIR",
}
var FileType_value = map[string]int32{
	"FILE_TYPE_NONE":    0,
	"FILE_TYPE_REGULAR": 1,
	"FILE_TYPE_DIR":     2,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Repo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Commit struct {
	Repo *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Commit) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type File struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Diff struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *Diff) Reset()                    { *m = Diff{} }
func (m *Diff) String() string            { return proto.CompactTextString(m) }
func (*Diff) ProtoMessage()               {}
func (*Diff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Diff) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type RepoInfo struct {
	Repo      *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *RepoInfo) Reset()                    { *m = RepoInfo{} }
func (m *RepoInfo) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()               {}
func (*RepoInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepoInfo) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type RepoInfos struct {
	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info,json=repoInfo" json:"repo_info,omitempty"`
}

func (m *RepoInfos) Reset()                    { *m = RepoInfos{} }
func (m *RepoInfos) String() string            { return proto.CompactTextString(m) }
func (*RepoInfos) ProtoMessage()               {}
func (*RepoInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoInfos) GetRepoInfo() []*RepoInfo {
	if m != nil {
		return m.RepoInfo
	}
	return nil
}

type CommitInfo struct {
	Commit       *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Branch       string                      `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
	CommitType   CommitType                  `protobuf:"varint,3,opt,name=commit_type,json=commitType,enum=pfs.CommitType" json:"commit_type,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,4,opt,name=parent_commit,json=parentCommit" json:"parent_commit,omitempty"`
	Started      *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=started" json:"started,omitempty"`
	Finished     *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=finished" json:"finished,omitempty"`
	SizeBytes    uint64                      `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *CommitInfo) Reset()                    { *m = CommitInfo{} }
func (m *CommitInfo) String() string            { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()               {}
func (*CommitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CommitInfo) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CommitInfo) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *CommitInfo) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

type CommitInfos struct {
	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info,json=commitInfo" json:"commit_info,omitempty"`
}

func (m *CommitInfos) Reset()                    { *m = CommitInfos{} }
func (m *CommitInfos) String() string            { return proto.CompactTextString(m) }
func (*CommitInfos) ProtoMessage()               {}
func (*CommitInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommitInfos) GetCommitInfo() []*CommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

type FileInfo struct {
	File           *File                       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType       FileType                    `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes      uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Perm           uint32                      `protobuf:"varint,4,opt,name=perm" json:"perm,omitempty"`
	Modified       *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=modified" json:"modified,omitempty"`
	CommitModified *Commit                     `protobuf:"bytes,6,opt,name=commit_modified,json=commitModified" json:"commit_modified,omitempty"`
	Children       []*File                     `protobuf:"bytes,7,rep,name=children" json:"children,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetModified() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *FileInfo) GetCommitModified() *Commit {
	if m != nil {
		return m.CommitModified
	}
	return nil
}

func (m *FileInfo) GetChildren() []*File {
	if m != nil {
		return m.Children
	}
	return nil
}

type FileInfos struct {
	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
}

func (m *FileInfos) Reset()                    { *m = FileInfos{} }
func (m *FileInfos) String() string            { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()               {}
func (*FileInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FileInfos) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type ByteRange struct {
	Lower uint64 `protobuf:"varint,1,opt,name=lower" json:"lower,omitempty"`
	Upper uint64 `protobuf:"varint,2,opt,name=upper" json:"upper,omitempty"`
}

func (m *ByteRange) Reset()                    { *m = ByteRange{} }
func (m *ByteRange) String() string            { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()               {}
func (*ByteRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type BlockRef struct {
	Block *Block     `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Range *ByteRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (m *BlockRef) Reset()                    { *m = BlockRef{} }
func (m *BlockRef) String() string            { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()               {}
func (*BlockRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BlockRef) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockRef) GetRange() *ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type BlockRefs struct {
	BlockRef []*BlockRef `protobuf:"bytes,1,rep,name=block_ref,json=blockRef" json:"block_ref,omitempty"`
}

func (m *BlockRefs) Reset()                    { *m = BlockRefs{} }
func (m *BlockRefs) String() string            { return proto.CompactTextString(m) }
func (*BlockRefs) ProtoMessage()               {}
func (*BlockRefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BlockRefs) GetBlockRef() []*BlockRef {
	if m != nil {
		return m.BlockRef
	}
	return nil
}

type Append struct {
	BlockRefs []*BlockRef     `protobuf:"bytes,1,rep,name=block_refs,json=blockRefs" json:"block_refs,omitempty"`
	Children  map[string]bool `protobuf:"bytes,2,rep,name=children" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LastRef   *Commit         `protobuf:"bytes,3,opt,name=last_ref,json=lastRef" json:"last_ref,omitempty"`
}

func (m *Append) Reset()                    { *m = Append{} }
func (m *Append) String() string            { return proto.CompactTextString(m) }
func (*Append) ProtoMessage()               {}
func (*Append) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Append) GetBlockRefs() []*BlockRef {
	if m != nil {
		return m.BlockRefs
	}
	return nil
}

func (m *Append) GetChildren() map[string]bool {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Append) GetLastRef() *Commit {
	if m != nil {
		return m.LastRef
	}
	return nil
}

type BlockInfo struct {
	Block     *Block                      `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BlockInfo) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type BlockInfos struct {
	BlockInfo []*BlockInfo `protobuf:"bytes,1,rep,name=block_info,json=blockInfo" json:"block_info,omitempty"`
}

func (m *BlockInfos) Reset()                    { *m = BlockInfos{} }
func (m *BlockInfos) String() string            { return proto.CompactTextString(m) }
func (*BlockInfos) ProtoMessage()               {}
func (*BlockInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BlockInfos) GetBlockInfo() []*BlockInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

type DiffInfo struct {
	Diff         *Diff                       `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,2,opt,name=parent_commit,json=parentCommit" json:"parent_commit,omitempty"`
	Branch       string                      `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	Started      *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=started" json:"started,omitempty"`
	Finished     *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=finished" json:"finished,omitempty"`
	// Appends is the BlockRefs which have been append to files indexed by path.
	Appends   map[string]*Append `protobuf:"bytes,6,rep,name=appends" json:"appends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SizeBytes uint64             `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *DiffInfo) Reset()                    { *m = DiffInfo{} }
func (m *DiffInfo) String() string            { return proto.CompactTextString(m) }
func (*DiffInfo) ProtoMessage()               {}
func (*DiffInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DiffInfo) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func (m *DiffInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *DiffInfo) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *DiffInfo) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *DiffInfo) GetAppends() map[string]*Append {
	if m != nil {
		return m.Appends
	}
	return nil
}

type Shard struct {
	FileNumber   uint64 `protobuf:"varint,1,opt,name=file_number,json=fileNumber" json:"file_number,omitempty"`
	FileModulus  uint64 `protobuf:"varint,2,opt,name=file_modulus,json=fileModulus" json:"file_modulus,omitempty"`
	BlockNumber  uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockModulus uint64 `protobuf:"varint,4,opt,name=block_modulus,json=blockModulus" json:"block_modulus,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func init() {
	proto.RegisterType((*Repo)(nil), "pfs.Repo")
	proto.RegisterType((*Commit)(nil), "pfs.Commit")
	proto.RegisterType((*File)(nil), "pfs.File")
	proto.RegisterType((*Block)(nil), "pfs.Block")
	proto.RegisterType((*Diff)(nil), "pfs.Diff")
	proto.RegisterType((*RepoInfo)(nil), "pfs.RepoInfo")
	proto.RegisterType((*RepoInfos)(nil), "pfs.RepoInfos")
	proto.RegisterType((*CommitInfo)(nil), "pfs.CommitInfo")
	proto.RegisterType((*CommitInfos)(nil), "pfs.CommitInfos")
	proto.RegisterType((*FileInfo)(nil), "pfs.FileInfo")
	proto.RegisterType((*FileInfos)(nil), "pfs.FileInfos")
	proto.RegisterType((*ByteRange)(nil), "pfs.ByteRange")
	proto.RegisterType((*BlockRef)(nil), "pfs.BlockRef")
	proto.RegisterType((*BlockRefs)(nil), "pfs.BlockRefs")
	proto.RegisterType((*Append)(nil), "pfs.Append")
	proto.RegisterType((*BlockInfo)(nil), "pfs.BlockInfo")
	proto.RegisterType((*BlockInfos)(nil), "pfs.BlockInfos")
	proto.RegisterType((*DiffInfo)(nil), "pfs.DiffInfo")
	proto.RegisterType((*Shard)(nil), "pfs.Shard")
	proto.RegisterEnum("pfs.CommitType", CommitType_name, CommitType_value)
	proto.RegisterEnum("pfs.FileType", FileType_name, FileType_value)
}

var fileDescriptor0 = []byte{
	// 1004 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xc7, 0xe7, 0xb3, 0x73, 0x1e, 0xc7, 0xae, 0xbb, 0x4a, 0x51, 0x70, 0x81, 0x96, 0x2b, 0x20,
	0x14, 0x81, 0x83, 0xc2, 0x5f, 0xd1, 0x87, 0x2a, 0x4d, 0xdc, 0x62, 0xa9, 0x49, 0xd0, 0x62, 0x84,
	0x78, 0xb2, 0xce, 0xf6, 0x5e, 0x7c, 0x8a, 0xef, 0x8f, 0x76, 0xcf, 0xad, 0xcc, 0x03, 0x0f, 0x7c,
	0x05, 0x9e, 0xf9, 0x22, 0x7c, 0x0c, 0xbe, 0x10, 0xec, 0xce, 0xee, 0x9e, 0xcf, 0x76, 0x25, 0x07,
	0xa4, 0x3e, 0x24, 0x9e, 0x9d, 0xf9, 0xcd, 0xcc, 0xce, 0x6f, 0x67, 0xe6, 0xe0, 0x40, 0x30, 0xfe,
	0x92, 0xf1, 0xe3, 0x2c, 0x14, 0xea, 0xaf, 0x97, 0xf1, 0x34, 0x4f, 0x49, 0x55, 0x8a, 0xdd, 0x77,
	0xaf, 0xd3, 0xf4, 0x7a, 0xce, 0x8e, 0x83, 0x2c, 0x3a, 0x0e, 0x92, 0x24, 0xcd, 0x83, 0x3c, 0x4a,
	0x13, 0x03, 0xe9, 0xde, 0x37, 0x56, 0x3c, 0x8d, 0x17, 0xe1, 0x31, 0x8b, 0xb3, 0x7c, 0x69, 0x8c,
	0x0f, 0x36, 0x8d, 0x79, 0x14, 0x33, 0x91, 0x07, 0x71, 0x66, 0x00, 0xef, 0x6f, 0x02, 0x5e, 0xf1,
	0x20, 0xcb, 0x18, 0xb7, 0xd1, 0xef, 0x65, 0x37, 0xd7, 0xc7, 0x62, 0x16, 0xf0, 0xa9, 0xfe, 0xaf,
	0xd5, 0x7e, 0x17, 0x5c, 0xca, 0xb2, 0x94, 0x10, 0x70, 0x93, 0x20, 0x66, 0x87, 0x95, 0x87, 0x95,
	0x4f, 0x1a, 0x14, 0x65, 0xff, 0x1b, 0xa8, 0x9f, 0xa5, 0x71, 0x1c, 0xe5, 0xe4, 0x3d, 0x70, 0xb9,
	0x44, 0xa1, 0xb5, 0x79, 0xd2, 0xe8, 0xa9, 0xba, 0x94, 0x1b, 0x45, 0x35, 0x69, 0x83, 0x13, 0x4d,
	0x0f, 0x1d, 0x74, 0x95, 0x92, 0xff, 0x04, 0xdc, 0x67, 0xd1, 0x9c, 0x91, 0x47, 0x50, 0x9f, 0x60,
	0x00, 0xe3, 0xd8, 0x44, 0x47, 0x1d, 0x93, 0x1a, 0x93, 0xca, 0x9c, 0x05, 0xf9, 0xcc, 0xb8, 0xa3,
	0xec, 0xdf, 0x87, 0xda, 0xd3, 0x79, 0x3a, 0xb9, 0x51, 0xc6, 0x59, 0x20, 0x66, 0xf6, 0x5a, 0x4a,
	0xf6, 0x4f, 0xc1, 0x3d, 0x8f, 0xc2, 0xf0, 0x76, 0xd1, 0x0f, 0xa0, 0x86, 0xe5, 0x62, 0x78, 0x97,
	0xea, 0x83, 0xff, 0x1b, 0x78, 0xea, 0xfa, 0x83, 0x24, 0x4c, 0x77, 0xd5, 0xf6, 0x25, 0xec, 0x4d,
	0x38, 0x0b, 0x72, 0xa6, 0x43, 0x34, 0x4f, 0xba, 0x3d, 0xcd, 0x74, 0xcf, 0x32, 0xdd, 0x1b, 0xda,
	0xa7, 0xa0, 0x16, 0x2a, 0x83, 0x82, 0x88, 0x7e, 0x65, 0xa3, 0xf1, 0x32, 0x67, 0xe2, 0xb0, 0x8a,
	0xb9, 0x1b, 0x4a, 0xf3, 0x54, 0x29, 0x24, 0xb3, 0x0d, 0x9b, 0x5f, 0x90, 0x23, 0x68, 0xa8, 0x4c,
	0xa3, 0x48, 0x9e, 0xe4, 0x2d, 0xaa, 0x32, 0x47, 0xab, 0xb8, 0x85, 0x82, 0x50, 0x8f, 0x1b, 0xc9,
	0xff, 0xcb, 0x01, 0xd0, 0x15, 0xe2, 0xdd, 0x6f, 0x45, 0xc1, 0xdb, 0x50, 0x1f, 0xf3, 0x20, 0x99,
	0x58, 0x8a, 0xcd, 0x89, 0x7c, 0x0e, 0x4d, 0x8d, 0x18, 0xe5, 0xcb, 0x8c, 0xe1, 0x25, 0xdb, 0x27,
	0x77, 0x4a, 0x11, 0x86, 0x52, 0x4d, 0x61, 0x52, 0xc8, 0xd2, 0xa3, 0x95, 0x05, 0x9c, 0x25, 0xf9,
	0xc8, 0x64, 0x75, 0xb7, 0xb3, 0xee, 0x6b, 0x84, 0x69, 0x1c, 0xc9, 0x9e, 0x64, 0x86, 0x2b, 0xf6,
	0x6a, 0xbb, 0xd9, 0x33, 0x50, 0xf2, 0x35, 0x78, 0x61, 0x94, 0x44, 0x62, 0x26, 0xdd, 0xea, 0x3b,
	0xdd, 0x0a, 0xec, 0x06, 0xeb, 0x7b, 0x9b, 0xac, 0x3f, 0x81, 0xe6, 0x8a, 0x3b, 0x51, 0xaa, 0xbf,
	0xc4, 0x7c, 0xb9, 0x7e, 0xe4, 0xde, 0xd4, 0x8f, 0xec, 0xff, 0xe9, 0x80, 0xa7, 0x1a, 0xdb, 0xf6,
	0x4d, 0x28, 0xe5, 0xb5, 0xbe, 0x51, 0x46, 0x8a, 0x6a, 0xf5, 0xaa, 0xea, 0x57, 0x73, 0xeb, 0x20,
	0xb7, 0xad, 0x02, 0x83, 0xcc, 0x7a, 0xa1, 0x91, 0x76, 0x74, 0x0b, 0x4e, 0x08, 0xe3, 0x31, 0xb2,
	0xdd, 0xa2, 0x28, 0x2b, 0x8a, 0xe2, 0x74, 0x1a, 0x85, 0xd1, 0xad, 0x98, 0x2d, 0xb0, 0xf2, 0x41,
	0xee, 0x98, 0xa2, 0x0b, 0xf7, 0xfa, 0xf6, 0x23, 0xb6, 0x35, 0xe6, 0xc2, 0x7a, 0x7d, 0x04, 0xde,
	0x64, 0x16, 0xcd, 0xa7, 0xf2, 0x65, 0x25, 0xad, 0xd5, 0xf5, 0x7a, 0x0b, 0x93, 0x6a, 0x6b, 0x4b,
	0x8f, 0x28, 0x08, 0xd8, 0x6a, 0x6b, 0x0b, 0xd1, 0x04, 0x20, 0xb1, 0xd2, 0x51, 0x95, 0x4a, 0x83,
	0xe4, 0x9a, 0xa9, 0x91, 0x9d, 0xa7, 0xaf, 0x18, 0x47, 0x66, 0xe5, 0xc8, 0xe2, 0x41, 0x69, 0x17,
	0x6a, 0x9f, 0xd9, 0x41, 0xc6, 0x83, 0x4f, 0xc1, 0xc3, 0x45, 0x41, 0x59, 0x48, 0x1e, 0x42, 0x6d,
	0xac, 0x64, 0xf3, 0x22, 0x80, 0xc9, 0xb4, 0x55, 0x1b, 0xc8, 0x87, 0x50, 0xe3, 0x2a, 0x85, 0x99,
	0xe4, 0xb6, 0x46, 0xd8, 0xc4, 0x54, 0x1b, 0xf1, 0x32, 0x26, 0x26, 0x56, 0x81, 0xbe, 0x23, 0xce,
	0xc2, 0xb5, 0x2a, 0x2c, 0x84, 0x7a, 0x63, 0x23, 0xf9, 0x7f, 0x57, 0xa0, 0x7e, 0x2a, 0xaf, 0x95,
	0x4c, 0xc9, 0xa7, 0x00, 0x85, 0x9b, 0x78, 0xbd, 0x5f, 0x63, 0x5c, 0x24, 0xf9, 0xaa, 0x44, 0xaf,
	0x83, 0xd8, 0x77, 0x10, 0xab, 0x83, 0xf5, 0xce, 0x8c, 0xad, 0x9f, 0xe4, 0x7c, 0xb9, 0xa2, 0x9b,
	0x7c, 0x0c, 0xde, 0x3c, 0x10, 0x39, 0x5e, 0xad, 0xba, 0xfd, 0x88, 0x7b, 0xca, 0x28, 0xe3, 0x77,
	0x1f, 0x43, 0x6b, 0x2d, 0x04, 0xe9, 0x40, 0xf5, 0x86, 0x2d, 0xcd, 0x52, 0x55, 0xa2, 0x62, 0xf7,
	0x65, 0x30, 0x5f, 0x68, 0x66, 0x3c, 0xaa, 0x0f, 0xdf, 0x39, 0xdf, 0x56, 0xfc, 0xdf, 0x2b, 0x86,
	0x0e, 0x6c, 0xfa, 0xdd, 0x1c, 0xbf, 0x91, 0x7d, 0xf9, 0x18, 0xa0, 0xb8, 0x83, 0x20, 0x9f, 0x59,
	0x72, 0x4b, 0xad, 0xd5, 0x5e, 0xdd, 0x04, 0x7b, 0x4b, 0xb3, 0x8b, 0xcd, 0xf5, 0x8f, 0x9c, 0x5a,
	0xf5, 0xc1, 0xb0, 0x53, 0x2b, 0x7b, 0x3a, 0x5c, 0x9b, 0x5a, 0x65, 0xa4, 0xa8, 0xde, 0xde, 0x70,
	0xce, 0xae, 0x0d, 0xb7, 0xda, 0xae, 0xd5, 0xb5, 0xed, 0x5a, 0xda, 0x7c, 0xee, 0xff, 0xdb, 0x7c,
	0xb5, 0xff, 0xb0, 0xf9, 0x64, 0xb6, 0x00, 0x9b, 0x45, 0xc8, 0x71, 0xae, 0xa2, 0x9b, 0xad, 0x4c,
	0x95, 0x6d, 0x3a, 0x49, 0xe8, 0x0e, 0xb2, 0xd0, 0x1d, 0xfb, 0xb2, 0xfb, 0x1c, 0xf6, 0xcb, 0x7e,
	0xaf, 0x69, 0x9b, 0x0f, 0xca, 0x6d, 0x63, 0x69, 0xd2, 0x3e, 0xe5, 0x1e, 0xfa, 0xa3, 0x02, 0xb5,
	0x1f, 0xd5, 0x87, 0x97, 0x3c, 0x80, 0x26, 0x2e, 0x85, 0x64, 0x11, 0x8f, 0x8b, 0x09, 0x07, 0xa5,
	0xba, 0x44, 0x8d, 0x8c, 0xb8, 0x8f, 0x00, 0xb9, 0x9d, 0x16, 0xf3, 0x85, 0x30, 0xd3, 0x8e, 0x4e,
	0x17, 0x5a, 0xa5, 0x20, 0xfa, 0xf9, 0x4d, 0x10, 0xdd, 0x2d, 0x4d, 0xd4, 0x99, 0x28, 0x8f, 0xa0,
	0xa5, 0x21, 0x36, 0x8c, 0x8b, 0x18, 0xed, 0x67, 0xe2, 0x1c, 0x5d, 0xd9, 0x4f, 0x29, 0xee, 0xe0,
	0x03, 0xe8, 0x9c, 0x5d, 0x5d, 0x5c, 0x0c, 0x86, 0xa3, 0xe1, 0x2f, 0x3f, 0xf4, 0x47, 0x97, 0x57,
	0x97, 0xfd, 0xce, 0x5b, 0x9b, 0x5a, 0xda, 0x3f, 0x3d, 0xef, 0x54, 0xc8, 0x3d, 0xb8, 0x5b, 0xd6,
	0xfe, 0x4c, 0x07, 0xc3, 0x7e, 0xc7, 0x39, 0xfa, 0x5e, 0x7f, 0x1d, 0x30, 0x1c, 0x81, 0xf6, 0xb3,
	0xc1, 0x8b, 0xfe, 0x5a, 0x30, 0xe9, 0xb6, 0xd2, 0xd1, 0xfe, 0xf3, 0x9f, 0x5e, 0x9c, 0x52, 0x19,
	0xed, 0x2e, 0xb4, 0x56, 0xea, 0xf3, 0x01, 0xed, 0x38, 0xe3, 0x3a, 0x3e, 0xf6, 0x17, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x23, 0xa0, 0x67, 0xae, 0x4c, 0x0a, 0x00, 0x00,
}
