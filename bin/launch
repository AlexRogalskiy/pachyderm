#!/bin/sh

# This script launches one of the pachyderm images.
# PACHYDERM_IMAGE must be set.
# This will put the image into daemon mode.

set -Eex

DIR="$(cd "$(dirname "${0}")" && pwd)"
cd "${DIR}"

. "${DIR}/../etc/env/env.env"

if [ -z "${PACHYDERM_IMAGE}" ]; then
  echo "error: launch should only be used if PACHYDERM_IMAGE is set" >&2
  exit 1
fi
fi

"${DIR}/clean"
"${DIR}/build"

if [ -z "${AWS_REGION}" ]; then
	AWS_REGION="${DEFAULT_AWS_REGION}"
fi
if [ -z "${GOMAXPROCS}" ]; then
  GOMAXPROCS="${DEFAULT_GOMAXPROCS}"
fi

export PFS_HOST_VOLUME="/var/lib/pfs/vol"
export PFS_LOCAL_VOLUME="/var/lib/pfs/vol"
export PFS_BTRFS_ROOT="/var/lib/pfs/vol"
echo "PFS_HOST_VOLUME=${PFS_HOST_VOLUME}" >&2
echo "PFS_LOCAL_VOLUME=${PFS_LOCAL_VOLUME}" >&2
echo "PFS_BTRFS_ROOT=${PFS_BTRFS_ROOT}" >&2
TMPIMG="${PFS_HOST_VOLUME}/btrfs-data.img.$$"
truncate "${TMPIMG}" -s 10G
mkfs.btrfs "${TMPIMG}"
mount "${TMPIMG}" "${PFS_HOST_VOLUME}"

docker run \
    ${PACHYDERM_DOCKER_OPTS} \
    --privileged=true \
    --name "${PACHYDERM_IMAGE}" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /:/host:ro \
    -v "${PFS_HOST_VOLUME}:${PFS_HOST_VOLUME}" \
    -v "${PFS_HOST_VOLUME}:/host/${PFS_HOST_VOLUME}" \
    -e "GOMAXPROCS=${GOMAXPROCS}" \
    -e "PFS_HOST_VOLUME=${PFS_HOST_VOLUME}" \
    -e "PFS_BTRFS_ROOT=${PFS_BTRFS_ROOT}" \
    -e "PFS_API_PORT=${PFS_API_PORT}" \
    -e "PFS_TRACE_PORT=${PFS_TRACE_PORT}" \
    -e "PFS_NUM_SHARDS=${PFS_NUM_SHARDS}" \
    -e "AWS_REGION=${AWS_REGION}" \
    -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" \
    -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" \
    -p "${PFS_PORT}:${PFS_API_PORT}" \
    -p "${PFS_TRACE_PORT}:${PFS_TRACE_PORT}" \
    -p "8080:8080" \
    "pachyderm/${PACHYDERM_IMAGE}" \
    $@
