# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

jobs:
  internal:
    docker:
    - image: circleci/golang:1.15

    environment:
      GOPROXY: https://proxy.golang.org
      TEST_RESULTS: /tmp/test-results
    
    parallelism: 4
    
    resource_class: large

    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}

      - run:
          name: Run tests
          command: |
            PACKAGE_NAMES=$(cat internal_tests.txt | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results

  pg:
    docker:
      - image: circleci/golang:1.15
        environment:
          #DATABASE_URL: "postgres://postgres:pw1234@localhost:5432/pgc?sslmode=disable"
      
      - image: postgres:13.0-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: pgc
          #POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_PASSWORD: pw1234
          PGPORT: 5432

    parallelism: 1

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}

      #  Wait for Postgres to be ready before proceeding
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run unit tests

          # store the results of our tests in the $TEST_RESULTS directory
          command: |
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- ./src/internal/storage/...
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
  build:
    docker:
    - image: circleci/golang:1.15

    environment:
      GOPROXY: https://proxy.golang.org

    resource_class: large

    steps:
      - checkout
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}

      - run:
          name: Get Deps
          command: |
            go get github.com/go-bindata/go-bindata/...
      - run:
          name: Package Assets
          command: |
            go-bindata -o src/server/cmd/worker/assets/assets.go -pkg assets /etc/ssl/certs/...

      - run:
          name: Build Pachd
          command: |
            CGO_ENABLED=0 go build -ldflags "${LD_FLAGS}" -o pachd "src/server/cmd/pachd/main.go"

      - run:
          name: Build Worker
          command: |
            CGO_ENABLED=0 go build -ldflags "${LD_FLAGS}" -o worker "src/server/cmd/worker/main.go"

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  kind:
    docker:
      - image: tiltdev/circleci-kind:v1.4.0
    resource_class: large

    steps:
      - setup_remote_docker
      - checkout
      - run: with-kind-cluster.sh
      #- run: wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /home/circleci/bin/helm && chmod +x /home/circleci/bin/helm
      #- run: helm install

workflows:
  version: 2 
  build-workflow:
    jobs:
      #- internal
      - pg
      #- build
      #- kind
